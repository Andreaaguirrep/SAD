diff -dur generic/tkRectOval.c.orig generic/tkRectOval.c
--- generic/tkRectOval.c.orig	Tue Oct 17 00:35:27 2006
+++ generic/tkRectOval.c	Thu Feb 22 22:29:06 2007
@@ -241,6 +241,9 @@
  *
  *--------------------------------------------------------------
  */
+static int		KBCreateRectOval (Tcl_Interp *interp,
+			    Tk_Canvas canvas, struct Tk_Item *itemPtr,
+			    int objc, Tcl_Obj *CONST objv[]);
 
 static int
 CreateRectOval(interp, canvas, itemPtr, objc, objv)
@@ -275,6 +278,9 @@
     rectOvalPtr->disabledFillStipple = None;
     rectOvalPtr->fillGC = None;
 
+    if (objc<0)
+	return KBCreateRectOval(interp, canvas, itemPtr, objc, objv);
+
     /*
      * Process the arguments to fill in the item record.
      */
@@ -297,6 +303,42 @@
     DeleteRectOval(canvas, itemPtr, Tk_Display(Tk_CanvasTkwin(canvas)));
     return TCL_ERROR;
 }
+
+static int
+KBCreateRectOval(interp, canvas, itemPtr, objc, objv)
+    Tcl_Interp *interp;			/* For error reporting. */
+    Tk_Canvas canvas;			/* Canvas to hold new item. */
+    Tk_Item *itemPtr;			/* Record to hold new item;  header
+					 * has been initialized by caller. */
+    int objc;				/* Number of arguments in objv. */
+    Tcl_Obj *CONST objv[];		/* Arguments describing rectangle. */
+{
+    RectOvalItem *rectOvalPtr = (RectOvalItem *) itemPtr;
+    int nn;
+    double *bb;
+
+    objc = -objc;
+    nn = *((int *)objv[objc-2]);
+    bb = (double *)objv[objc-1];
+    objc -= 2;
+
+    /*
+     * Process the arguments to fill in the item record.
+     */
+
+    rectOvalPtr->bbox[0] = bb[0];
+    rectOvalPtr->bbox[1] = bb[1];
+    rectOvalPtr->bbox[2] = bb[2];
+    rectOvalPtr->bbox[3] = bb[3];
+    ComputeRectOvalBbox(canvas, rectOvalPtr);
+    if (ConfigureRectOval(interp, canvas, itemPtr, objc, objv, 0)
+	    == TCL_OK) {
+	return TCL_OK;
+    }
+
+    DeleteRectOval(canvas, itemPtr, Tk_Display(Tk_CanvasTkwin(canvas)));
+    return TCL_ERROR;
+}
 
 /*
  *--------------------------------------------------------------
