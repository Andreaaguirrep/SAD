--- generic/tkCanvText.c.orig	2007-04-24 00:16:02.000000000 +0200
+++ generic/tkCanvText.c	2008-02-19 15:05:41.000000000 +0100
@@ -18,6 +18,16 @@
 #include "tkPort.h"
 #include "default.h"
 
+EXTERN Tk_TextLayout	Tk_KGComputeTextLayout (Tk_Font font,
+			    CONST char *string, int numChars, int wrapLength,
+			    Tk_Justify justify, int flags, int *widthPtr,
+			    int *heightPtr, Tk_Font, Tk_Font, Tk_Font,
+			    GC, GC, GC, GC, int);
+EXTERN void             Tk_KGDrawTextLayout (Display *display,
+                            Drawable drawable, GC gc, Tk_TextLayout layout,
+                            int  x, int y, int firstChar, int lastChar);
+
+
 /*
  * The structure below defines the record for each text item.
  */
@@ -49,6 +59,9 @@
     XColor *activeColor;	/* Color for text. */
     XColor *disabledColor;	/* Color for text. */
     Tk_Font tkfont;		/* Font for drawing text. */
+    Tk_Font tkaltfont;	/* Information about alt text font, or NULL. */
+    Tk_Font tkscriptfont;	/* Information about script font, or NULL. */
+    Tk_Font tkaltscriptfont;	/* Information about alt script font, or NULL. */
     Tk_Justify justify;		/* Justification mode for text. */
     Pixmap stipple;		/* Stipple bitmap for text, or None. */
     Pixmap activeStipple;	/* Stipple bitmap for text, or None. */
@@ -74,11 +87,22 @@
 				 * of text item. Used for selecting up to end
 				 * of line. */
     GC gc;			/* Graphics context for drawing text. */
+    GC altGc;			/* Graphics context for drawing alttext. */
+    GC scriptGc;		/* Graphics context for drawing scripttext. */
+    GC altScriptGc;		/* Graphics context for drawing altscripttext. */
     GC selTextGC;		/* Graphics context for selected text. */
     GC cursorOffGC;		/* If not None, this gives a graphics context
 				 * to use to draw the insertion cursor when
 				 * it's off. Used if the selection and
 				 * insertion cursor colors are the same. */
+    GC copyGC;			/* Used for copying information from an
+				 * off-screen pixmap to the screen. */
+    int rotation, dx, dy;
+    int pixoffx, pixoffy;
+    int usebg;
+    XColor *bgcolor;
+    GC bgGC;
+    int bsmplw,brmdes;
 } TextItem;
 
 /*
@@ -113,8 +137,18 @@
 	"black", Tk_Offset(TextItem, color), TK_CONFIG_NULL_OK},
     {TK_CONFIG_FONT, "-font", NULL, NULL,
 	DEF_CANVTEXT_FONT, Tk_Offset(TextItem, tkfont), 0},
+    {TK_CONFIG_FONT, "-altfont", NULL, NULL,
+	"Symbol -14", Tk_Offset(TextItem, tkaltfont), 0},
+    {TK_CONFIG_FONT, "-scriptfont", NULL, NULL,
+	"Helvetica -10", Tk_Offset(TextItem, tkscriptfont), 0},
+    {TK_CONFIG_FONT, "-altscriptfont", NULL, NULL,
+	"Symbol -10", Tk_Offset(TextItem, tkaltscriptfont), 0},
     {TK_CONFIG_JUSTIFY, "-justify", NULL, NULL,
 	"left", Tk_Offset(TextItem, justify), TK_CONFIG_DONT_SET_DEFAULT},
+    {TK_CONFIG_INT, "-removelastdescent", NULL, NULL,
+	"0", Tk_Offset(TextItem, brmdes), 0},
+    {TK_CONFIG_INT, "-rotation", NULL, NULL,
+	"0", Tk_Offset(TextItem, rotation), 0},
     {TK_CONFIG_CUSTOM, "-offset", NULL, NULL,
 	"0,0", Tk_Offset(TextItem, tsoffset),
 	TK_CONFIG_DONT_SET_DEFAULT, &offsetOption},
@@ -126,6 +160,10 @@
 	NULL, 0, TK_CONFIG_NULL_OK, &tagsOption},
     {TK_CONFIG_STRING, "-text", NULL, NULL,
 	"", Tk_Offset(TextItem, text), 0},
+    {TK_CONFIG_COLOR, "-textbg", NULL, NULL,
+	DEF_CANVAS_BG_COLOR, Tk_Offset(TextItem, bgcolor), 0},
+    {TK_CONFIG_INT, "-usebg", NULL, NULL,
+	"0", Tk_Offset(TextItem, usebg), 0},
     {TK_CONFIG_INT, "-underline", NULL, NULL,
 	"-1", Tk_Offset(TextItem, underline), 0},
     {TK_CONFIG_PIXELS, "-width", NULL, NULL,
@@ -176,6 +214,8 @@
 static void		TranslateText(Tk_Canvas canvas,
 			    Tk_Item *itemPtr, double deltaX, double deltaY);
 
+int bTkCanvTextDebug=0;
+
 /*
  * The structures below defines the rectangle and oval item types by means of
  * functions that can be invoked by generic item code.
@@ -221,6 +261,9 @@
  *
  *--------------------------------------------------------------
  */
+static int		KBCreateText (Tcl_Interp *interp,
+			    Tk_Canvas canvas, struct Tk_Item *itemPtr,
+			    int objc, Tcl_Obj *CONST objv[]);
 
 static int
 CreateText(
@@ -255,6 +298,9 @@
     textPtr->activeColor = NULL;
     textPtr->disabledColor = NULL;
     textPtr->tkfont	= NULL;
+    textPtr->tkaltfont	= NULL;
+    textPtr->tkscriptfont	= NULL;
+    textPtr->tkaltscriptfont	= NULL;
     textPtr->justify	= TK_JUSTIFY_LEFT;
     textPtr->stipple	= None;
     textPtr->activeStipple = None;
@@ -269,8 +315,20 @@
     textPtr->leftEdge	= 0;
     textPtr->rightEdge	= 0;
     textPtr->gc		= None;
+    textPtr->altGc		= None;
+    textPtr->scriptGc		= None;
+    textPtr->altScriptGc		= None;
     textPtr->selTextGC	= None;
     textPtr->cursorOffGC = None;
+    textPtr->copyGC = None;
+    textPtr->rotation = 0;
+    textPtr->usebg = 0;
+    textPtr->bgcolor	= NULL;
+    textPtr->bgGC = 0;
+    textPtr->brmdes = 0;
+
+    if (objc<0)
+	return KBCreateText(interp, canvas, itemPtr, objc, objv);
 
     /*
      * Process the arguments to fill in the item record. Only 1 (list) or 2 (x
@@ -298,6 +356,43 @@
     DeleteText(canvas, itemPtr, Tk_Display(Tk_CanvasTkwin(canvas)));
     return TCL_ERROR;
 }
+
+static int
+KBCreateText(interp, canvas, itemPtr, objc, objv)
+    Tcl_Interp *interp;		/* Interpreter for error reporting. */
+    Tk_Canvas canvas;		/* Canvas to hold new item. */
+    Tk_Item *itemPtr;		/* Record to hold new item; header has been
+				 * initialized by caller. */
+    int objc;			/* Number of arguments in objv. */
+    Tcl_Obj *CONST objv[];	/* Arguments describing rectangle. */
+{
+    TextItem *textPtr = (TextItem *) itemPtr;
+    int nn;
+    double *bb;
+
+    objc = -objc;
+    nn = *((int *)objv[objc-2]);
+    bb = (double *)objv[objc-1];
+    objc -= 2;
+
+    /*
+     * Process the arguments to fill in the item record.
+     */
+
+    if (nn != 2) {
+	return TCL_ERROR;
+    }
+    textPtr->x = bb[0];
+    textPtr->y = bb[1];
+    ComputeTextBbox(canvas, textPtr);
+    if (ConfigureText(interp, canvas, itemPtr, objc, objv, 0) == TCL_OK) {
+	return TCL_OK;
+    }
+
+    /*error:*/
+    DeleteText(canvas, itemPtr, Tk_Display(Tk_CanvasTkwin(canvas)));
+    return TCL_ERROR;
+}
 
 /*
  *--------------------------------------------------------------
@@ -396,7 +491,7 @@
     TextItem *textPtr = (TextItem *) itemPtr;
     XGCValues gcValues;
     GC newGC, newSelGC;
-    unsigned long mask;
+    unsigned long mask = GCFont;
     Tk_Window tkwin;
     Tk_CanvasTextInfo *textInfoPtr = textPtr->textInfoPtr;
     XColor *selBgColorPtr;
@@ -404,6 +499,9 @@
     Pixmap stipple;
     Tk_State state;
 
+    if (bTkCanvTextDebug)
+      printf("TkCanvTextDebug: ConfigureText\n");
+
     tkwin = Tk_CanvasTkwin(canvas);
     if (TCL_OK != Tk_ConfigureWidget(interp, tkwin, configSpecs, objc,
 	    (CONST char **) objv, (char *) textPtr, flags|TK_CONFIG_OBJS)) {
@@ -479,6 +577,40 @@
     }
     textPtr->selTextGC = newSelGC;
 
+    if (textPtr->copyGC == None) {
+	textPtr->copyGC = Tk_GetGC(tkwin, 0, &gcValues);
+    }
+
+
+    gcValues.foreground = textPtr->color->pixel;
+    gcValues.font = Tk_FontId(textPtr->tkaltfont);
+    newGC = Tk_GetGC(tkwin, mask, &gcValues);
+    if (textPtr->altGc != None) {
+	Tk_FreeGC(Tk_Display(tkwin), textPtr->altGc);
+    }
+    textPtr->altGc = newGC;
+    gcValues.font = Tk_FontId(textPtr->tkscriptfont);
+    newGC = Tk_GetGC(tkwin, mask, &gcValues);
+    if (textPtr->scriptGc != None) {
+	Tk_FreeGC(Tk_Display(tkwin), textPtr->scriptGc);
+    }
+    textPtr->scriptGc = newGC;
+    gcValues.font = Tk_FontId(textPtr->tkaltscriptfont);
+    newGC = Tk_GetGC(tkwin, mask, &gcValues);
+    if (textPtr->altScriptGc != None) {
+	Tk_FreeGC(Tk_Display(tkwin), textPtr->altScriptGc);
+    }
+    textPtr->altScriptGc = newGC;
+	
+    gcValues.foreground = textPtr->bgcolor->pixel;
+/*    printf("bgcolor = %X\n",gcValues.foreground);*/
+    mask = GCForeground;
+    newGC = Tk_GetGC(tkwin, mask, &gcValues);
+    if (textPtr->bgGC != None) {
+	Tk_FreeGC(Tk_Display(tkwin), textPtr->bgGC);
+    }
+    textPtr->bgGC = newGC;
+
     selBgColorPtr = Tk_3DBorderColor(textInfoPtr->selBorder);
     if (Tk_3DBorderColor(textInfoPtr->insertBorder)->pixel
 	    == selBgColorPtr->pixel) {
@@ -561,6 +693,9 @@
 	Tk_FreeColor(textPtr->disabledColor);
     }
     Tk_FreeFont(textPtr->tkfont);
+    Tk_FreeFont(textPtr->tkaltfont);
+    Tk_FreeFont(textPtr->tkscriptfont);
+    Tk_FreeFont(textPtr->tkaltscriptfont);
     if (textPtr->stipple != None) {
 	Tk_FreeBitmap(display, textPtr->stipple);
     }
@@ -578,12 +713,51 @@
     if (textPtr->gc != None) {
 	Tk_FreeGC(display, textPtr->gc);
     }
+    if (textPtr->altGc != None) {
+	Tk_FreeGC(display, textPtr->altGc);
+    }
+    if (textPtr->scriptGc != None) {
+	Tk_FreeGC(display, textPtr->scriptGc);
+    }
+    if (textPtr->altScriptGc != None) {
+	Tk_FreeGC(display, textPtr->altScriptGc);
+    }
     if (textPtr->selTextGC != None) {
 	Tk_FreeGC(display, textPtr->selTextGC);
     }
     if (textPtr->cursorOffGC != None) {
 	Tk_FreeGC(display, textPtr->cursorOffGC);
     }
+    if (textPtr->copyGC != None) {
+	Tk_FreeGC(display, textPtr->copyGC);
+    }
+    if (textPtr->bgGC != None) {
+	Tk_FreeGC(display, textPtr->bgGC);
+    }
+}
+
+static void rotatepoint(textPtr, x1, y1, dx1, dy1, px2, py2)
+    TextItem *textPtr;
+    int x1,y1,dx1,dy1,*px2,*py2;
+{
+    switch(textPtr->rotation) {
+    case 90:
+	*px2 =  (y1-textPtr->y) + textPtr->y;
+	*py2 = -(x1-textPtr->x) + textPtr->x;
+	break;
+
+    case 180:
+	*px2 = -(x1-textPtr->x) + textPtr->x;
+	*py2 = -(y1-textPtr->y) + textPtr->y;
+	break;
+
+    case 270:
+	*px2 = -(y1-textPtr->y) + textPtr->y;
+	*py2 =  (x1-textPtr->x) + textPtr->x;
+	break;
+    }
+    *px2 += dx1;
+    *py2 += dy1;
 }
 
 /*
@@ -619,10 +793,24 @@
 	state = ((TkCanvas *)canvas)->canvas_state;
     }
 
+    if (bTkCanvTextDebug) {
+	printf("TkCanvTextDebug: ComputeTextBbox(%s)\n",textPtr->text);
+	printf("x,y: %f,%f\n", textPtr->x, textPtr->y);
+    }
+
     Tk_FreeTextLayout(textPtr->textLayout);
-    textPtr->textLayout = Tk_ComputeTextLayout(textPtr->tkfont,
+    textPtr->bsmplw = (textPtr->text==NULL)||(strchr(textPtr->text,'`') ? 0 : 1);
+    if (textPtr->bsmplw&&textPtr->rotation==0)
+	textPtr->textLayout = Tk_ComputeTextLayout(textPtr->tkfont,
 	    textPtr->text, textPtr->numChars, textPtr->width,
 	    textPtr->justify, 0, &width, &height);
+    else
+	textPtr->textLayout = Tk_KGComputeTextLayout(textPtr->tkfont,
+	    textPtr->text, textPtr->numChars, textPtr->width,
+	    textPtr->justify, 0, &width, &height, textPtr->tkaltfont,
+	    textPtr->tkscriptfont, textPtr->tkaltscriptfont, textPtr->gc,
+	    textPtr->altGc, textPtr->scriptGc, textPtr->altScriptGc,
+	    textPtr->brmdes);
 
     if (state == TK_STATE_HIDDEN || textPtr->color == NULL) {
 	width = height = 0;
@@ -681,15 +869,155 @@
      * factor for the cursor border (which could potentially be quite large).
      */
 
-    textInfoPtr = textPtr->textInfoPtr;
-    fudge = (textInfoPtr->insertWidth + 1) / 2;
-    if (textInfoPtr->selBorderWidth > fudge) {
-	fudge = textInfoPtr->selBorderWidth;
+    /*
+    if (!textPtr->bsmplw &&
+	  (textPtr->fontPtr->ascent < textPtr->altFontPtr->max_bounds.ascent)){
+	textPtr->header.y1 -=
+	    textPtr->altFontPtr->max_bounds.ascent-textPtr->fontPtr->ascent;
+    }
+    */
+
+    if (textPtr->rotation != 0) {
+	int currianch = 0, newanchor = 0, anchx1 = 0, anchy1 = 0, anchx2, anchy2
+;
+	static int lanchc[]={TK_ANCHOR_N,TK_ANCHOR_E,TK_ANCHOR_S,TK_ANCHOR_W};
+	static int lanche[]={TK_ANCHOR_NW,TK_ANCHOR_NE,TK_ANCHOR_SE,TK_ANCHOR_SW};
+	int x1,x2,y1,y2,nx1,nx2,ny1,ny2,dx,dy;
+
+	textPtr->header.x1 = leftX;
+	textPtr->header.y1 = topY;
+	textPtr->header.x2 = leftX + width;
+	textPtr->header.y2 = topY + height;
+
+	switch(textPtr->anchor) {
+	case TK_ANCHOR_CENTER:
+	    break;
+	case TK_ANCHOR_N:
+	case TK_ANCHOR_NW:
+	    currianch = 0;
+	    break;
+	case TK_ANCHOR_E:
+	case TK_ANCHOR_NE:
+	    currianch = 1;
+	    break;
+	case TK_ANCHOR_S:
+	case TK_ANCHOR_SE:
+	    currianch = 2;
+	    break;
+	case TK_ANCHOR_W:
+	case TK_ANCHOR_SW:
+	    currianch = 3;
+	    break;
+	}	    
+
+	switch(textPtr->anchor) {
+	case TK_ANCHOR_N:
+	case TK_ANCHOR_E:
+	case TK_ANCHOR_S:
+	case TK_ANCHOR_W:
+	    newanchor = lanchc[(currianch+(int)(textPtr->rotation/90))%4];
+	    /*printf("newanchor = %d\n", newanchor);*/
+	    break;
+	
+	case TK_ANCHOR_NW:
+	case TK_ANCHOR_NE:
+	case TK_ANCHOR_SE:
+	case TK_ANCHOR_SW:
+	    newanchor = lanche[(currianch+(int)(textPtr->rotation/90))%4];
+	    /*printf("newanchor = %d\n", newanchor);*/
+	    break;
+
+	case TK_ANCHOR_CENTER:
+	    newanchor = TK_ANCHOR_CENTER;
+	    break;
+	}
+
+	switch (newanchor) {
+	case TK_ANCHOR_NW:
+	case TK_ANCHOR_N:
+	case TK_ANCHOR_NE:
+	    anchy1 = textPtr->header.y1;
+	    break;
+
+	case TK_ANCHOR_W:
+	case TK_ANCHOR_CENTER:
+	case TK_ANCHOR_E:
+	    anchy1 = (textPtr->header.y1+textPtr->header.y2)/2.;
+	    break;
+
+	case TK_ANCHOR_SW:
+	case TK_ANCHOR_S:
+	case TK_ANCHOR_SE:
+	    anchy1 = textPtr->header.y2;
+	    break;
+	}
+	switch (newanchor) {
+	case TK_ANCHOR_NW:
+	case TK_ANCHOR_W:
+	case TK_ANCHOR_SW:
+	    anchx1 = textPtr->header.x1;
+	    break;
+
+	case TK_ANCHOR_N:
+	case TK_ANCHOR_CENTER:
+	case TK_ANCHOR_S:
+	    anchx1 = (textPtr->header.x1+textPtr->header.x2)/2.;
+	    break;
+
+	case TK_ANCHOR_NE:
+	case TK_ANCHOR_E:
+	case TK_ANCHOR_SE:
+	    anchx1 = textPtr->header.x2;
+	    break;
+	}
+
+	rotatepoint(textPtr, anchx1, anchy1, 0, 0, &anchx2, &anchy2);
+	textPtr->dx = textPtr->x - anchx2;
+	textPtr->dy = textPtr->y - anchy2;
+	/*printf("anch:%d %d %d %d\n",anchx1,anchy1,anchx2,anchy2);*/
+
+	x1 = textPtr->header.x1;
+	y1 = textPtr->header.y1;
+	x2 = textPtr->header.x2;
+	y2 = textPtr->header.y2;
+	dx = textPtr->dx;
+	dy = textPtr->dy;
+	/*printf("x1,y1,x2,y2,dx,dy:%d %d %d %d %d %d\n",x1,y1,x2,y2,dx,dy);*/
+	switch(textPtr->rotation) {
+	case 90:
+	    rotatepoint(textPtr, x2, y1, dx, dy, &nx1, &ny1);
+	    rotatepoint(textPtr, x1, y2, dx, dy, &nx2, &ny2);
+	    break;
+	case 180:
+	    rotatepoint(textPtr, x2, y2, dx, dy, &nx1, &ny1);
+	    rotatepoint(textPtr, x1, y1, dx, dy, &nx2, &ny2);
+	    break;
+	case 270:
+	    rotatepoint(textPtr, x1, y2, dx, dy, &nx1, &ny1);
+	    rotatepoint(textPtr, x2, y1, dx, dy, &nx2, &ny2);
+	    break;
+	}
+	/*printf("nx1,ny1,nx2,ny2:%d %d %d %d\n",nx1,ny1,nx2,ny2);*/
+	textPtr->header.x1 = nx1;
+	textPtr->header.y1 = ny1;
+	textPtr->header.x2 = nx2;
+	textPtr->header.y2 = ny2;
+
+	textPtr->leftEdge  = nx1;
+	textPtr->rightEdge = nx2;
+	textPtr->pixoffx = textPtr->header.x1;
+	textPtr->pixoffy = textPtr->header.y1;
+    } else {
+	textInfoPtr = textPtr->textInfoPtr;
+	fudge = (textInfoPtr->insertWidth + 1) / 2;
+	if (textInfoPtr->selBorderWidth > fudge) {
+	    fudge = textInfoPtr->selBorderWidth;
+	}
+	textPtr->header.x1 = leftX - fudge;
+	textPtr->header.y1 = topY;
+	textPtr->header.x2 = leftX + width + fudge;
+	textPtr->header.y2 = topY + height;
     }
-    textPtr->header.x1 = leftX - fudge;
-    textPtr->header.y1 = topY;
-    textPtr->header.x2 = leftX + width + fudge;
-    textPtr->header.y2 = topY + height;
 }
 
 /*
@@ -726,6 +1054,14 @@
     Pixmap stipple;
     Tk_State state = itemPtr->state;
 
+    int xoff, yoff, xos, yos, xpos, ypos, w = 0, h = 0, wt = 0, ht = 0;
+    int xsi = 0, ysi = 0, wsi, hsi;
+    Pixmap pixmap;
+    Tk_Window tkwin = Tk_CanvasTkwin(canvas);
+
+    if (bTkCanvTextDebug)
+      printf("TkCanvTextDebug: DisplayCanvText\n");
+
     textPtr = (TextItem *) itemPtr;
     textInfoPtr = textPtr->textInfoPtr;
 
@@ -747,6 +1083,118 @@
 	return;
     }
 
+    if (textPtr->rotation != 0) {
+	int i,j,dxp,dyp,dwp,dhp;
+	unsigned int wd,hd,bd,dp;
+	short tmpx, tmpy;
+	XImage *ims, *imd;
+	char *imddat;
+	Window root;
+	
+	w = textPtr->header.x2-textPtr->header.x1;
+	h = textPtr->header.y2-textPtr->header.y1;
+	if ((w==0)||(h==0))
+	    return;
+	/*printf("w,h:%d,%d\n",w,h);*/
+	xoff = textPtr->header.x1;
+	yoff = textPtr->header.y1;
+/*	printf("x,yoff:%d %d\n",xoff,yoff);*/
+	Tk_CanvasDrawableCoords(canvas, (double) xoff,
+		(double) yoff, &tmpx, &tmpy);
+	xos = tmpx; yos = tmpy;
+	xoff = textPtr->pixoffx;
+	yoff = textPtr->pixoffy;
+	Tk_CanvasDrawableCoords(canvas, (double) xoff,
+		(double) yoff, &tmpx, &tmpy);
+	xpos = tmpx; ypos = tmpy;
+	/*printf("x,ypos: %d,%d\n", xpos, ypos);*/
+/*	printf("x,yoff:%d %d x,yos: %d %d w,h:%d %d\n",xoff,yoff,xos,yos,w,h);*/
+/*	XCopyArea(display, drawable, pixmap, textPtr->copyGC, xos, yos, w, h, 0, 0);*/
+	XGetGeometry(display, drawable, &root, &i, &j, &wd, &hd, &bd, &dp);
+/*	printf("i,j,wd,hd,bd,dp:%d %d %d %d %d %d\n",i,j,wd,hd,bd,dp);*/
+	xsi = xos; ysi = yos; wsi = w; hsi = h;
+/*	printf("xsi etc.:%d %d %d %d\n",xsi,ysi,wsi,hsi);*/
+	dxp = 0; dyp = 0; dwp = 0; dhp = 0;
+	if (xsi<0) {
+	    wsi += xsi;
+	    dxp = -xsi;
+	    xsi = 0;
+	}
+	if (ysi<0) {
+	    hsi += ysi;
+	    dyp = -ysi;
+	    ysi = 0;
+	}
+	if (xsi+wsi>wd) {
+	    dwp = xsi+wsi - wd;
+	    wsi -= dwp;
+	}
+	if (ysi+hsi>hd) {
+	    dhp = ysi+hsi - hd;
+	    hsi -= dhp;
+	}
+/*	printf("xsi etc.:%d %d %d %d %d %d\n",xsi,ysi,wsi,hsi,dxp,dyp);*/
+	w = wsi; h = hsi;
+	switch(textPtr->rotation) {
+	case 90:
+	    xpos += dhp;
+	    ypos += dxp;
+	    break;
+	case 180:
+	    xpos += dwp;
+	    ypos += dhp;
+	    break;
+	case 270:
+	    xpos += dyp;
+	    ypos += dwp;
+	    break;
+	}
+	if (textPtr->rotation == 180) {
+	    wt = w;
+	    ht = h;
+	} else {
+	    wt = h;
+	    ht = w;
+	}
+	pixmap = Tk_GetPixmap(display, Tk_WindowId(tkwin),
+	    wt, ht, Tk_Depth(tkwin));
+	/*printf("pixmap w,h:%d,%d\n",wt,ht);*/
+	if (textPtr->usebg) {
+	    XFillRectangle(Tk_Display(tkwin), pixmap, textPtr->bgGC,
+		0, 0, (unsigned int) wt, (unsigned int) ht);
+	    /*Tk_Fill3DRectangle(tkwin, pixmap, textPtr->bgBorder, 0, 0, wt, ht,
+	      0, TK_RELIEF_FLAT);*/
+	} else {
+	    ims = XGetImage(display, drawable, xsi, ysi, wsi, hsi,
+		      AllPlanes, ZPixmap);
+	    imddat = malloc(w*h*sizeof(int));
+	    imd = XCreateImage(display, Tk_Visual(tkwin), Tk_Depth(tkwin),
+		      ZPixmap, 0, imddat, wt, ht, ims->bitmap_pad, 0);
+	    if (textPtr->rotation==270)
+		for (i=0; i<wt; i++)
+		    for (j=0; j<ht; j++)
+			XPutPixel(imd, i, ht-j-1, XGetPixel(ims, j, i));
+	    else if (textPtr->rotation==180)
+		for (i=0; i<h; i++)
+		    for (j=0; j<w; j++)
+			XPutPixel(imd, w-j-1, h-i-1, XGetPixel(ims, j, i));
+	    else if (textPtr->rotation==90)
+		for (i=0; i<wt; i++)
+		    for (j=0; j<ht; j++)
+			XPutPixel(imd, wt-i-1, j, XGetPixel(ims, j, i));
+	    TkPutImage(NULL, 0, display, pixmap, textPtr->copyGC, imd, 0, 0, 0, 0, 
+		wt, ht);
+
+	    XDestroyImage(ims);
+	    XDestroyImage(imd);
+	}
+    } else {
+	pixmap = drawable;
+	xpos = 0;
+	ypos = 0;
+    }
+    /*printf("x,ypos: %d,%d\n", xpos, ypos);*/
+
     /*
      * If we're stippling, then modify the stipple offset in the GC. Be sure
      * to reset the offset when done, since the GC is supposed to be
@@ -799,7 +1247,7 @@
 				- textInfoPtr->selBorderWidth),
 			(double) (textPtr->header.y1 + y),
 			&drawableX, &drawableY);
-		Tk_Fill3DRectangle(Tk_CanvasTkwin(canvas), drawable,
+		Tk_Fill3DRectangle(Tk_CanvasTkwin(canvas), pixmap,
 			textInfoPtr->selBorder, drawableX, drawableY,
 			width + 2 * textInfoPtr->selBorderWidth,
 			height, textInfoPtr->selBorderWidth, TK_RELIEF_RAISED);
@@ -828,7 +1276,7 @@
 	    Tk_SetCaretPos(Tk_CanvasTkwin(canvas), drawableX, drawableY,
 		    height);
 	    if (textInfoPtr->cursorOn) {
-		Tk_Fill3DRectangle(Tk_CanvasTkwin(canvas), drawable,
+		Tk_Fill3DRectangle(Tk_CanvasTkwin(canvas), pixmap,
 			textInfoPtr->insertBorder,
 			drawableX, drawableY,
 			textInfoPtr->insertWidth, height,
@@ -841,7 +1289,7 @@
 		 * where both may be drawn in the same color.
 		 */
 
-		XFillRectangle(display, drawable, textPtr->cursorOffGC,
+		XFillRectangle(display, pixmap, textPtr->cursorOffGC,
 			drawableX, drawableY,
 			(unsigned) textInfoPtr->insertWidth,
 			(unsigned) height);
@@ -862,17 +1310,19 @@
     Tk_CanvasDrawableCoords(canvas, (double) textPtr->leftEdge,
 	    (double) textPtr->header.y1, &drawableX, &drawableY);
 
+    /*printf("drawableX,Y: %d,%d\n", drawableX, drawableY);*/
+    if (textPtr->bsmplw)
+	Tk_DrawTextLayout(display, pixmap, textPtr->gc, textPtr->textLayout,
+	    drawableX-xpos, drawableY-ypos, 0, -1);
+    else
+	Tk_KGDrawTextLayout(display, pixmap, textPtr->gc, textPtr->textLayout,
+	    drawableX-xpos, drawableY-ypos, 0, -1);
     if ((selFirstChar >= 0) && (textPtr->selTextGC != textPtr->gc)) {
-	Tk_DrawTextLayout(display, drawable, textPtr->gc, textPtr->textLayout,
-	    drawableX, drawableY, 0, selFirstChar);
-	Tk_DrawTextLayout(display, drawable, textPtr->selTextGC,
+	Tk_DrawTextLayout(display, pixmap, textPtr->selTextGC,
 	    textPtr->textLayout, drawableX, drawableY, selFirstChar,
 	    selLastChar + 1);
-	Tk_DrawTextLayout(display, drawable, textPtr->gc, textPtr->textLayout,
+	Tk_DrawTextLayout(display, pixmap, textPtr->gc, textPtr->textLayout,
 	    drawableX, drawableY, selLastChar + 1, -1);
-    } else {
-	Tk_DrawTextLayout(display, drawable, textPtr->gc, textPtr->textLayout,
-	    drawableX, drawableY, 0, -1);
     }
     Tk_UnderlineTextLayout(display, drawable, textPtr->gc, textPtr->textLayout,
 	    drawableX, drawableY, textPtr->underline);
@@ -880,6 +1330,46 @@
     if (stipple != None) {
 	XSetTSOrigin(display, textPtr->gc, 0, 0);
     }
+
+    /*
+    if (xovl0 != 0) {
+	int y = drawableY-ypos - textPtr->altFontPtr->max_bounds.ascent;
+	if (xovl0>xovl1)
+	    xovl1 = xStart-xpos;
+	XDrawLine(display, pixmap, textPtr->gc, xovl0, y, xovl1, y);
+    }
+    */
+
+    if (textPtr->rotation != 0) {
+	int i,j;
+	XImage *ims, *imd;
+	char *imddat;
+
+	ims = XGetImage(display, pixmap, 0, 0, wt, ht, 
+	    AllPlanes, ZPixmap);
+	imddat = malloc(w*h*sizeof(int));
+	imd = XCreateImage(display, Tk_Visual(tkwin), Tk_Depth(tkwin),
+            ZPixmap, 0, imddat, w, h, ims->bitmap_pad, 0);
+	if (textPtr->rotation==90)
+	    for (i=0; i<w; i++)
+		for (j=0; j<h; j++)
+		    XPutPixel(imd, i, h-j-1, XGetPixel(ims, j, i));
+	else if (textPtr->rotation==180)
+	    for (i=0; i<h; i++)
+		for (j=0; j<w; j++)
+		    XPutPixel(imd, w-j-1, h-i-1, XGetPixel(ims, j, i));
+	else if (textPtr->rotation==270)
+	    for (i=0; i<w; i++)
+		for (j=0; j<h; j++)
+		    XPutPixel(imd, w-i-1, j, XGetPixel(ims, j, i));
+	/*printf("x,yoff:%d %d w,h:%d %d\n",xoff,yoff,w,h);*/
+	TkPutImage(NULL, 0, display, drawable, textPtr->copyGC, imd, 0, 0, xsi, ysi, 
+		w, h);
+
+	Tk_FreePixmap(display, pixmap);
+	XDestroyImage(ims);
+	XDestroyImage(imd);
+    }
 }
 
 /*
