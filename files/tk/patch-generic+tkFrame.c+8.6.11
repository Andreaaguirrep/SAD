--- generic/tkFrame.c.orig	2021-07-20 01:24:41.000000000 +0900
+++ generic/tkFrame.c	2021-07-20 01:07:21.000000000 +0900
@@ -15,6 +15,20 @@
 #include "default.h"
 #include "tkInt.h"
 
+#define DEF_LABELFRAME_ALTFONT "Symbol -14"
+#define DEF_LABELFRAME_SCRFONT "Helvetica -10"
+#define DEF_LABELFRAME_ALTSCRFONT "Symbol -10"
+
+EXTERN Tk_TextLayout    Tk_KGComputeTextLayout (Tk_Font font,
+                            CONST char *string, int numChars, int wrapLength,
+                            Tk_Justify justify, int flags, int *widthPtr,
+                            int *heightPtr, Tk_Font, Tk_Font, Tk_Font,
+                            GC, GC, GC, GC, int);
+
+EXTERN void             Tk_KGDrawTextLayout (Display *display,
+                            Drawable drawable, GC gc, Tk_TextLayout layout,
+                            int  x, int y, int firstChar, int lastChar);
+
 /*
  * The following enum is used to define the type of the frame.
  */
@@ -112,6 +126,9 @@
 				 * display in button. */
     Tk_Font tkfont;		/* Value of -font option: specifies font to
 				 * use for display text. */
+    Tk_Font tkaltfont;		/* Information about alt text font, or NULL. */
+    Tk_Font tkscriptfont;	/* Information about script font, or NULL. */
+    Tk_Font tkaltscriptfont;	/* Information about alt script font, or NULL. */
     XColor *textColorPtr;	/* Value of -fg option: specifies foreground
 				 * color in normal mode. */
     int labelAnchor;		/* Value of -labelanchor option: specifies
@@ -122,11 +139,15 @@
      * Labelframe specific fields for use with configuration settings above.
      */
     GC textGC;			/* GC for drawing text in normal mode. */
+    GC altGc;			/* GC for drawing alt text in normal mode. */
+    GC scriptGc;		/* GC for drawing script in normal mode. */
+    GC altScriptGc;		/* GC for drawing alt script in normal mode. */
     Tk_TextLayout textLayout;	/* Stored text layout information. */
     XRectangle labelBox;	/* The label's actual size and position. */
     int labelReqWidth;		/* The label's requested width. */
     int labelReqHeight;		/* The label's requested height. */
     int labelTextX, labelTextY;	/* Position of the text to be drawn. */
+    int bsmplw;
 } Labelframe;
 
 /*
@@ -265,6 +286,12 @@
 	NULL, 0, -1, 0, "-foreground", 0},
     {TK_OPTION_FONT, "-font", "font", "Font",
 	DEF_LABELFRAME_FONT, -1, Tk_Offset(Labelframe, tkfont), 0, 0, 0},
+    {TK_OPTION_FONT, "-altfont", "altfont", "Font",
+	DEF_LABELFRAME_ALTFONT, -1, Tk_Offset(Labelframe, tkaltfont), 0, 0, 0},
+    {TK_OPTION_FONT, "-scriptfont", "scriptfont", "Font",
+	DEF_LABELFRAME_SCRFONT, -1, Tk_Offset(Labelframe, tkscriptfont), 0, 0, 0},
+    {TK_OPTION_FONT, "-altscriptfont", "altscriptfont", "Font",
+	DEF_LABELFRAME_ALTSCRFONT, -1, Tk_Offset(Labelframe, tkaltscriptfont), 0, 0},
     {TK_OPTION_COLOR, "-foreground", "foreground", "Foreground",
 	DEF_LABELFRAME_FG, -1, Tk_Offset(Labelframe, textColorPtr), 0, 0, 0},
     {TK_OPTION_STRING_TABLE, "-labelanchor", "labelAnchor", "LabelAnchor",
@@ -668,7 +695,14 @@
 	Labelframe *labelframePtr = (Labelframe *) framePtr;
 
 	labelframePtr->labelAnchor = LABELANCHOR_NW;
+	labelframePtr->tkfont = NULL;
+	labelframePtr->tkaltfont = NULL;
+	labelframePtr->tkscriptfont = NULL;
+	labelframePtr->tkaltscriptfont = NULL;
 	labelframePtr->textGC = NULL;
+	labelframePtr->altGc = NULL;
+	labelframePtr->scriptGc = NULL;
+	labelframePtr->altScriptGc = NULL;
     }
 
     /*
@@ -864,9 +898,22 @@
 
     if (framePtr->type == TYPE_LABELFRAME) {
 	Tk_FreeTextLayout(labelframePtr->textLayout);
+	Tk_FreeFont(labelframePtr->tkfont);
+	Tk_FreeFont(labelframePtr->tkaltfont);
+	Tk_FreeFont(labelframePtr->tkscriptfont);
+	Tk_FreeFont(labelframePtr->tkaltscriptfont);
 	if (labelframePtr->textGC != NULL) {
 	    Tk_FreeGC(framePtr->display, labelframePtr->textGC);
 	}
+	if (labelframePtr->altGc != None) {
+	    Tk_FreeGC(framePtr->display, labelframePtr->altGc);
+	}
+	if (labelframePtr->scriptGc != None) {
+	    Tk_FreeGC(framePtr->display, labelframePtr->scriptGc);
+	}
+	if (labelframePtr->altScriptGc != None) {
+	    Tk_FreeGC(framePtr->display, labelframePtr->altScriptGc);
+	}
     }
     if (framePtr->colormap != None) {
 	Tk_FreeColormap(framePtr->display, framePtr->colormap);
@@ -1124,6 +1171,27 @@
 	    Tk_FreeGC(framePtr->display, labelframePtr->textGC);
 	}
 	labelframePtr->textGC = gc;
+	gcValues.font = Tk_FontId(labelframePtr->tkaltfont);
+	gc = Tk_GetGC(tkwin, GCForeground | GCFont | GCGraphicsExposures,
+		&gcValues);
+	if (labelframePtr->altGc != None) {
+	    Tk_FreeGC(framePtr->display, labelframePtr->altGc);
+	}
+	labelframePtr->altGc = gc;
+	gcValues.font = Tk_FontId(labelframePtr->tkscriptfont);
+	gc = Tk_GetGC(tkwin, GCForeground | GCFont | GCGraphicsExposures,
+		&gcValues);
+	if (labelframePtr->scriptGc != None) {
+	    Tk_FreeGC(framePtr->display, labelframePtr->scriptGc);
+	}
+	labelframePtr->scriptGc = gc;
+	gcValues.font = Tk_FontId(labelframePtr->tkaltscriptfont);
+	gc = Tk_GetGC(tkwin, GCForeground | GCFont | GCGraphicsExposures,
+		&gcValues);
+	if (labelframePtr->altScriptGc != None) {
+	    Tk_FreeGC(framePtr->display, labelframePtr->altScriptGc);
+	}
+	labelframePtr->altScriptGc = gc;
 
 	/*
 	 * Calculate label size.
@@ -1134,11 +1202,24 @@
 	if (anyTextLabel) {
 	    labelText = Tcl_GetString(labelframePtr->textPtr);
 	    Tk_FreeTextLayout(labelframePtr->textLayout);
+	    labelframePtr->bsmplw = (labelText==NULL)||(strchr(labelText,'`') ? 0 : 1);
+	    if (labelframePtr->bsmplw) {
 	    labelframePtr->textLayout =
 		    Tk_ComputeTextLayout(labelframePtr->tkfont,
 		    labelText, -1, 0, TK_JUSTIFY_CENTER, 0,
 		    &labelframePtr->labelReqWidth,
-		    &labelframePtr->labelReqHeight);
+                                         &labelframePtr->labelReqHeight);
+	    } else {
+	    labelframePtr->textLayout =
+		    Tk_KGComputeTextLayout(labelframePtr->tkfont,
+		    labelText, -1, 0, TK_JUSTIFY_CENTER, 0,
+		    &labelframePtr->labelReqWidth,
+		    &labelframePtr->labelReqHeight,
+		    labelframePtr->tkaltfont, labelframePtr->tkscriptfont,
+		    labelframePtr->tkaltscriptfont, labelframePtr->textGC,
+		    labelframePtr->altGc, labelframePtr->scriptGc,
+		    labelframePtr->altScriptGc, 0);
+	    }
 	    labelframePtr->labelReqWidth += 2 * LABELSPACING;
 	    labelframePtr->labelReqHeight += 2 * LABELSPACING;
 	} else if (anyWindowLabel) {
@@ -1558,11 +1639,22 @@
 			clipRegion);
 	    }
 
-	    Tk_DrawTextLayout(framePtr->display, pixmap,
-		    labelframePtr->textGC, labelframePtr->textLayout,
-		    labelframePtr->labelTextX + LABELSPACING,
-		    labelframePtr->labelTextY + LABELSPACING, 0, -1);
-
+	    if (labelframePtr->bsmplw)
+	      Tk_DrawTextLayout(framePtr->display, pixmap,
+                    labelframePtr->textGC, labelframePtr->textLayout,
+                    labelframePtr->labelTextX + LABELSPACING,
+                    labelframePtr->labelTextY + LABELSPACING, 0, -1);
+	    else
+                TkDrawAngledTextLayout(
+                                       framePtr->display, pixmap,
+                                       labelframePtr->textGC, labelframePtr->textLayout,
+                                       labelframePtr->labelTextX + LABELSPACING,
+                                       labelframePtr->labelTextY + LABELSPACING,
+                                       0.0, 0, -1);
+                    /* Tk_KGDrawTextLayout(framePtr->display, pixmap, */
+                    /*       labelframePtr->textGC, labelframePtr->textLayout, */
+                    /*       labelframePtr->labelTextX + LABELSPACING, */
+                    /*       labelframePtr->labelTextY + LABELSPACING, 0, -1); */
 	    if (clipRegion != NULL) {
 		XSetClipMask(framePtr->display, labelframePtr->textGC, None);
 		TkDestroyRegion(clipRegion);
