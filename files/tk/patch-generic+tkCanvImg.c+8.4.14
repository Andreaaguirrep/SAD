diff -dur generic/tkCanvImg.c.orig generic/tkCanvImg.c
--- generic/tkCanvImg.c.orig	Thu Nov 18 07:18:28 2004
+++ generic/tkCanvImg.c	Thu Feb 22 22:29:06 2007
@@ -158,6 +158,9 @@
  *
  *--------------------------------------------------------------
  */
+static int		KBCreateImage _ANSI_ARGS_((Tcl_Interp *interp,
+			    Tk_Canvas canvas, struct Tk_Item *itemPtr,
+			    int objc, Tcl_Obj *CONST objv[]));
 
 static int
 CreateImage(interp, canvas, itemPtr, objc, objv)
@@ -188,6 +191,9 @@
     imgPtr->activeImage = NULL;
     imgPtr->disabledImage = NULL;
 
+    if (objc<0)
+	return KBCreateImage(interp, canvas, itemPtr, objc, objv);
+
     /*
      * Process the arguments to fill in the item record.
      * Only 1 (list) or 2 (x y) coords are allowed.
@@ -210,6 +216,40 @@
     }
 
     error:
+    DeleteImage(canvas, itemPtr, Tk_Display(Tk_CanvasTkwin(canvas)));
+    return TCL_ERROR;
+}
+
+static int
+KBCreateImage(interp, canvas, itemPtr, objc, objv)
+    Tcl_Interp *interp;			/* Interpreter for error reporting. */
+    Tk_Canvas canvas;			/* Canvas to hold new item. */
+    Tk_Item *itemPtr;			/* Record to hold new item;  header
+					 * has been initialized by caller. */
+    int objc;				/* Number of arguments in objv. */
+    Tcl_Obj *CONST objv[];		/* Arguments describing rectangle. */
+{
+    ImageItem *imgPtr = (ImageItem *) itemPtr;
+    int nn;
+    double *bb;
+
+    objc = -objc;
+    nn = *((int *)objv[objc-2]);
+    bb = (double *)objv[objc-1];
+    objc -= 2;
+
+    /*
+     * Process the arguments to fill in the item record.
+     */
+
+    imgPtr->x = bb[0];
+    imgPtr->y = bb[1];
+    ComputeImageBbox(canvas, imgPtr);
+    if (ConfigureImage(interp, canvas, itemPtr, objc, objv, 0) == TCL_OK) {
+	return TCL_OK;
+    }
+
+    /*error:*/
     DeleteImage(canvas, itemPtr, Tk_Display(Tk_CanvasTkwin(canvas)));
     return TCL_ERROR;
 }
