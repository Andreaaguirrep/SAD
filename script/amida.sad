FFS;

Amida = Class[{},{},
  {w,c,f,fc,kfc,np,nl,rs,at,x1,x2,dx,y1,y2,dy,cw,ch,ll,nw,ne,rw,nc,xc,yc,nlc,nr,
	enp,enl,bsetgo,vsg,np0,nl0,ldcol,flopt,input,bgoing},

  Constructor[] := (
	{np,nl,rs,at,rw} = {4,20,0,1,10};
	nl = 40;
	{cw,ch} = {600,800};
	{x1,x2,y1,y2,y1e,y2e} = {100,500,130,670,100,700};
	dy = y2-y1;
	ldcol = "#224";
	input = False;
	bgoing = False;
	flopt = {Fill->"orange",Width->2,Tags->"line"};
	w = KBMainFrame["amida",f,Title->"A M I D A"];
	c = Canvas[f,Side->"left",Width->cw,Height->ch,BD->2,Relief->"groove",HighlightThickness->0];
	fc = Frame[f,Side->"right",Anchor->"n"];
	kfc = KBFComponentFrame[fc,Add->{
	  KBFGroup[Text->"Condition",DefaultEntryWidth->8],
	  KBFNumber[Text->"Number of People:",Variable:>np,WidgetVariable:>enp],
	  KBFNumber[Text->"Number of Ladders:",Variable:>nl,WidgetVariable:>enl],
	  KBFNumber[Text->"Random seed:",Variable:>rs],
	  KBFCheckButton[Text->"Add time to random seed",Variable:>at],
	  KBFSeparator[],
	  KBFButton[Text->{"MAKE","PUT","GO"},Columns->3,WidgetOption->{Width->7},Variable:>vsg,Command:>SetGo[],WidgetVariable:>bsetgo]
	}];
	bsetgo[2][State] = "disabled";
	bsetgo[3][State] = "disabled";
  );

  SetGo[] := Switch[vsg,1,Make[],2,PutLadder[],3,Go[]];

  PutLadder[] := Module[{},
	If [input, PutLadderHere[False]];
	input = True;
	bsetgo[1][State] = "disabled";
	bsetgo[2][Text] = "CANCEL";
	bsetgo[3][State] = "disabled";
	Bind[c,"<ButtonRelease>",PutLadderHere[True]];
  ];

  PutLadderHere[b$_] := Module[{nl,x,y},
	Bind[c,"<ButtonRelease>",];
	If [b$,
	  {x,y} = {X,Y}/.$Event;
	  If [(y<=y1e)||(y>=y2e),
		KBFMessageBox["Out of range !!",Bitmap->"error"];
	  ,!Else
		nl = Floor[(x-x1)/dx]+1;
		If [nl<=0, nl = np];
		If [nl>np, nl = np];
		c[Create$Line] = {x1+dx*(nl-1),y,x1+dx*nl,y,Width->4,Fill->ldcol,Tags->"ladder"};
		If [nl===np,
		  c[Create$Line] = {x1-dx,y,x1,y,Width->4,Fill->ldcol,Tags->"ladder"};
		];
		ll = Sort[Append[ll,{nl,(y2-y)/dy}],(#1[[2]]<#2[[2]])&];
		nl0++;
	  ];
	];
	input = False;
	bsetgo[1][State] = "normal";
	bsetgo[2][Text] = "PUT";
	bsetgo[3][State] = "normal";
  ];

  Make[] := Module[{rsd,t,l},
	{np0,nl0} = {np,nl};
	c[Delete] = "all";
	If [(np<3)||(np>6), 
	  KBFMessageBox["This program is for 3-6 people !",Bitmap->"warning"];
	  Return[]
	];
	If [nl>200,
	  KBFMessageBox["Too many ladders !",Bitmap->"warning"];
	  Return[]
	];
	dx = (x2-x1)/(np-1);
	Do[
	  c[Create$Line] = {x1+dx*(i-1),y1e,x1+dx*(i-1),y2e,Fill->ldcol,Width->2};
	  With[{i},
		ne[i] =.;
		ne[i] = Entry[c,Width->10,Font->TextFont["times","bold",18],HighlightThickness->0];
		c[Create$Window] = {x1+dx*(i-1),y1e-10,Anchor->"s",Window->ne[i]};
	  ];
	,{i,np}];
	rsd = Floor[rs];
	If [at<=>0, rsd += GetTimeOfDay[]*1000];
	rsd = Mod[rsd + 1073741824, 2147483648] - 1073741824; (* mod 2^31 *)
	SeedRandom[2*Floor[rsd]+1];
	nw = Floor[Random[]*np+1];
!	ll = {};
!	While[CheckSeparation[]===False,
!	  ll = Table[{Floor[Random[]*(np-1)+1],Random[]},{i,nl}];
!	  ll = Sort[ll,(#1[[2]]<#2[[2]])&];
!	];
	l = {};
	ds = Max[1/(nl*4),0.005];
	Do[
	  t = Random[]*(1-Length[l]*ds);
	  Scan[(If[t>(#-ds/2), t+=ds, Break[]])&,l];
	  l = Sort[Append[l,t]];
	,{i,nl}];
	ll = Thread[{Table[Floor[Random[]*np+1],{i,nl}],l}];
	c[Create$Oval] = {x1+dx*(nw-1)-rw,y2e+20-rw,x1+dx*(nw-1)+rw,y2e+20+rw,Fill->"red",Outline->"tomato"};
	bsetgo[2][State] = "normal";
	bsetgo[3][State] = "normal";
	DrawLadder[];
	Update[];
	Sleep[0.05];
	If [~bgoing, EraseLadder[]];
  ];

  CheckSeparation[] := Module[{b,spmin},
	If [nl===0, Return[True]];
	If [ll==={}, Return[False]];
	b = True;
	spmin = 1/(nl*10);
	Do[
	  If [ll[[i+1,2]]-ll[[i,2]]<spmin, b = False; Break[]];
	,{i,nl-1}];
	Return[b];
  ];

  EraseLadder[] := (c[Delete] = "ladder");

  DrawLadder[] := Module[{n,r},
	Do[
	  n = ll[[i,1]];
	  r = ll[[i,2]];
	  c[Create$Line] = {x1+dx*(n-1),y2-dy*r,x1+dx*n,y2-dy*r,Width->2,Fill->ldcol,Tags->"ladder"};
	  If [n===np,
		c[Create$Line] = {x1-dx,y2-dy*r,x1,y2-dy*r,Width->2,Fill->ldcol,Tags->"ladder"};
	  ];
	,{i,nl}];
  ];

  Go[] := Module[{n,r,xx,yy},
	bgoing = True;
	{np,nl} = {np0,nl0};
	Do[
	  ne[i][State] = "disabled";
	  ne[i][Justify] = "center";
	,{i,np}];
	DrawLadder[];
	nr = 0;
	nc = nw;
	xc = x1+dx*(nc-1);
	yc = y2e;
!	c[Create$Line] = {xc,y2e,xc,yc,Null@@flopt};
	FollowVLine[];
	If [nr<=nl, After[0.3, FollowLine[]]];
	bsetgo[2][State] = "disabled";
  ];

  FollowLine[] := Module[{},
	FollowHLine[];
	FollowVLine[];
!	c[Coords] = Prepend[rt,"line"];
	If [nr>nl,
	  bgoing = False;
	,!Else
	  After[0.3, FollowLine[]];
	];
  ];

  FollowHLine[] := Module[{xn},
	If [((nc===1)||(nc===np))&&(ll[[nr,1]]===np),
	  Switch[nc
	  ,1,
		nc = np;
		xc = x2;
	  ,np,
		nc = 1;
		xc = x1;
	  ];
	  c[Create$Line] = {x1-dx,yc,x1,yc,Null@@flopt};
	  c[Create$Line] = {x2,yc,x2+dx,yc,Null@@flopt};
	  Return[];
	];
	If [ll[[nr,1]]===nc-1,
	  nc = nc-1;
	  xn = x1+dx*(nc-1);
	  c[Create$Line] = {xc,yc,xn,yc,Null@@flopt};
	  xc = xn;
	  Return[];
	];
	If [ll[[nr,1]]===nc,
	  nc = nc+1;
	  xn = x1+dx*(nc-1);
	  c[Create$Line] = {xc,yc,xn,yc,Null@@flopt};
	  xc = xn;
	];
  ];

  FollowVLine[] := Module[{bf,yn,nnc},
	bf = False;
	Do[
	  nr = i;
	  nnc = ll[[i,1]];
	  If [(nnc===(nc-1))||(nnc===nc)||((nnc===np)&&(nc===1)),
		yn = y2-dy*ll[[i,2]];
		c[Create$Line] = {xc,yc,xc,yn,Null@@flopt};
		yc = yn;
		bf = True;
		Break[];
	  ];
	,{i,nr+1,nl}];
	If [bf===False, ! End of following
	  nr = nl+1;
	  c[Create$Line] = {xc,yc,xc,y1e,Null@@flopt};
	  yc = y1e;
!	  rt = Join[rt,{x1+dx*(nc-1),yc}];
	  Bell[];
	];
	Do[
	  If [i===nc,
		ne[i][Relief] = "ridge";
		ne[i][Foreground] = "tomato";
		If [~bf, ne[i][Background] = "white"];
	  ,!Else
		ne[i][Relief] = "flat";
		ne[i][Foreground] = If[bf,"black","gray"];
	  ];
	,{i,np}];
  ];
];


a = Amida[];

TkWait[];
