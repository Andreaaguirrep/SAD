CursorEntry = Class[{},{cel={}},
  {e,f,form,com,rng,pv,hfg,hbg,ipos,dpos,bact,bm,bfoc,bset,diff,fact,spb},

  Constructor[p$_,v$_] := Module[{ip,
    {fm,cm,rg,cp,dp,fc,kbf,spbi,rem}=SwitchCases[Override[Join[Options,{Literal[Form]->"F15.5",Justify->"right"}]],
   {Rule[Literal[Form],_],RuleDelayed[Command,_],Rule[Literal[Range],_],Rule[InitialPosition,_],Rule[DefaultPosition,_],Rule[Factor,_],
     Rule[ForKBFrame,_],SpinBox->_,_}]},
	AppendTo[cel,This];
	form = fm[[1,2]];
	com = If [cm<=>{}, Extract[cm,{1,2},Hold], Null];
	rng = If [rg<=>{}, Extract[rg,{1,2}], {-1e30,1e30}];
	ipos = If [cp<=>{}, Extract[cp,{1,2}], -1];
	dpos = If [dp<=>{}, Extract[dp,{1,2}], -1];
	fact = If [fc<=>{}, Extract[fc,{1,2}], 1];
    spb=SpinBox/.spbi/.SpinBox->False;
	kbf = If[kbf<=>{}, Extract[kbf,{1,2}] === True, False];
	hfg = "white";
	hbg = "tomato";
	If[kbf,
	  bm = TextLabel[p$,Side->"right",Bitmap->"@"//KBF$ConfDir//"/cursors.xbm",BD->0,FG->"gray50"];
	  e = If[spb,SpinBox,Entry][p$,rem,Side->"right",SelectBorderWidth->0,SelectBackground->hbg,ExportSelection->False];
	  f = Null,
	  f = Frame[p$, Background->p$[Background]];
	  e = If[spb,SpinBox,Entry][f,rem,Side->"left",SelectBorderWidth->0,SelectBackground->hbg,ExportSelection->False];
	  bm = TextLabel[f,Side->"left",Bitmap->"@"//KBF$ConfDir//"/cursors.xbm",BD->0,FG->"gray50"]
	  ];
     If[spb,e[Command]:=Switch[Direction/.$Event,
       "up",ValueChange[1],
       "down",ValueChange[-1]]];
	Bind[bm,"<Button>",ToggleCursor[]];
	Bind[e,"<Button>",SetCursor[]];
	Bind[e,"<Right>",ShiftHighlight[1],Break->True];
	Bind[e,"<Left>",ShiftHighlight[-1],Break->True];
	Bind[e,"<Up>",ValueChange[1],Break->True];
	Bind[e,"<Shift-Up>",ValueChange[3],Break->True];
	Bind[e,"<Down>",ValueChange[-1],Break->True];
	Bind[e,"<Shift-Down>",ValueChange[-3],Break->True];
	Bind[e,"<Return>",ValueChange[0]];
	Bind[e,"<Tab>",FocusChange[1]];
	Bind[e,"<Shift-Tab>",FocusChange[-1]];
	Bind[e,"<Shift-Left>",FocusChange[-1]];
	Bind[e,"<Shift-Right>",FocusChange[1]];
	Bind[e,"<FocusIn>",FocusChangeCB[True]];
	Bind[e,"<FocusOut>",FocusChangeCB[False]];
	SetValue$[Restrict[v$, rng[[1]], rng[[2]]]]; pv = Value[];
	FocusChangeCB[True];
	SetValueCB[False];
	EnableCursor[];
	SetHighlight[dpos]; 
  ];

  Destructor[] := (
    If[bfoc, FocusChange[1]];
    f=.;
    cel = DeleteCases[cel,This];
    );

  FocusChangeCB[b$_Real] := (bfoc = b$);

  FocusChange[d$_Real] := Module[{p, nl = Length[cel]},
    If[bact && nl > 1,
      p = Position[cel, This, 1, 1][[1,1]];
      p = Switch[d$,
	 1, If[p === nl,  1, p + 1],
	-1, If[p ===  1, nl, p - 1],
	_,  p];
      cel[[p]]@SetFocus[]];
    ];

  SetFocus[] := (e[Focus$Set]; If[bact, SetHighlight[]]);

  SetCursor[] := If[bact, Module[{t = e[Get], {x, y} = {X, Y}/.$Event, i},
    If[spb, Switch[e[Identify[{x,y}]],
      "buttonup",   InvokeButton["up"];   Return[],
      "buttondown", InvokeButton["down"]; Return[]]];
    e[Focus$Set];
    e[ICursor] = StandardForm["@"//x];
    i = Restrict[e[Index["insert"]] + 1, 1, StringLength[t]];
    e[ICursor] = i;
    SetHighlight[If[t[i] === " ", dpos, 0]]]];

  InvokeButton["up"]:=(
    e[ButtonUpRelief]="sunken";
    e[Invoke]="buttonup");
  InvokeButton["down"]:=(
    e[ButtonDownRelief]="sunken";
    e[Invoke]="buttondown");

  SetHighlight[i_Real, bd_Real:-1] := Module[{p,t},
    p = If[i > 0, i, If[i == 0, e[Index["insert"]], e[Index["end"]] + i + 1]];
    t = e[Get];
    If[t[p] === ".", p = p + bd];
    p = Restrict[p, 1, StringLength[t]];
    e[ICursor] = p;
    e[Select$Range] = {p - 1, p}];

  SetHighlight[] := SetHighlight[0];

  ShiftHighlight[i_Real] := If[bact,
    With[{p = e[Index["insert"]]}, SetHighlight[p + i, i]]];

  SetRange[vl$_Real,vu$_Real] := (rng = {vl$, vu$});
  Range[] := rng;

  SetForm[f$_String] := (form = f$);
  Form[] := form;

  SetValueCB[notify_Real] := (bset = notify);
  SetValue[v_Real, notify_Real:bset] := (SetValue$[v];
    If[notify, ValueChange[0], ValueChange[Null]]);
  Value[] := ToExpression[e[Get]] / fact;

  Diff[] := diff;

  SetValue$[v_Real] := Module[{p = e[Index["insert"]]},
    e[Delete] = {1, "end"};
    e[Insert] = {1, StandardForm[$FORM=form; ToString[v * fact]]};
    If[bact, SetHighlight[p]]];

  ValueChange[m_] := If[bact, Module[{t, p, ip, dp, v, r},
    t = e[Get];
    p = StringPosition[t, "."];
    ip = e[Index["insert"]];
    dp = If [p <=> {}, p[[1,1]], StringLength[t]] - ip; If[dp > 0, dp--];
    diff = If[RealQ[m], m*10^dp, 0];
    v = Restrict[ToExpression[t] + diff, fact * rng[[1]], fact * rng[[2]]];
    SetValue$[v / fact];
    diff = Value[] - pv;
    SetHighlight[ip];
    If[Not[RealQ[m]] || diff == 0, pv = Value[],
      If[r = If[com <=> Null, ReleaseHold[com], True]; r === True,
	pv = Value[], SetValue$[pv]]];
    diff = 0]];

  ToggleCursor[] := If[bact, DisableCursor[], EnableCursor[]];

  EnableCursor[]  := (bact = True;  bm[FG] = "black";
    Tcl["bindtags "//TkPathName[e]//" {Command "//TkPathName[e]//"}"];
    ValueChange[0]);

  DisableCursor[] := (bact = False; bm[FG] = "gray50";
    Tcl["bindtags "//TkPathName[e]//" {all . "//If[spb,"Spinbox ","Entry "]//TkPathName[e]//"}"]);
];

CaCursorEntry = Class[{CursorEntry},{},{rn,er,cacom},
  Constructor[p$_,rn$_] := Module[{cm},
	rn = rn$;
	{cm,Options} = SwitchCases[Options,{RuleDelayed[Command,_],_}];
	cacom = If [cm<=>{}, Extract[cm,{1,2},Hold], Null];
	Options = Join[Options,{Command:>SendValue[]}];
	CursorEntry`Constructor[p$,0];
!	EnableCursor[];
	er = CaMonitor[rn$,ValueCommand:>SetValue[er@Value[], False]];
  ];

  SendValue[] := (er@Put[Value[]]; True);
];
