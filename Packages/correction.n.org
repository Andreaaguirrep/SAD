Monitor[mon_,offset_:{0,0},prec_:{0,0},fixedtolist_:{}]:=
  Module[{imon,nmon,dx,dy,attachlist,typelist,candidate,mast,ip,j},
    imon=If[VectorQ[mon],
      If[ VectorQ[mon,NumberQ],
         mon
      ,  Flatten[ 
           { Map[LINE['POSITION',#]&,mon],
             Select[Range[LINE["length"]],MemberQ[mon,LINE["element",#]]&] }  ]
      ],
      Flatten[ 
        { LINE['POSITION',mon],
          Select[Range[LINE["length"]],(LINE["element",#]==mon)&] }  ]
    ];
    imon=Union[imon];
    nmon=Length[imon];
    dx=If[offset[1]==0,Table[0,Dimensions[imon]],Table[GaussRandom[],Dimensions[imon]]*offset[1]];
    dy=If[offset[2]==0,Table[0,Dimensions[imon]],Table[GaussRandom[],Dimensions[imon]]*offset[2]];
    typelist=LINE['TYPE','*'];
    candidate=Select[Range[LINE['LENGTH']],(typelist[#]==6|typelist[#]==4)&];
    mast=Master[];
    attachlist=
    If[fixedtolist=={},
      ip=1;
      Table[{j,ip}=NearestElement[imon[i],ip,candidate,mast];j,{i,1,nmon}],
      fixedtolist
    ];
    {imon,{dx,dy},prec,attachlist}
  ];

NearestElement[j_,ks_,candidate_,mast_,ExcludeItself_:False]:=Module[{k,ca,p,pl,pr,nc,s},
!--- find nearest element to j among candidate and returns its Master element. ---
!    Restrictions: candidate must be in ascending order. (candidate can include slave element.)
  k=ks;
  ca=If[ ExcludeItself
     , p=Position[candidate,j];
       Drop[candidate,If[Length[p]>0,p[1],p]]
     , candidate ];
  nc=Length[ca];
  If[FLAG['RING'],
    If[ca[k]>j,k=1];
    pl=Do[If[ca[i]>j,If[i<>1,Return[i-1],Return[nc]]],{i,k,nc}];
    If[pl==Null,pl=nc];
    pr=Do[If[ca[i]>=j,Return[i]],{i,If[ca[pl]>j,1,pl],nc}];
    If[pr==Null,pr=1];
    {If[
       If[ca[pl]>j
       ,  Abs[LINE['S',j]-LINE['S',If[mast[ca[pl]]<0,mast[-mast[ca[pl]]],ca[pl]]+1]] + LINE['S',LINE['LENGTH']]-LINE['S',1]
       ,  Abs[LINE['S',j]-LINE['S',If[mast[ca[pl]]<0,mast[-mast[ca[pl]]],ca[pl]]+1]]
       ] < 
       If[ca[pr]<j
       ,  Abs[LINE['S',j]-LINE['S',If[mast[ca[pr]]<0,-mast[ca[pr]],ca[pr]]]] + LINE['S',LINE['LENGTH']]-LINE['S',1]
       ,  Abs[LINE['S',j]-LINE['S',If[mast[ca[pr]]<0,-mast[ca[pr]],ca[pr]]]]
       ] 
     ,
       If[mast[ca[pl]]<0,-mast[ca[pl]],ca[pl]],If[mast[ca[pr]]<0,-mast[ca[pr]],ca[pr]]
     ], pl}
  ,
    pl=Do[If[ca[i]>j,If[i<>1,Return[i-1],Return[i]]],{i,k,nc}];
    If[pl==Null,pl=nc];
    pr=Do[If[ca[i]>=j,Return[i]],{i,pl,nc}];
    If[pr==Null,pr=pl];
    {If[Abs[LINE['S',j]-LINE['S',mast[Abs[mast[ca[pl]]]]+1]] <
        Abs[LINE['S',mast[Abs[mast[ca[pr]]]]]-LINE['S',j]]
     ,  If[mast[ca[pl]]<0,-mast[ca[pl]],ca[pl]],If[mast[ca[pr]]<0,-mast[ca[pr]],ca[pr]]
     ], pl}
  ]
];

Steer[str_,dddk_:0,type_:2]:=
  Module[{istr,mast,dx,hor,qp1=Pi/4,qp3=3*Pi/4},
    istr=Select[Range[LINE["length"]], LINE['TYPE',#]==type&];
    istr=If[VectorQ[str],
      If[ VectorQ[str,NumberQ],
         str
      ,  Flatten[ 
           { Select[Flatten[Map[LINE['POSITION',#]&,str]],LINE["type",#]==type&],
             Select[istr,MemberQ[str,LINE["element",#]]&] }  ]
      ],
      Flatten[ 
        { Select[LINE['POSITION',str],LINE["type",#]==type&],
          Select[istr,(LINE["element",#]==str)&] }  ]
    ];
    istr=Union[istr];
    If[istr=={},
      {{},{},{},{}}
    , mast=Master[];
      istr=Select[istr,mast[#]>0&];
      mast=mast[istr];
      dx=If[dddk==0|dddk===Null,Table[0,Dimensions[istr]],Table[GaussRandom[],Dimensions[istr]]*dddk];
      dx=Map[Plus[1,#]&,dx];
      hor=Map[Abs[Mod[#,Pi]]&, LINE["ROTATE",istr]];
      hor=Map[(#<qp1 | #>qp3)&, hor];
      {istr,mast,hor,dx}
    ]
  ];

DeleteSteer[str_,name_]:=
  Module[{id,pe},
      pe=Flatten[ LINE["position",If[VectorQ[name],name,{name}]] ];
      id=If[VectorQ[name],
        Select[Range[Length[str[1]]],MemberQ[name,LINE["element",str[1,#]]]&],
        Select[Range[Length[str[1]]],(LINE["element",str[1,#]]==name)&]
      ];
      id={id,
          Select[Range[Length[str[1]]],MemberQ[pe,str[1,#]]&]
          };
      id=Map[{#}&,Union[Flatten[id]]];
      If[SameQ[id,{}],str,Map[Delete[#,id]&,str]]
  ];

DeleteMonitor[mon_,name_]:=DeleteSteer[mon,name];

CorrectOrbit[orbitkind_,mon_,str_,opt_,options___]:=
Module[
  {x,kind,a,b,c,w,a1,b1,solv,nx,as,bs,
  def={Orbit->{},SetSteer->True,Calc->True,Solver->'LeastSquare',
       Condition->{},AppendEq->{},ExpectedOrbit->False,
       ZeroSum->False,Bump->{},Tune->{0,0},Epsilon->1e-8},
  syno={EPS->Epsilon}, op },
  op=Join[{options},def]/.syno;
  kind=If[VectorQ[orbitkind],Union[orbitkind],{orbitkind}];
  {a,b,c,w}=
  If[SameQ[Bump/.op,{}],
    CorrectWithSingleKick[kind,mon,str,opt,op],
    CorrectOrbitBump[kind,mon,str,opt,op]
  ];
 !Print[Transpose[MapThread[Times[#1,#2]&,{1/w,a}]][1]];
  If[ExpectedOrbit/.op, as=a;bs=b];
  If[~SameQ[(AppendEq/.op),{}],
    {a1,b1}=(AppendEq/.op);
    a=Join[a,a1]; b=Join[b,b1]
  ];

  solv=Solver/.op;
  nx=If[solv==='LeastSquare',0,If[VectorQ[solv] && solv[1]=='Micado',solv[2],Length[str[1]] ]];
  x=If[c=={},
      LinearSolveConditioned[a,b,Epsilon/.op,nx,True],
      LinearSolveConditioned[a,b,Epsilon/.op,nx,True,c[1],c[2]]
    ];
  If[SetSteer/.op,AddSteerStrength[-x,str]];
  If[ExpectedOrbit/.op, b=(bs-as.x)/w;
    nx=Length[b]/Length[kind];
    Do[ Twiss[If[kind[i,1]=="E",kind[i],"D"//kind[i]],mon[1,j]]=b[j+nx*(i-1)], {i,Length[kind]}, {j,nx} ] ];
  If[(Calc/.op)&&~(ExpectedOrbit/.op), 
    If[FLAG['SIMULATE'], 
!     CalculateOptics[1,LINE['LENGTH'],If[Depth[opt]==5,opt[1,1,1],opt[1,1]],FLAG['CELL'],2]
      If[ ~Equal[CalculateOptics[1,LINE['LENGTH'],Twiss["*",1],FLAG['CELL'],2][2],{1,1,1}],
        CalculateOptics[1,LINE['LENGTH'],ReplacePart[Twiss["*",1],0,{{15},{16},{17},{18}}],FLAG['CELL'],2] ] ]
    ];
  -x
];

CorrectWithSingleKick[kind_,mon_,str_,opt_,op_]:=Module[
{orb,p,pp,aa,ww,o={2,2,5,5,2,2,5,5},bb,t={'DX','DPX','DY','DPY','EX','EPX','EY','EPY'},a={},b={},c,w={},el},
  orb=Orbit/.op; If[~SameQ[orb,{}]&&VectorQ[orb],orb={orb}];
  Do[p=Position[{'X','PX','Y','PY','EX','EPX','EY','EPY'},kind[i]];
    If[~SameQ[p,{}],
      pp=p[1,1];
      aa=ResponseMatrixG[mon[1],str,opt,FLAG['CELL'],kind[i],Tune/.op];!Print[Transpose[aa][1]];
      ww=Sqrt[If[Depth[opt]==5,opt[1,1,mon[1],o[pp]],opt[1,mon[1],o[pp]] ]];
!     ww=Table[1,{Length[mon[1]]}];
      aa=MapThread[Times[#1,#2]&,{ww,aa}];
      bb=If[orb=={},
           If[pp==1 | pp==3,
             If[mon[3,(1+pp)/2]==0,
               Twiss[t[pp],mon[1]]-LINE[t[pp],mon[4]]-mon[2,(1+pp)/2],
               Twiss[t[pp],mon[1]]-LINE[t[pp],mon[4]]-mon[2,(1+pp)/2]+mon[3,(1+pp)/2]*Table[GaussRandom[],{Length[mon[1]]}]
               ],
             Twiss[t[pp],mon[1]]-LINE[t[pp],mon[4]]
             ],
           orb[i]];
      bb=ww*bb;
      a=Append[a,aa];
      b=Append[b,bb];
      w=Append[w,ww];
    ],{i,Length[kind]}
  ];
  a=Flatten[a,1];
  b=Flatten[b,1];
  w=Flatten[w,1];

  c=Condition/.op; 
  If[~SameQ[c,{}],
    If[~VectorQ[c[-1],NumberQ],
        c=MakeConditionMatrix[If[NumberQ[c[-1]],{c},c],str[1]]
      ]
    ];
  If[ZeroSum/.op,
    el=LINE['ELEMENT',str[1]];
    c=If[c=={},{{},{}},c];
    c=MapThread[ Append,{c,{Element['L',el]*Element['VALUE',el],0}} ]
    ];
  {a,b,c,w}
];

CorrectLocal[kind_,region_,mon_,str_,opt_,options___]:=Module[
  {kinds,op,section,sectZ,from,to,index,ind,strSelected,monSelected,wc,kindClose,kc,c={},d,dx,x,
!  def={WhatClosed->{},Tune->{0,0}},sigleplane,hor,vlist,zlist,a1,b1},
   def={WhatClosed->{},Tune->{0,0}}},
  op=Join[{options},def];
  section=LINE["position",region];
  {from,to}=section;
 !.. select correctors ..
  index=Select[Range[Length[str[1]]],BelongToSection[str[1,#],section]&];
  strSelected=Map[Part[#,index]&,str];
  sectZ=If[from<=to,{strSelected[1,1]
        ,  strSelected[1,-1]}
        ,  If[Max[strSelected[1]]>=from
           ,  {Min[Select[strSelected[1],#>=from&]],Max[Select[strSelected[1],#<=to&]]}
           ,  {Min[strSelected[1]],Max[strSelected[1]]}
           ]
        ];
  ind =Select[Range[Length[mon[1]]],BelongToSection[mon[1,#],sectZ]&];
  monSelected=MapAt[Part[#,ind]&,mon,{{1},{2,1},{2,2},{4}}];
  wc=WhatClosed/.op;
  kindClose=If[wc=={},kind,wc];
  kindClose=If[VectorQ[kindClose],kindClose,{kindClose}];
  If[wc=={},kc=kindClose;Do[kc=Append[kc,CanonicalPartner[kindClose[i]]],{i,Length[kindClose]}];kindClose=Union[kc]];
  Do[
    If[wc=={}
    , c=Append[c,ResponseMatrixG[to,strSelected,opt,FLAG['CELL'],kindClose[i],Tune/.op]];
      If[~FLAG["CELL"],c=Append[c,ResponseMatrixG[from,strSelected,opt,FLAG['CELL'],kindClose[i],Tune/.op]]]
    , c=Append[c,ResponseMatrixG[to,strSelected,opt,FLAG['CELL'],kindClose[i],Tune/.op]];
      If[~MemberQ[kindClose,CanonicalPartner[kindClose[i]]] | ~FLAG["CELL"],
        c=Append[c,ResponseMatrixG[from,strSelected,opt,FLAG['CELL'],kindClose[i],Tune/.op]]
      ]
    ], {i,Length[kindClose]}
  ];
  d=Table[0,{If[VectorQ[c],1,Length[c]]}];

! kinds=If[VectorQ[kind],kind,{kind}];
! wc=kinds[1,-1];
! sigleplane=Map[#[-1]==wc&,kinds]==Table[1,{Length[kinds]}];
! If[sigleplane, 
!   hor=kinds[1,-1]=="X";
!   vlist=Select[Range[Length[strSelected[1]]],strSelected[3,#]==1-hor&];
!   zlist=Table[0,{Length[strSelected[1]]}];
!   a1=Map[Drop[#,-1]&,Table[Insert[zlist,1,vlist[i]],{i,Length[vlist]}]];
!   b1=Table[0,{i,Length[vlist]}];
! ];
! dx=CorrectOrbit[kind,monSelected,strSelected,opt,Condition->{c,d},AppendEq->{a1,b1},options];
  dx=CorrectOrbit[kind,monSelected,strSelected,opt,Condition->{c,d},options];
  x=ARRAY[Length[str[1]]];
  Do[x[index[i]]=dx[i],{i,Length[index]}];
  x
];

AddSteerStrength[x_,str_]:=Module[{istr,slav,n,x1},
  istr=str[1]; slav=str[2];
  x1=If[FLAG['OPERATE'],x,x*str[4]];
  Do[ 
    If[ istr[i]==slav[i],
      LINE['K0',istr[i]]=LINE['K0',istr[i]]+x1[i],
      n=Apply[ Plus,
         Map[ Element['name',LINE["element",#]]==Element['name',LINE["element",istr[i]]]&, Range[istr[i],slav[i]] ]
        ];
      Do[ If[ Element['name',LINE["element",j]]==Element['name',LINE["element",istr[i]]], LINE['K0',j]=LINE['K0',j]+x1[i]/n],
        {j,istr[i],slav[i]} ]
      ],
    {i,Length[istr]}
    ];
];

ResponseMatrixG[mon_,str_,opt_,periodic_,kind_,tune_:{0,0}]:=Module[
  {dopt,ddp,c1,c2},
  dopt=Depth[opt];
  If[kind[1,1]=='E',
! --Dispersion---
    If[dopt<>5,
      Print["Insufficient Optics Data:\n"//
      " -->Supply optics triad {optics_(dp0),optics_(dp0+ddp),optics_(dp0-ddp)}."];
      Return[]
    ];
    ddp=opt[2,1,1,20]-opt[3,1,1,20];
    c1=1/ddp/(1+0.5*ddp); c2=1/ddp/(1-0.5*ddp);
!    c1*ResponseMatrix[mon,str[1],str[2],opt[2],FLAG['CELL'],kind[2,-1],tune]-
!    c2*ResponseMatrix[mon,str[1],str[2],opt[3],FLAG['CELL'],kind[2,-1],tune],
    (ResponseMatrix[mon,str[1],str[2],opt[2],FLAG['CELL'],kind[2,-1],tune]-
     ResponseMatrix[mon,str[1],str[2],opt[3],FLAG['CELL'],kind[2,-1],tune])/ddp-
     ResponseMatrix[mon,str[1],str[2],opt[1],FLAG['CELL'],kind[2,-1],tune],
! --Orbit---
    If[dopt==4,
      ResponseMatrix[mon,str[1],str[2],opt,FLAG['CELL'],kind,tune],
      If[dopt==5,
        ResponseMatrix[mon,str[1],str[2],opt[1],FLAG['CELL'],kind,tune]
      ]
    ]
  ]
];

MakeConditionMatrix[cond_,istr_]:=
Module[{jj,nv},
{Table[ nv=Length[cond[i,1]];
   Table[ If[ (jj=Do[ If[istr[k]==LINE['POSITION',cond[i,1,j]], Return[j]],
             {j,nv} ])==Null,
           0,cond[i,2,jj] 
          ],{k,Length[istr]}
   ],{i,Length[cond]}
 ],
 Table[cond[i,3],{i,Length[cond]}] }
];

CanonicalPartner[x_]:=Switch[x,"X","PX","PX","X","Y","PY","PY","Y","Z","PZ","PZ","Z",
"EX","EPX","EPX","EX","EY","EPY","EPY","EY"];

Protect[Monitor,NearestElement,Steer,DeleteSteer,DeleteMonitor,CorrectOrbit,CorrectWithSingleKick,
        CorrectLocal,AddSteerStrength,ResponseMatrixG,MakeConditionMatrix,CanonicalPartner]

MakeBump[bumprep_,str_,opt_,options___]:=Module[
{op,bumpR,a,b,x,def={SetSteer->True,Calc->True,Epsilon->1e-4}},
op=Join[{options},def];
bumpR=CanonicalBumpRep[bumprep,str];
{a,b}=BumpConditionMatrix[bumpR,str,opt];
x=LinearSolve[a,b,Epsilon/.op];
If[ SetSteer/.op, AddSteerStrength[x,Map[#[bumpR[2]]&,str]] ];
If[Calc/.op, 
  If[FLAG['SIMULATE'], 
     CalculateOptics[1,LINE['LENGTH'],opt[1,1],FLAG['CELL'],2]
    ]
  ];
{x,bumpR[2]}
];

CanonicalBumpRep[bumpspec_,str_]:=Module[
{target,hv,nstrforbump,close,bump},
If[VectorQ[bumpspec[-1],NumberQ],
  bumpspec,
  If[NumberQ[bumpspec[-1]] && ( VectorQ[bumpspec[1]] | MatrixQ[bumpspec[1]] ) ,
    target=bumpspec[-3]; hv=bumpspec[-2]; nstrforbump=bumpspec[-1];
    close=ClosedBumpCondition[LINE['POSITION',target],hv,nstrforbump,str];
    bump=If[MatrixQ[bumpspec[1]],
           Join[close[1,2],bumpspec[1]],     ! <--- condition at 'end' position only
           Append[close[1,2],bumpspec[1]]
         ];
    {bump,close[2]} ,
    {If[VectorQ[bumpspec],{bumpspec},bumpspec],Range[Length[str[1]]]}
    ]
  ]
];


BumpConditionMatrix[condlist_,str_,opt_]:=Module[
{cond,str1,c,d},
cond=condlist[1];
str1=Map[#[condlist[2]]&,str];
c=Table[
  ResponseMatrixG[LINE['POSITION',cond[i,1]],str1,opt,FLAG['CELL'],cond[i,2]],
  {i,Length[cond]}];
d=Table[cond[i,3],{i,Length[cond]}];
{c,d}
];

ClosedBumpCondition[target_,hv_,nstrforbump_,str_]:=Module[
{index,istr,slav,ileft,iright,nstrcomp=3,condf,condi,vh},
index=SteerForClosedBump[target,hv,nstrforbump,str];
istr=str[1];slav=str[2];
ileft=Floor[nstrforbump/2]; iright=nstrforbump;
If[Length[index]>nstrforbump,
  If[~BelongToSection[istr[index[-1]],
      istr[index[{ileft,nstrforbump}]] ],
    iright=Length[index]
    ]
  ];
condf={{LINE['NAME',slav[index[iright]]+1],hv,0},{LINE['NAME',slav[index[iright]]+1],'P'//hv,0}};
condi={{LINE['NAME',istr[index[ileft]]],hv,0},{LINE['NAME',istr[index[ileft]]],'P'//hv,0}};
If[Length[index]>nstrforbump,
  vh=If[hv=='X','Y','X'];
  condf=Join[condf,
   {{LINE['NAME',slav[index[iright]]+1],vh,0},{LINE['NAME',slav[index[iright]]+1],'P'//vh,0}}];
  condi=Join[condi,
   {{LINE['NAME',istr[index[ileft]]],vh,0},{LINE['NAME',istr[index[ileft]]],'P'//vh,0}}]
  ];
{{condi,condf},index}
];

SteerForClosedBump[target_,hv_,nstrforbump_,str_]:=Module[
{istr,hstr,nstr,hori,nleft,nright,last,it,over,j,llist={},rlist={},clist={}},
istr=str[1]; nstr=Length[istr]; hstr=str[3];
nleft=Floor[nstrforbump/2]; nright=nstrforbump-nleft;
hori=hv[-1]=='X'; 
last=nstr; it=target; over=0;
While[Length[llist]<nleft,
  j=SearchSteer[it,istr,hstr,hori,nleft,True,last];
  If[j==Null,
    If[over,Return[]]; over=1; it=LINE["LENGTH"]; last=nstr,
    llist=Append[llist,j]; last=If[j==1,it=LINE["LENGTH"];over=1;nstr,j-1];
    ]
  ];
last=If[llist[1]==Null,1,llist[1]+1]; it=target; over=0;
While[Length[rlist]<nright,
  j=SearchSteer[it,istr,hstr,hori,nright,False,last];
  If[j==Null,
    If[over,Return[]]; over=1; it=1; last=1,
    rlist=Append[rlist,j]; last=If[j==nstr,it=1;over=1;1,j+1];
    ]
  ];
If[Len[hv]==1,
  If[ CoupledLineQ[istr[llist[nleft]],istr[rlist[nright]]], 
    clist=If[hori,
            SteerForClosedBump[target,hv//'Y',3,str],
            SteerForClosedBump[target,hv//'X',3,str]]
    ]
  ];
Flatten[{llist,rlist,clist}]
];

SearchSteer[target_,istr_,hstr_,horizontal_,n_,left_,last_]:=Module[
{},
If[left,
  Do[If[istr[i]<target && hstr[i]==horizontal, Return[i]],{i,last,1,-1}],
  Do[If[istr[i]>=target && hstr[i]==horizontal, Return[i]],{i,last,Length[istr],1}]
  ]
];

BelongToSection[t_,{from_,to_}]:=
If[from<to,
  from<=t && t<to,
  from<=t |  t<to];

CoupledLineQ[from_,to_]:=Module[
{},
If[from<=to,
  Do[ If[
        Switch[ LINE["TYPE",i],
          1,0,2,Element["ROTATE",LINE['ELEMENT',i]]*Element["K0",LINE['ELEMENT',i]],
          4,Element["ROTATE",LINE['ELEMENT',i]]*Element["K1",LINE['ELEMENT',i]],
          6,Element["ROTATE",LINE['ELEMENT',i]]*Element["K2",LINE['ELEMENT',i]],
          20,Element["BZ",LINE['ELEMENT',i]],_,0
        ]<>0,Return[1]
      ], {i,from,to}
  ]===1,
  If[FLAG['RING'],CoupledLineQ[from,LINE["LENGTH"]] | CoupledLineQ[1,to],
    CoupledLineQ[to,from]
  ]
]
];

Protect[MakeBump,CanonicalBumpRep,BumpConditionMatrix,ClosedBumpCondition,SteerForClosedBump,SearchSteer,BelongToSection,
CoupledLineQ]

SelectSteer[str_,section_]:=Module[{index,sect},
  sect=LINE["position",section];
  index=Select[Range[Length[str[1]]],BelongToSection[str[1,#],sect]&];
  Map[Part[#,index]&,str]
]

SelectMonitor[mon_,section_]:=Module[{index,sect},
  sect=LINE["position",section];
  index=Select[Range[Length[mon[1]]],BelongToSection[mon[1,#],sect]&];
  MapAt[Part[#,index]&,mon,{{1},{2,1},{2,2},{4}}]
]
  
CurrentSteers[]:=Module[{ic,t},
ic=Select[Range[LINE["length"]-1],LINE["type",#]==2&];
t=LINE["K0",ic];
{t,ic}
];

ResetSteers[]:=Module[{ic,t},
ic=Select[Range[LINE["length"]-1],LINE["type",#]==2&];
t=LINE["K0",ic];
Do[LINE["K0",ic[i]]=0,{i,Length[ic]}];
{t,ic}
];

RecoverSteers[{str_,istr_},Calc_:False]:=Module[{},
Do[ LINE["K0",istr[i]]=str[i] , {i,Length[istr]} ];
If[Calc, CalculateOptics[1,LINE['LENGTH'],Twiss["*",1],FLAG['CELL'],2] ];
];

CorStat[mon_,options___]:=Module[
{def={TrueOrbit->False,Last->{},Steer->{}},op,str,a,hv,u,ux,uy,vx,vy,vex,vey,bar},
op=Join[{options},def];
If[TrueOrbit/.op,
  vx=RmsReport[Twiss["dx",mon[1]]];
  vy=RmsReport[Twiss["dy",mon[1]]]
, vx=RmsReport[Twiss["dx",mon[1]]-LINE["dx",mon[4]]-mon[2,1]];
  vy=RmsReport[Twiss["dy",mon[1]]-LINE["dy",mon[4]]-mon[2,2]]
];
vex=RmsReport[Twiss["ex",mon[1]]];
vey=RmsReport[Twiss["ey",mon[1]]];
v=Map[ReplacePart[#,mon[1,#[4]],4]&,{vx,vy,vex,vey}];
$FORM="10.7";bar="________________________________________________________________________";
Print[" _____ Orbit Statistics (",If[TrueOrbit/.op,"True Orbit","BPM"],") [mm] ______________",bar];
Print["      x_rms     x_max     at       y_rms     y_max     at       Ex_rms    Ex_max    at       Ey_rms    Ey_max    at"];
Print[" Now "//StringStatMon[v[1]]//StringStatMon[v[2]]//StringStatMon[v[3]]//StringStatMon[v[4]]];
If[~SameQ[Last/.op,{}],{vx,vy,vex,vey}=(Last/.op)[1];
  Print[" Last"//StringStatMon[vx]//StringStatMon[vy]//StringStatMon[vex]//StringStatMon[vey]]
];
str=Steer/.op;
If[~SameQ[str,{}]
, hv=Select[Range[Length[str[1]]],str[3,#]==1&];
  If[hv=={}
  , ux={0,0,0,0}
  , ux=RmsReport[ LINE["K0",str[1][hv]] ];
    ux=ReplacePart[ux,str[1,hv[ux[4]]],4];
  ];
  hv=Select[Range[Length[str[1]]],str[3,#]==0&];
  If[hv=={}
  , uy={0,0,0,0}
  , uy=RmsReport[ LINE["K0",str[1][hv]] ];
    uy=ReplacePart[uy,str[1,hv[uy[4]]],4];
  ];
  Print[" ----- Horizontal Steers [mrad] ------------- Vertical Steers [mrad] --------------"];
  Print["      rms       mean      max       at       rms       mean      max       at"];
  u={ux,uy};
  Print[" Now "//StringStatSte[u[1]]//StringStatSte[u[2]]];
  If[~SameQ[(Last/.op),{}],
    If[~SameQ[(Last/.op)[2],{}],{ux,uy}=(Last/.op)[2];
      Print[" Last"//StringStatSte[ux]//StringStatSte[uy]]
    ]
  ]
];
$FORM=" ";
If[SameQ[str,{}],{v,{}},{v,u}]
];

RmsReport[a_]:=Module[{mean,rms,max,min,m1,m2,mm},
mean=Apply[Plus,a]/Length[a];
rms=Sqrt[Apply[Plus,a^2]/Length[a]-mean^2];
max=Max[a];min=Min[a];m1=Position[a,max][1,1];m2=Position[a,min][1,1];
amax=Max[Abs[max],Abs[min]];mm=If[amax==max,m1,m2];
{rms,mean,If[amax==max,max,min],mm}
];

StringStatMon[vx_]:=Module[{nx},
  nx=LINE["name",vx[4]];
  vx[1]*1e3//vx[3]*1e3//" "//nx//Spaces[8-Len[nx]]
];

StringStatSte[vx_]:=Module[{nx},
  nx=If[vx[4]==0,"***",LINE["name",vx[4]]];
  vx[1]*1e3//vx[2]*1e3//vx[3]*1e3//" "//nx//Spaces[8-Len[nx]]
];

Spaces[w_]:=Nest[StringJoin[#," "]&,"",Max[0,w]];

HorizontalQ[ele_]:=Module[{angle,qp1=Pi/4,qp3=3*Pi/4},
  angle=If[VectorQ[ele],Abs[MapThread[Mod,{LINE["rotate",ele],Pi}]],Abs[Mod[LINE["rotate",ele],Pi]]];
  If[VectorQ[ele], Map[#<qp1 | #>qp3&,angle], angle<qp1 | angle>qp3]
];

Chop[x_,dx_:1e-10]:=If[VectorQ[x,ComplexQ],Map[If[Abs[Re[#]]<dx,0,Re[#]]+If[Abs[Im[#]]<dx,0,Im[#]]&,x]];
Chop[x_,dx_:1e-10]:=If[VectorQ[x,NumberQ],Map[If[Abs[#]<dx,0,#]&,x]];
Chop[x_,dx_:1e-10]:=
If[NumberQ[x],If[ComplexQ[x],If[Abs[Re[x]]<dx,0,x]+If[Abs[Im[x]]<dx,0,x],If[Abs[x]<dx,0,x]],Map[Chop[#,dx]&,x]];

Protect[ResetSteers,RecoverSteers,CorStat,RmsReport,StringStatMon,StringStatSte,Spaces,Chop];

