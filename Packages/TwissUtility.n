BeginPackage[TwissUtility`];

!  Convenience class for dealing with Courant-Snyder (or Twiss) parameters.  These
!  parameters represent an ellipse in phase space given by
!
!      gamma*x^2 + 2*alpha*x*x' + beta*x'^2 = emitt
!
!  Recall that these parameters are related by the fact
!
!      beta*gamma - alpha^2 = 1
!
!
!	Author	: Christopher K. Allen
!	Date	: November, 2005
!


LightSpeed = 299792458;



!------------------------------
!
! Function GetEnvelopeFromTwiss
!
!------------------------------
! 
!      
!  Get the values of the beam envelope parameters from the corresponding Twiss 
!  parameters.  The units depend upon the units of the Twiss parameters (e.g.,
!  if the Twiss parameters are in MKS than so are the envelope parameters).
!  If the emittance is given as effective emittance (i.e. 5*RMS for 3D beam, 
!  4*RMS for 2D beam), then the envelope parameters are that of the equivalent
!  uniform beam.  If the emittance is given as RMS emittance, then the returned 
!  values are for the RMS envelope.
!
!      Parameters   
!        vecTwiss    vectors {alpha,beta, emittance} of Twiss parameters
!      
!      Returned Value       
!        	     vector of beam envelope parameters {radius,slope,emittance}
!    

GetEnvelopeFromTwiss[vecTwiss_] := Module[
    {
    dblApha,                 ! Twiss alpha parameter
    dblBeta,                 ! Twiss beta parameter
    dblEmitt,                ! beam emittance
    dblEnvRad,               ! envelope radius
    dblEnvSlp                ! envelope slope
    },
    
    dblAlpha = vecTwiss[[1]];
    dblBeta  = vecTwiss[[2]];
    dblEmitt = vecTwiss[[3]];

    dblEnvRad = Sqrt[dblBeta*dblEmitt];
    dblEnvSlp = -dblAlpha*Sqrt[dblEmitt/dblBeta];

    Return[{dblEnvRad, dblEnvSlope, dblEmitt}];
];
    

!------------------------------
!
! Function GetTwissFromEnvelope
!
!------------------------------
! 
!      
!  Get the values of the Twiss parameters from the corresponding beam envelope 
!  parameters.  The units depend upon the units of the envelope  parameters (e.g.,
!  if the envelope parameters are in MKS than so are the Twiss parameters).
!  If the beam envelope parameters are for the RMS envelope, then the returned
!  Twiss parameters are the RMS values.  If the beam envelope parameters are for the
!  equivalent uniform beam then so are the return Twiss parameters.
!
!      Parameters   
!        vecTwiss    vectors {radius,slope,emittance} of beam envelope parameters
!      
!      Returned Value       
!        	     vector of Twiss parameters {alpha,beta,emittance}
!    

GetTwissFromEnvelope[vecEnvelope_] := Module[
    {
    dblApha,                 ! Twiss alpha parameter
    dblBeta,                 ! Twiss beta parameter
    dblEmitt,                ! beam emittance
    dblEnvRad,               ! envelope radius
    dblEnvSlp                ! envelope slope
    },
    
    dblEnvRad = vecEnvelope[[1]];
    dblEnvSlp = vecEnvelope[[2]];
    dblEmitt  = vecEnvelope[[3]];

    dblAlpha  = -dblEnvRad*dblEnvSlp/dblEmitt;
    dblBeta   = dblEnvRad*dblEnvRad/dblEmitt;

    Return[{dblAlpha, dblBeta, dblEmitt}];
];


!------------------------------
!
! Function CorrelationMatrix
!
!------------------------------
! 
!  Compute and return the 2x2 correlation matrix for the Twiss parameters.  The 
!  correlation matrix sigma has the form
!
!        sigma = <(x x')*(x x')'>
!       
!              = emitt * |  beta  -alpha |
!                        | -alpha  gamma |
!
!      Parameters   
!        vecTwiss    vector {alpha,beta, emittance} of Twiss parameters
!      
!      Returned Value       
!        	     2x2 beam correlation matrix
!    

CorrelationMatrix[vecTwiss_] := Module[
    {
    dblApha,                 ! Twiss alpha parameter
    dblBeta,                 ! Twiss beta parameter
    dblGamma,                ! Twiss gamma parameter
    dblEmitt,                ! beam emittance
    matCorr                  ! correlation matrix
    },
    
    dblAlpha = vecTwiss[[1]];
    dblBeta  = vecTwiss[[2]];
    dblEmitt = vecTwiss[[3]];

    dblGamma  = (1.0 + dblAlpha*dblAlpha)/dblBeta;

    matCorr = {{dblEmitt*dblBeta, -dblEmitt*dblAlpha},
               {-dblAlpha*dblEmitt, dblGamma*dblEmitt}};

    Return[matCorr];
];
    

!--------------------------------
!
! Function CorrelationMatrixTrans
!
!--------------------------------
! 
!  Compute and return the 4x4 correlation matrix for the given transverse Twiss 
!  parameters.  This matrix is composed of the two 2x2 blocks for each transverse
!  phase plane.  Thus, the returned matrix is the uncoupled correlation matrix.
!  sigma and has the form
!
!       
!        sigma = | sigX    0  |
!                |   0   sigY |
!
!      Parameters   
!        vecTwissX   vector {alpha,beta, emittance} of X Plane Twiss parameters
!        vecTwissY   vector {alpha,beta, emittance} of Y Plane Twiss parameters
!      
!      Returned Value       
!        	     4x4 beam correlation matrix
!    

CorrelationMatrixTrans[vecTwissX_, vecTwissY_] := Module[
    {
    i,j,                     ! loop control
    matSigX,                 ! X phase plane correlation (sub)matrix
    matSigY,                 ! Y phase plane correlation (sub)matrix
    matSigma                 ! full correlation matrix
    },
    
    matSigX = CorrelationMatrix[vecTwissX];    
    matSigY = CorrelationMatrix[vecTwissY];

    matSigma = Table[0, {i,1,4}, {j,1,4}];

    For[i=1, i<=2, i++,
        For[j=1, j<=2, j++,
            matSigma[[i]][[j]]     = matSigX[[i]][[j]];
            matSigma[[i+2]][[j+2]] = matSigY[[i]][[j]];
        ];
    ];

    Return[matSigma];
];
    


!--------------------------------
!
! Function CorrelationMatrix6D
!
!--------------------------------
! 
!  Compute and return the full 6x6 correlation matrix for the given the Twiss 
!  parameters for all three phase planes.  This matrix is composed of three 
!  2x2 blocks for each phase plane, including the longitudinal.
!  The returned matrix is the uncoupled correlation matrix sigma and has the form
!
!       
!        sigma = | sigX    0     0  |
!                |   0   sigY    0  |
!                |   0     0   sigZ | 
!
!      Parameters   
!        vecTwissX   vector {alpha,beta, emittance} of X Plane Twiss parameters
!        vecTwissY   vector {alpha,beta, emittance} of Y Plane Twiss parameters
!        vecTwissZ   vector {alpha,beta, emittance} of Z Plane Twiss parameters
!      
!      Returned Value       
!        	     6x6 beam correlation matrix
!    

CorrelationMatrix6D[vecTwissX_, vecTwissY_, vecTwissZ_] := Module[
    {
    i,j,                     ! loop control
    matSigX,                 ! X phase plane correlation (sub)matrix
    matSigY,                 ! Y phase plane correlation (sub)matrix
    matSigZ,                 ! Z phase plane correlation (sub)matrix
    matZero,                 ! the 2x2 zero matrix
    matCmp,                  ! component matrix for a phase plane
    elem,                    ! matrix element
    matSigma                 ! full correlation matrix
    },
    
    
    matSigX = CorrelationMatrix[vecTwissX];    
    matSigY = CorrelationMatrix[vecTwissY];
    matSigZ = CorrelationMatrix[vecTwissZ];
  
    matZero = Table[0.0, {i,1,2}, {j,1,2}];

!    Print["matSigX = ", matSigX];
!    Print["matSigY = ", matSigY];
!    Print["matSigZ = ", matSigZ];

    matSigma = Table[0, {i,1,6}, {j,1,6}];

    For[i=1, i<=2, i++,
        For[j=1, j<=2, j++,
            matSigma[[i,j]]     = matSigX[[i]][[j]];
            matSigma[[i+2,j+2]] = matSigY[[i]][[j]];
            matSigma[[i+4,j+4]] = matSigZ[[i]][[j]];
        ];
    ];

!    Print["matSigma = ", matSigma];

    Return[matSigma];
];
    


Protect[GetEnvelopeFromTwiss,GetTwissFromEnvelope,CorrelationMatrix,CorrelationMatrixTrans,CorrelationMatrix6D];
EndPackage[];
