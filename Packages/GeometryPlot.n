(*
 * GeometryPlot --- Plot Beamline geometry
 * Now support 2D geometry ploting(GX-GY plane) only.
 *
 * Usage:   GeometryPlot[options...]
 * Options:
 *   Region:     Drawing region ``{from, to}'' style
 *               by component name or POSITION number.
 *               Default {1, LINE["LENGTH"]}
 *
 *   Names:      Drawing component name pattern.
 *               Default "*" 
 *
 *   Frame:      Drawing Frame.
 *               Default False
 *
 *   HoldAspect: Hold aspect ratio.
 *               Default True
 *
 *)

(* SetAttributes[{Region, Names, DisplayFunction}, Constant]; *)
SetAttributes[{HoldAspect}, Constant];

With[{def={Region:>{1, LINE["LENGTH"]}, Names->"*",
  HoldAspect->True, Frame->False,
  DisplayFunction:>$DisplayFunction}},

  GeometryPlot[opt:((_Rule|_RuleDelayed)...)] := Module[{
    RmatLtoG, ConvLtoG, ConvGtoScr, UpdateRange, range,
    op=Override[opt, def], display, region, pattern, frame, aspect,
    geometries, orbit, elements, hook,
    scale,
    color, bcolor, width, polygon},

    (* Support S[] style Region selecting[copied from OpticsPlot.n] *)
    op = op/.{
!      Rule[sRegion->{s1_Real, s2_Real}, Region->OP$S2Position[s1,s2]],
      Rule[Region->{S[s1_Real], s2(_Real|_String)}, Region->{Floor[OP$S2Position[s1]], s2}],
      Rule[Region->{s1:(_Real|_String), S[s2_Real]}, Region->{s1, Ceiling[OP$S2Position[s2]]}],
      Rule[Region->{S[s1_Real], S[s2_Real]}, Region->OP$S2Position[s1, s2]],
      Null[]};

    (* Rotation matrix from local coordinate to global coordinate *)
    RmatLtoG[List[chi1_Real, chi2_Real, chi3_Real]] := ({
      { Cos[chi1],          0, -Sin[chi1]},
      {         0,          1,          0},
      { Sin[chi1],          0,  Cos[chi1]}}
    .{
      {         1,          0,          0},
      {         0,  Cos[chi2],  Sin[chi2]},
      {         0, -Sin[chi2],  Cos[chi2]}}
    .{
      { Cos[chi3],  Sin[chi3],          0},
      {-Sin[chi3],  Cos[chi3],          0},
      {         0,          0,          1}});

    (* Convert vector from local coordinate to global coordinate *)
    ConvLtoG[xl_List, dir_Real, offset_List, chi_List] := Module[{
      {x, y, s} = RmatLtoG[chi] . xl},
      offset + {s, -x, -y}];

    (* Convert global coordinate to screen coordinate *)
    ConvGtoScr[x_List] := Take[x, 2];

    (* Range checker *)
    range={{INF, -INF}, {INF, -INF}};
    UpdateRange[List[x_Real, y_Real]] := (
      range={{Min[x, #[[1,1]]], Max[x, #[[1,2]]]},
	{Min[y, #[[2,1]]], Max[y, #[[2,2]]]}}&[range]);
    UpdateRange[List[pos__List]] := With[{newrange=
      {{Min[#[[1]]], Max[#[[1]]]}, {Min[#[[2]]], Max[#[[2]]]}}&
	[Thread[List[pos]]]},
      range={{Min[#[[1,1]], #2[[1,1]]], Max[#[[1,2]], #2[[1,2]]]},
	{Min[#[[2,1]], #2[[2,1]]], Max[#[[2,2]], #2[[2,2]]]}}&
	  [range, newrange]];

    {display, region, pattern, frame, aspect}=
      {DisplayFunction, Region, Names, Frame, HoldAspect}/.op;

    (* Decord Region *)
    If[Head[region]<=>List, region={region}];

    region=Switch[Length[region],
      0, {1, LINE["LENGTH"]},
      1, {region[[1]], region[[1]]},
      _, Take[region, 2]];

    region=Map[With[{elm=#}, If[RealQ[elm],
      1 + Mod[elm - 1, LINE["LENGTH"]],
      Check[LINE["POSITION", elm], 1]]]&, region];

    region=If[region[[1]] < region[[2]],
      Select[Range[LINE["LENGTH"]], (region[[1]]=<# && #=<region[[2]])&],
      Join[Select[Range[LINE["LENGTH"]], (region[[1]]=<#)&],
	Select[Range[LINE["LENGTH"]], (#=<region[[2]])&]]];

    (* Create central orbit line *)
    (* Generate design orbit geometry *)
    geometries=Module[{n, angle, length, dir},
      Map[With[{name=#[[1]], geo=#[[2, 1]], chi=#[[2,2]], hasAngle=#[[3]]},
	n=If[Not[hasAngle], 1,
	  angle=Element["ANGLE$SUM", LINE["ELEMENT", name]];
	  {length, dir}=LINE[{"L$SUM", "DIR"}, name];
	  n=If[Abs[angle]<1e-3, 1, Min[100, Ceiling[Abs[angle] / 1e-3]]]];
	Map[ConvGtoScr[geo + #]&, 
	  Prepend[Table[With[{th=angle*i/n, l=length*i/n},
	    ConvLtoG[{l * (Cos[th] - 1) / th, 0, l * Sin[th] / th},
	      dir, {0,0,0}, chi]], {i, n-1}], {0, 0, 0}]]]&,
      Map[{#, LINE["GEO", #], Switch[LINE["TYPENAME", #],
	"BEND"|"MULT", True, _, False]}&, region]]];

    (* Create Line object for design orbit and check plot range *)
    With[{pos=Append[Flatten[Drop[#, -1], 1], First[Last[#]]]&[geometries]},
      orbit=Line[pos, Plot->False, PlotColor->"black", Thickness->0];
      UpdateRange[pos]];

    (* Create element polygons *)
    geometries=Select[Map[LINE[{"NAME", "TYPENAME",
      "S", "L$SUM", "DIR", "GEO"}, #]&, Drop[region, -1]],
      StringMatchQ[#[[1]], pattern]&];

    Module[{elm, n, avg, sigma},
      avg=0.0;
      sigma=0.0;
      scale=0.0;

      elm=Select[Map[LINE[{"L$SUM", "TYPENAME"}, #]&, region],
	(#[[2]]==="BEND" || #[[2]]==="QUAD")&];

      n=Length[elm];
      If[n>1,
	Scan[(avg+=#[[1]])&, elm];
	avg/=n;
	Scan[(sigma=(#[[1]]-avg)^2)&, elm];
	sigma=Sqrt[sigma / (n-1)]];

      scale=Max[1.5 * avg, 4 * sigma];

      avg=0.0;
      sigma=0.0;

      elm=Select[Map[LINE[{"L$SUM", "NAME", "TYPENAME"}, #]&, region],
	(#[[3]]==="BEND")&];

      n=0;
      Scan[With[{l=#[[1]], angle=Element["ANGLE$SUM", LINE["ELEMENT", #[[2]]]]},
	If[Abs[angle]>1e-3, n+=1; avg+=Abs[l / angle]]]&, elm];
      If[n>1, avg/=n];

      scale=Max[scale, 0.30 * avg];

      If[scale===0.0, scale=INF];

      scale=Min[scale,
	0.03 * Sqrt[(range[[1,2]]-range[[1,1]])^2
	  + (range[[2,2]]-range[[2,1]])^2]];
      ];

    elements=Map[With[{name=#[[1]], type=#[[2]],
      s=#[[3]], length=#[[4]], dir=#[[5]], x0=#[[6, 1]], chi=#[[6, 2]],
      val=Element["VALUE", LINE["ELEMENT", name]]},

      color=Switch[type,
	 1|"DRIFT",  Null,

	 2|"BEND",   If[val<=>0, "gold", "tomato"],
	 4|"QUAD",   "limegreen",
	 6|"SEXT",   "orange",
	 8|"OCT",    "red",
	10|"DECA",   "red",
	12|"DODECA", "red",

	22|"MULT",   "forest green",

	_,           "skyblue"];

      bcolor=Switch[type,
	 1|"DRIFT",  Null,

	20|"SOL",    "SkyBlue2",
	22|"MULT",   "forest green",

	41|"MARK",   "blue",
	42|"MONI",   "blue",
	43|"APERT",  "blue",

	_,           "black"];

      width=scale * Switch[type,
	 1|"DRIFT",  0.08,

	 2|"BEND",   0.4,
	 4|"QUAD",   0.8,
	 6|"SEXT",   0.6,
	 8|"OCT",    0.6,
	10|"DECA",   0.6,
	12|"DODECA", 0.6,

	18|"UND",    0.2,
	19|"WIG",    0.2,

	20|"SOL",    0.3,
	22|"MULT",   0.8,

	31|"CAVI",   0.3,
	32|"TCAVI",  0.3,

	33|"MAP",    0.5,
	34|"INS",    0.5,

	41|"MARK",   1.0,
	42|"MONI",   0.8,
	43|"APERT",  0.8,

	_,           0.08];

      polygon=Switch[type,
	"BEND"|"MULT", Module[{angle, n},
	  angle=Element["ANGLE$SUM", LINE["ELEMENT", name]];
	  n=If[Abs[angle]<1e-3, 0, Min[100, Floor[Abs[angle] / 1e-3]]];
	  If[n>0, Join[
	    Prepend[Table[With[{th=angle*i/n, l=(length - width * angle)*i/n},
	      {l * (Cos[th] - 1) / th - width, 0, l * Sin[th] / th}], {i, n}],
	      {-width, 0, 0}],
	    Append[Reverse[Table[With[{th=angle*i/n, l=(length + width * angle)*i/n},
	      {l * (Cos[th] - 1) / th + width, 0, l * Sin[th] / th}], {i, n}]],
	      { width, 0, 0}]],
	    { { width, 0,      0}, { width, 0, length},
	      {-width, 0, length}, {-width, 0,      0}}]],

	_, {{ width, 0, 0}, { width, 0, length},
	    {-width, 0, length}, {-width, 0, 0}}];

      With[{pos=Map[ConvGtoScr[ConvLtoG[#, dir, x0, chi]]&,
	polygon]},
	UpdateRange[pos];
	Polygon[pos, PlotJoined->True, Thickness->0,
	  LineTags:>StandardForm["GeoPl$"//ToString[Canvas$Frame]//":"//name],
	  Tags:>StandardForm["GeoPl$"//ToString[Canvas$Frame]//":"//name],
	  PlotColor->If[StringQ[color] && length < 0.02 * width,
	    color, bcolor], FillColor->color]]]&, geometries];

    hook=With[{names=Map[First, geometries]}, Hook[Command:>(
      If[#===CanvasDrawer,
	Scan[With[{elm=#},
	  Bind[The$Canvas, "<Button-1>", GeometryPlot$InfoLabel[elm],
	    Tags->StandardForm["GeoPl$"//ToString[Canvas$Frame]//":"//elm],
	    Add->True]]&, names];
	Bind[The$Canvas, "<ButtonRelease-1>",
	  (KBF$WithdrawInfoLabel[False]), Add->True]]&)]];

    (* Add Frame margin *)
    If[frame, With[{dx=0.05 * (range[[1,2]]-range[[1,1]]),
      dy=0.05 * (range[[2,2]]-range[[2,1]])},
      range[[1,1]]-=dx; range[[1,2]]+=dx;
      range[[2,1]]-=dy; range[[2,2]]+=dy;
      ]];

    With[{g=Graphics[Append[Append[elements, orbit], hook],
      { DataRange->range,
	PlotRange->range,
	AspectRatio->If[aspect===True,
	  ((range[[1,2]]-range[[1,1]])/(range[[2,2]]-range[[2,1]])),
	  Automatic],
	Frame->frame, Background->Null}]},

      Switch[display,
	Identity|Null|None, (* skip *),
	_, Show[g]];

      Return[g];
      ];
    ];

  ];

GeometryPlot$InfoLabel[p_] := Module[{t},
  t=StandardForm[$FORM="10.5";
    "Entrance of "//LINE["NAME",p]//":   s = "//Twiss["S",p]//" m"//
    "\n`fb`n`dx,y `n = "//Twiss["BX",p]//", "//Twiss["BY",p]//
    " m\n`fa`n`dx,y`n = "//Twiss["AX",p]//", "//Twiss["AY",p]//
    "\n`fn`n`dx,y`n = "//Twiss["NX",p]/2/Pi//", "//Twiss["NY",p]/2/Pi//
    "\n`fh`n`dx,y`n = "//Twiss["EX",p]//", "//Twiss["EY",p]//
    " m\n`fh`n`dx,y`n' = "//Twiss["EPX",p]//", "//Twiss["EPY",p]//
    "\nR`d1,2`n ="//Twiss["R1",p]//", "//Twiss["R2",p]//
    " m\nR`d3,4`n ="//Twiss["R3",p]//" m`u-1`n, "//Twiss["R2",p]
    ];
  KBF$IsInfoLabelMapped=False;
  KBF$MoveCBForInfoLabel[t];
  ];

Protect[GeometryPlot, GeometryPlot$InfoLabel];

(* End of File *)
