(* Plots 1/21/2013 *)

Show;

Off[General::unprotconst];
Unprotect[GoodnessOfFit,ChiSquare,ConfidenceInterval];
On[General::unprotconst];
SetAttributes[{Contours,MeshRange,ColorFunction,ColorFunctionScaling,
  ContourColorFunction,
  MaxBend,PlotPoints,PlotDivision,FunctionLabel,ResultLabel,RaiseFit,
  Signal,GoodnessOfFit,ChiSquare,ConfidenceInterval,ColumnTags,MeshStyle,
  PlotStyle,Columns,ColumnOffset,Bins,BinRange,ColumnLabel,Mesh,MeshColor,
  FitParameters},
  Constant];

BeginPackage[Plots`]

Begin[Plots`]

contl;contb;nx;ny;fc;bc;m0;m1;m2;m3;q0;q1;q2;q3;

EndPackage[]

BeginPackage[Plots`,Global`]

With[{CP$def={Scale->{Linear,Linear},
  AspectRatio->Automatic,
  Frame->True,Tags->False,
  FillColor->{"black","red","blue","green","gray","magenta","cyan",
    "yellow"},
  MeshStyle->{None,"gray25","gray50"},
  GridLines->{None,Automatic},
  ColumnOffset->0.15,Reference->0,Orientation->Vertical,
  TickSize->Automatic,PlotRegion->{{0,1},{0,1}},
  TextSize->1,
  ColumnLabel->Automatic,
  ColumnTags->Null,
  FrameTicks->Automatic,Initialize->True,
  FrameLabel->{"","","",""},DisplayFunction:>$DisplayFunction,
  PlotLabel->"",Prolog->{},Epilog->{},
  Background->"#ffffff"},
  r=(Rule|RuleDelayed)[Graphics$Options,_]},

  ColumnPlot[ll_,opt___]:=Module[
    {n=Length[ll],d=Dimensions[ll],nc,ns,
      coff,cm,cw,x,y,cx,g,ref,of,pc,ms,pcx,msx,pr,or,sc,gopt,ld,
      cla,cl,ft,ts,tis,tx,t,tag,txs,
      op=Override[opt,CP$def]
      },
    {coff,ref,of,pc,ms,or,cl,ft,tis,tag,txs}={ColumnOffset,Reference,
      DisplayFunction,
      FillColor,MeshStyle,Orientation,ColumnLabel,FrameTicks,
      TickSize,ColumnTags,TextSize}/.op;
    ld=Length[d];
    {nc,ns,ymin,ymax}=Switch[ld,
      1,
      Join[{1,1},MinMax[ref,ll]],
      2,
      Join[{Second[d],1},MinMax[ref,ll]],
      3,
      Join[{Second[d],Third[d]},MinMax[ref,ref+((Plus@@#)&/@#)&/@ll]],
      _,
      Message[ListPlot::highD];
      Return[]];
    {cw,cm}=If[nc==1,{1-2*coff,0},
      (1-2*coff)/nc*{1-coff,coff}];
    pr=PlotRange/.op/.PlotRange->{Automatic,
      {If[ymin==ref,ref,Automatic],If[ymax==ref,ref,Automatic]}};
    If[or=or===Horizontal,
      pr=Reverse[pr];dr={{ymin,ymax},{0,n}},
      dr={{0,n},{ymin,ymax}}];
    cx=Table[coff+(cw+cm)*i+(i>0)*cm,{i,0,nc-1}];
    cx=(Thread[{cx,cx+cw}]+#)&/@Range[0,n-1];
    cla=Table["",{n*nc}];
    Check[
      Which[
        Head[cl]===List,
        ft=False;
        cla=Flatten[cl];
        cla=Join[cla,Table["",{Max[n*nc-Length[cla],0]}]];
        tx=WindowScaled[If[$DisplayFunction===TopDrawer,0.8,2.3]];
        tis=0;
        ts=Max[Min[2,6/Max[1,StringLength/@cla],12/n/nc],0.9]*txs,
        cl===Automatic,
        ,
        cl===None||cl===False,
        tis=0;
        ft=False,
        True,
        cx=cl/@cx;
        dr=If[or,{First[dr],cl/@Second[dr]},{cl/@First[dr],Second[dr]}]],
      Return[Graphics[{}]]];
    pc=Flatten[{pc}];
    pcx=Take[Flatten[Table[pc,{Ceiling[nc/Max[Length[pc],1]]}]],nc];
    pcx=Flatten[Table[pcx,{n}]];
    ms=Flatten[{ms}];
    msx=Take[Flatten[Table[ms,{Ceiling[ns/Max[Length[ms],1]]}]],ns];
    msx=Table[msx,{n*nc}];
    t=If[tag===Null,
      Table[Null,{n*nc}],
      StandardForm[Table[tag//i,{i,n*nc}]]];
    cx=Thread[{Flatten[cx,1],Flatten[ll,1],pcx,msx,cla,t}];
    sc=Flatten[{Linear,Scale/.op}][[{-2,-1}]];
    gopt=Override[Scale->sc,DataRange->dr,
      PlotRange->pr,
      FrameTicks->If[or,{Automatic,ft},{ft,Automatic}],
      TickSize->If[or,{Automatic,tis},{tis,Automatic}],
      Cases[op,r,1]];
    g=Graphics[Flatten[{Prolog/.op,
      If[or,
        If[ld<3,
          {Rectangle[{ref,#[[1,1]]},{Second[#],#[[1,2]]},
            FillColor->Third[#],MeshStyle->#[[4,1]],
            If[#[[6]]<=>Null,
              Tags->#[[6]],
              Null[]]],
            If[#[[5]]<=>"",
              Text[{#[[5]],{tx,Scaled[(#[[1,1]]+#[[1,2]])/2]}},
                TextAlign->"e",TextSize->ts],
              Null[]]}&/@cx,
          (y=ref;
            With[{x=First[#],c=Third[#],t=#[[6]]},
              {MapThread[
                Rectangle[{y,First[x]},{y+=#,Second[x]},
                FillColor->c,MeshStyle->#2,
                If[t<=>Null,
                  Tags->t,
                  Null[]]]&,{Second[#],#[[4]]}],
                If[#[[5]]<=>"",
                  Text[{#[[5]],{tx,Scaled[(First[x]+Second[x])/2]}},
                    TextAlign->"e",TextSize->ts],
                  Null[]]}])&/@cx],
        If[ld<3,
          {Rectangle[{#[[1,1]],ref},{#[[1,2]],Second[#]},
            FillColor->Third[#],MeshStyle->#[[4,1]],
            If[#[[6]]<=>Null,
              Tags->#[[6]],
              Null[]]],
            If[#[[5]]<=>"",
              Text[{#[[5]],{Scaled[(#[[1,1]]+#[[1,2]])/2],
                WindowScaled[1.85]-0.1}},
                TextRotate->270,TextAlign->"n",TextSize->ts],
              Null[]]}&/@cx,
          (y=ref;
            With[{x=First[#],c=Third[#],t=#[[6]]},
              {MapThread[
                Rectangle[{First[x],y},{Second[x],y+=#},
                FillColor->c,MeshStyle->#2,
                If[t<=>Null,
                  Tags->t,
                  Null[]]]&,{Second[#],#[[4]]}],
                If[#[[5]]<=>"",
                  Text[{#[[5]],{Scaled[(First[x]+Second[x])/2],
                    WindowScaled[1.85]-0.1}},
                    TextRotate->270,TextAlign->"n",TextSize->ts],
                  Null[]]}])&/@cx]],
      Epilog/.op}],
      gopt];
    If[of<=>Identity && of<=>Null && of<=>None,
      Show[g,Initialize->(Initialize/.op),
        PlotRegion->(PlotRegion/.op)]];
    g
    ]];

With[{def={PlotStyle->ColumnPlot,Orientation->Vertical,
  Bins:>Max[5,Min[100,Sqrt[Max[Length/@l]]]],
  Dashing->{{1},{0.75,0.25},{0.4, 0.15},{0.2,0.1},{0.1,0.08},
  {0.8,0.08, 0.08, 0.08},{0.4,0.08,0.08,0.08}},
  PlotColor:>If[$DisplayFunction===TopDrawer,
    {"black","red","blue","green","gray","magenta","cyan","yellow"},
    {"black","tomato","dark slate blue","forest green","gray",
      "magenta","cyan","yellow"}]}},

  HistoPlot[l_,opt___]:=HistoPlot[{l},opt];
  HistoPlot[l:{{_,_},___},opt___]:=HistoPlot[{l},opt];
  HistoPlot[l:{_List,___},opt___]:=Module[{min,max,
      {nc,ps}={Bins,PlotStyle}/.{opt}/.def,
      dc,col,hist,x,histall,ll=Length[l],da,pc,or},
    If[Head[l[[1,1]]]===List,
      {min,max}=BinRange/.{opt}/.
      BinRange->MinMax[l[[,,1]]]*{1,1.00001};
      dc=(max-min)/nc;
      histall=(
        col=Select[Thread[{Floor[(#[[,1]]-min)/dc]+1,#[[,2]]}],(1<=First[#]<=nc)&];
        hist=Table[0,{nc}];
        Scan[(hist[[First[#]]]+=Second[#])&,col];
        hist)&/@l,
      {min,max}=BinRange/.{opt}/.BinRange->MinMax[l]*{1,1.00001};
      dc=(max-min)/nc;
      histall=(
        col=Select[Floor[(#-min)/dc]+1,(1<=#<=nc)&];
        hist=Table[0,{nc}];
        Scan[(hist[[#]]++)&,col];
        hist)&/@l];
    Switch[ps,
      ColumnPlot,
      With[{dc,min},
        ColumnPlot[Thread[histall],ColumnLabel->(#*dc+min&),opt]],
      ListPlot,
      {da,pc,or}={Dashing,PlotColor,Orientation}/.{opt}/.def;
      da=(Dashing->#)&/@Take[Flatten[Table[da,
        {Ceiling[ll/Max[Length[da],1]]}],1],ll];
      pc=(PlotColor->#)&/@Take[Flatten[Table[pc,
        {Ceiling[ll/Max[Length[pc],1]]}]],ll];
      x=(Range[nc]-0.5)*dc+min;
      Show[MapThread[ListPlot[
        If[or===Vertical,
          Thread[{x,#}],
          Thread[{#,x}]],
        ##2,
        DisplayFunction->Identity,opt]&,{histall,da,pc}]],
      FitPlot,
      {da,pc,or}={Dashing,PlotColor,Orientation}/.{opt}/.def;
      da=(Dashing->#)&/@Take[Flatten[Table[da,
        {Ceiling[ll/Max[Length[da],1]]}],1],ll];
      pc=(PlotColor->#)&/@Take[Flatten[Table[pc,
        {Ceiling[ll/Max[Length[pc],1]]}]],ll];
      x=(Range[nc]-0.5)*dc+min;
      With[{fp=Null@@(FitParameters/.{opt})},
        Show[MapThread[FitPlot[
          If[or===Vertical,
            Thread[{x,#}],
            Thread[{#,x}]],
          fp,
          ##2,
          DisplayFunction->Identity,opt][[2]]&,{histall,da,pc}]]]]
    ]];

With[{def={MaxBend->0.1,PlotPoints->32,PlotDivision->1024,
  PlotJoined->True,StepRatio->1,Plot->False,GridLines->{Automatic,Automatic}}},

  Plot[f_,{x_,xmin_,xmax_},opt___]:=Block[{x},Module[
    {{maxb,minp,minx,pj,sr,pt,gr}=
      {MaxBend,PlotPoints,PlotDivision,PlotJoined,StepRatio,Plot,GridLines}/.{opt}/.def},
    ListPlot[PlotInterpolate[f,{x,xmin,xmax},minp,Max[minp*3,minx],maxb],
      PlotJoined->pj,StepRatio->sr,Plot->pt,GridLines->gr,opt]]]];

With[{def={Dashing->{{1},{0.75,0.25},{0.4, 0.15},{0.2,0.1},{0.1,0.08},
  {0.8,0.08, 0.08, 0.08},{0.4,0.08,0.08,0.08}},
  PlotColor:>If[$DisplayFunction===TopDrawer,
    {"black","red","blue","green","gray","magenta","cyan","yellow"},
    {"black","red3","dark slate blue","forest green","gray",
      "magenta","cyan","yellow"}],
  Legend->{False},
  DisplayFunction->Default}},

  Plot[f_List,{x_,xmin_,xmax_},opt___]:=Block[{x},Module[
    {da,pc,leg,n,g,h=Map[Hold,Unevaluated[f]]},
    x=xmin;
    {da,pc,leg}={Dashing,PlotColor,Legend}/.{opt}/.def;
    n=Length[h];
    da=(Dashing->#)&/@Take[Flatten[Table[da,
      {Ceiling[n/Max[Length[da],1]]}],1],n];
    pc=(PlotColor->#)&/@Take[Flatten[Table[pc,
      {Ceiling[n/Max[Length[pc],1]]}]],n];
    leg=(Legend->#)&/@Take[Flatten[{{leg},Table[False,{n}]}], n];
    g=MapThread[Function[{a,b,c,d},Plot[ReleaseHold[a],{x,xmin,xmax},
      DisplayFunction->Null,b,c,d,opt]],{h,da,pc,leg}];
    If[(DisplayFunction/.{opt}/.def)===Default,Show[g]];
    g]]];

PlotInterpolate[fin_,{y_,xmin_,xmax_},min0_,maxdiv_,maxb_]:=Module[
  {f,fs,s,dl,dl0,dl1,la,cos,a,yw,ar,dx,xl,yl,x0,x1,x2,cosm,cosm1=-1,
    costh=1-maxb^2/2,min=min0,fh=Extract[Hold[fin],{1},Head]},
  If[Head[fh]===SplineData,
    min=Max[min,Length[fh[[1,1]]]]];
  fs = With[{y = #}, {#, Check[fin, 0]}]&;
  f  = With[{y = Vector[#]},
    Check[ReleaseVector[fin], ReleaseVector[fs[Vector[#]]]]]&;
  dx=(xmax-xmin)/min;
  yl=f[xl=Range[0,min]*dx+xmin];
  s=True;
  While[s && Length[xl]<maxdiv,
    yw=Max[yl]-Min[yl];
    ar=Abs[yw/(xmax-xmin)];
    la=Thread[{ar*xl,yl}];
    dl=Difference[la];
    dl0=Drop[dl,-1];
    dl1=Rest[dl];
    cos=MapThread[(#.#2)/Max[Abs[Complex@@#]*Abs[Complex@@#2],1e-100]&,{dl1,dl0}];
    cosm=Min[cos];
    If[cosm<cosm1-maxb/10 || cosm>cosm1+maxb/10,
      cosm1=cosm;
      x0=Take[xl,{2,-2}];
      x1=(Drop[xl,-2]+2*x0)/3;
      x2=(Drop[xl,2]+2*x0)/3;
      a=MapThread[
        If[#<costh,
          Null[#2,#3],
          Null[]]&,
        {cos,x1,x2}];
      s=Length[a]>0;
      If[s,
        {xl,yl}=Thread[
          Union[Thread[{Join[xl,a],Join[yl,f[a]]}]]]],
      s=False]];
  Thread[{xl,yl}]];

SetAttributes[Plot,HoldAll];
SetAttributes[PlotInterpolate,HoldFirst];

FitPlot[data_,fun_,x_,par0__]:=
  Module[{s,g1,g,fun1,dy=0.28,xl,yl,dx,d,dm,x0,y0,lsym,
    {opt,par}=SwitchCases[{par0},{_Rule|_RuleDelayed,_}],
    x1,x2,ci,g3,xa=data[[,1]],lp,sc,ts,fn,re,col,pr,res,rf},
    lp=Length[par];
    sc=Weight/.opt/.Weight->None;
    ts=TextSize/.opt/.TextSize->1;
    fn=FunctionLabel/.opt/.FunctionLabel->{0.5,Null};
    re=ResultLabel/.opt/.ResultLabel->{0.5,Null};
    col=Columns/.opt/.Columns->Min[3,lp];
    pr=PlotRange/.opt/.PlotRange->Automatic;
    rf=RaiseFit/.opt/.RaiseFit->False;
    If[res=(Head[re]===List),{x0,y0}=re];
    s=Which[
      sc===Signal,
      d=Thread[data];
      dm=Max[Second[d]];
      Fit[
        Thread[Switch[Length[First[data]],
          2,
          d,
          3,
          {First[d],Second[d],Third[d]/Second[d]*dm},
          4,
          {First[d],Second[d],Third[d],d[[4]]/Second[d]*dm}]],
        fun,x,par0],
      Head[sc]===List,
      d=Thread[data];
      Fit[
        Thread[Switch[Length[First[data]],
          2,
          {First[d],Second[d],sc},
          3,
          {First[d],Second[d],Third[d]*sc},
          4,
          {First[d],Second[d],Third[d]*sc,d[[4]]*sc}]],
        fun,x,par0],
      True,
      Fit[data,fun,x,par0]];
    g1=ListPlot[data,DisplayFunction->Identity,Null@@opt];
!    ReleaseHold[Hold[fun1[y_]:=With[{x=y},fun]]/.s];
    {x1,x2}=Switch[pr,
      {{_Real,_Real},_},First[pr],
      {{_Real,Automatic},_},{pr[[1,1]],Max[xa]},
      {{Automatic,_Real},_},{Min[xa],pr[[1,2]]},
      _,MinMax[xa]];
    Block[{x},
      g=Unevaluated$[Plot[fun,{x,x1,x2},
        DisplayFunction->Identity,Null@@opt,PlotColor->"blue"]]/.s];
    lsym=Min[Max[StringLength[SymbolNameRoot[#]]&/@par[[,1]]],8];
    StandardForm[$FORM="8.5";
      ci=ConfidenceInterval/.s;
      If[Head[fn]===List||Head[re]===List,
        g3=Graphics[Flatten[{
          If[Head[fn]===List,
            StandardForm[
              Text[{"Function = "//Unevaluated[fun],
                {WindowScaled[First[fn]],
                  If[RealQ[fn[[2]]],
                    WindowScaled[Second[fn]],
                    BelowTags["T$LC","F$X1","FL$X1","LF$X1","ELF$X1","LF$Y1","LF$Y2",0]]}},
                Tags:>"FP$FUN"//The$CanvasObject@Canvas$Frame,
                TextSize->ts,Anchor->"nw"]],
            Null[]],
          If[res,
            dx=13/col;
            xl=x0+(Mod[#,col]&/@Range[0,lp-1])*dx;
            If[RealQ[y0],
              yl=y0-(Floor[Range[0,lp-1]/col]+2.5)*dy,
              yl=AboveTags["T$TH","T$T","F$X2","FL$X2","LF$X2","LF$Y1","LF$Y2","ELF$Y1","ELF$Y2",#]&
                /@((Floor[(lp-1)/col]-Floor[Range[0,lp-1]/col])*dy)];
            Null@@{Text[{"ChiSquare ="//(ChiSquare/.s)//
              "  Goodness  ="//(GoodnessOfFit/.s),
              {WindowScaled[x0],
                If[RealQ[y0],
                  WindowScaled[y0-dy],
                  ReplacePart[yl[[1]],(Floor[(lp-1)/col]+1.2)*dy,-1]]
                }},
              Tags:>"FP$RES"//The$CanvasObject@Canvas$Frame,
              TextSize->ts,Anchor->"sw"],
              MapThread[Text[{(SymbolNameRoot[#[[1]]]//"        ")[1,lsym]
                //" ="//(#[[1]]/.s)//" \261"//#2,
                {WindowScaled[#3],
                  If[RealQ[y0],
                    WindowScaled[#4],
                    #4]}},
                Tags:>"FP$RES"//The$CanvasObject@Canvas$Frame,
                TextSize->ts,Anchor->"sw"]&,
                {par,ci,xl,yl}]},
            Null[]]}]],
        g3:=Null[]]];
    {s,If[rf,
      Show[g1,g,g3,Null@@opt],
      Show[g,g1,g3,Null@@opt]]}];
SetAttributes[FitPlot,HoldRest];

With[{def={PlotRange->Automatic,MeshRange->Default,
  ColorFunction->Automatic,
  ColorFunctionScaling->True,
  DisplayFunction->Default,
  AspectRatio->1,ContourColorFunction->Automatic,
  Contours->10,Prolog->{},Epilog->{}}},

  ListContourPlot[l_,opt___]:=Module[{
    m0,m1,mesh,x,gr,op,
    {pr,mr,lc,cf,cfs,df,nc,ar}={PlotRange,MeshRange,ContourColorFunction,
      ColorFunction,
      ColorFunctionScaling,
      DisplayFunction,Contours,AspectRatio}/.opt/.def},
    {nx,ny}=Dimensions[l];
    pr=CP$PlotRange[pr,l];
    mr=mr/.Automatic->Default;
    If[mr===Default,
      mr=CP$MeshRange[mr];
      mesh=Identity,
      mr=CP$MeshRange[mr];
      {m0,m1}=Thread[mr];
      m1=(m1-m0)/({nx,ny}-1);
      mesh[x_]=m0+(x-1)*m1];
    Switch[cf,
      _String,
      cf=With[{cf},cf&],
      Null|None|False,
      cf="white"&,
      Automatic,
      cf=CP$Color
      ];
    Switch[lc,
      _String,
      lc=With[{lc},lc&],
      Null|None|False,
      lc=Null,
      Automatic,
      lc=CP$ContourColor];
    op=DeleteCases[Override[AspectRatio->ar,DataRange->mr,opt,def],_[PlotRange,_],1];
    gr=Graphics[Flatten[{Prolog/.op,CP$FindContour[l,pr,nc,mesh,cf,cfs,lc],Epilog/.op}],op];
    If[df===Default,Show[gr,op]];
    gr]];

With[{def={PlotRange->Automatic,MeshRange->Default,
  ColorFunction->Automatic,DisplayFunction->Default,
  ColorFunctionScaling->True,
  AspectRatio->1,Mesh->False,MeshColor->Automatic,Prolog->{},Epilog->{}}},

  ListDensityPlot[l_,opt___]:=Module[{
    m0,m1,mesh,x,gr,op,l1,g,
    {pr,mr,cf,cfs,df,ar,ms,mc}={PlotRange,MeshRange,
      ColorFunction,ColorFunctionScaling,
      DisplayFunction,AspectRatio,Mesh,MeshColor}/.opt/.def},
    {nx,ny}=Dimensions[l];
    pr=CP$PlotRange[pr,l];
    mr=mr/.Automatic->Default;
    If[mr===Default,
      mesh[x_]=x-0.5,
      mr=CP$MeshRange[mr];
      {m0,m1}=Thread[mr];
      m1=(m1-m0)/({nx,ny}-1);
      mesh[x_]=m0+(x-1.5)*m1];
    Switch[cf,
      _String,
      cf=cf&,
      Null|None|False,
      cf=Null,
      Automatic,
      cf=CP$Color
      ];
    Switch[mc,
      _String,
      mc=mc&,
      Null|None|False,
      mc=cf,
      Automatic,
      mc=CP$ContourColor
      ];
    l1=If[cfs,
      l1=Restrict[(l-pr[[1]])/(pr[[2]]-pr[[1]]),0,1],
      l1=l-pr[[1]]];
    g=If[ms===True,
      Table[
        Rectangle[mesh[{i,j}],mesh[{i+1,j+1}],FillColor->cf[l1[[i,j]]],
          PlotColor->mc[l1[[i,j]]]],
        {i,nx-1},{j,ny-1}],
      Table[
        Rectangle[mesh[{i,j}],mesh[{i+1,j+1}],FillColor->cf[l1[[i,j]]],
          PlotColor->cf[l1[[i,j]]]],
        {i,nx},{j,ny}]];
    op=DeleteCases[
      Override[AspectRatio->ar,DataRange->Thread[{mesh[{1,1}],mesh[{nx,ny}+1]}],opt,def],
      _[PlotRange,_],1];
    g=Graphics[Flatten[{Prolog/.op,g,Epilog/.op}],op];
    If[df===Default,Show[g,op]];
    g]];

CP$FindContour[l_,pr_,n_,mesh_,cf_,cfs_,lc_]:=Module[
  {l1,l1f,i,j,k,dl,min,max,g,ml,gp,gl,b,
    i1,j1,f0,f1,f2,f3},
  l1=Restrict[(l-pr[[1]])/(pr[[2]]-pr[[1]])*n+0.5,0.5,n+0.5];
  l1f=Floor[l1];
  With[{l1},
    q0:={i,j+(k-l1[[i,j]])/(l1[[i,j1]]-l1[[i,j]])};
    q1:={i+(k-l1[[i,j1]])/(l1[[i1,j1]]-l1[[i,j1]]),j1};
    q2:={i+(k-l1[[i,j]])/(l1[[i1,j]]-l1[[i,j]]),j};
    q3:={i1,j+(k-l1[[i1,j]])/(l1[[i1,j1]]-l1[[i1,j]])}];
  Clear[contl,contb];
  contl[_][_]={{}};
  contb[_][_]={};
  Table[
    i1=i+1;
    j1=j+1;
    {min,max}=MinMax[{f0,f1,f2,f3}={l1f[[i,j]],l1f[[i,j1]],l1f[[i1,j]],l1f[[i1,j1]]}];
    {m0,m1,m2,m3}={{i,j},{i,j1},{i1,j},{i1,j1}};
    If[cf<=>Null,
      b=False;
      If[i==1,
        b=True;
        Do[CP$AddBorder[{m0,m1},k],{k,min}]];
      If[i1==nx,
        b=True;
        Do[CP$AddBorder[{m3,m2},k],{k,min}]];
      If[j==1,
        b=True;
        Do[CP$AddBorder[{m2,m0},k],{k,min}]];
      If[j1==ny,
        b=True;
        Do[CP$AddBorder[{m1,m3},k],{k,min}]];
      If[b,
        Do[
          CP$AddBorder[#,k]&/@bc[f0>=k,f1>=k,f2>=k,f3>=k];
          CP$AddLine[#,k]&/@fc[f0>=k,f1>=k,f2>=k,f3>=k],
          {k,min+1,max}],
        Do[
          CP$AddLine[#,k]&/@fc[f0>=k,f1>=k,f2>=k,f3>=k],
          {k,min+1,max}]],
      Do[
        CP$AddLine[#,k]&/@fc[f0>=k,f1>=k,f2>=k,f3>=k],
        {k,min+1,max}]],
    {i,nx-1},{j,ny-1}];
  {gp,gl}=CP$GetLine[l1,n,cf];
  g=Flatten[{
    If[cf<=>Null,
      {Rectangle[mesh[{1,1}],mesh[{nx,ny}],PlotColor->"",FillColor->cf[0]],
        Polygon[Thread[mesh[Thread[#2]]],
          PlotColor->"",FillColor->If[cfs,cf[#/n],cf[#/n*(pr[[2]]-pr[[1]])+pr[[1]]]]]&@@[gp,{1}]},
      Null[]],
    If[lc<=>Null,
      With[{c=lc[#2/n]},
        If[Head[c]===String,
          Line[Thread[mesh[Thread[First[#]]]],PlotColor->lc[#2/n]],
          Null[]]]&@@[gl,{1}],
      Null[]]
    }];
  Clear[contl,contb,q0,q1,q2,q3,m0,m1,m2,m3];
  g];

fc[1,0,0,0]:={{m0,q0,q2}};
fc[0,1,0,0]:={{m1,q1,q0}};
fc[1,1,0,0]:={{m0,q1,q2}};
fc[0,0,1,0]:={{m2,q2,q3}};
fc[1,0,1,0]:={{m2,q0,q3}};
fc[0,1,1,0]:={{m1,q1,q0},{m2,q2,q3}};
fc[1,1,1,0]:={{m2,q1,q3}};
fc[0,0,0,1]:={{m3,q3,q1}};
fc[1,0,0,1]:={{m0,q0,q2},{m3,q3,q1}};
fc[0,1,0,1]:={{m1,q3,q0}};
fc[1,1,0,1]:={{m0,q3,q2}};
fc[0,0,1,1]:={{m3,q2,q1}};
fc[1,0,1,1]:={{m3,q0,q1}};
fc[0,1,1,1]:={{m1,q2,q0}};
fc[___]={};

bc[1,0,0,0]:={If[m0[[1]]==1,{m0,q0},Null[]],If[m0[[2]]==1, {q2,m0},Null[]]};
bc[0,1,0,0]:={If[m1[[1]]==1,{q0,m1},Null[]],If[m1[[2]]==ny,{m1,q1},Null[]]};
bc[1,1,0,0]:={If[m0[[1]]==1,{m0,m1},Null[]],
  If[m0[[2]]==1,{q2,m0},Null[]],If[m1[[2]]==ny,{m1,q1},Null[]]};
bc[0,0,1,0]:={If[m2[[1]]==nx,{q3,m2},Null[]],If[m2[[2]]==1,{m2,q2},Null[]]};
bc[1,0,1,0]:={If[m2[[1]]==nx,{q3,m2},Null[]],
  If[m2[[2]]==1,{m2,m0},Null[]],If[m0[[1]]==1,{m0,q0},Null[]]};
bc[0,1,1,0]:=Join[bc[0,1,0,0],bc[0,0,1,0]];
bc[1,1,1,0]:={If[m2[[2]]==1,{m2,m0},Null[]],
  If[m2[[1]]==nx,{q3,m2},Null[]],If[m1[[1]]==1,{m0,m1},Null[]],If[m1[[2]]==ny,{m1,q1},Null[]]};
bc[0,0,0,1]:={If[m3[[1]]==nx,{m3,q3},Null[]],If[m3[[2]]==ny,{q1,m3},Null[]]};
bc[1,0,0,1]:=Join[bc[1,0,0,0],bc[0,0,0,1]];
bc[0,1,0,1]:={If[m1[[2]]==ny,{m1,m3},Null[]],
  If[m1[[1]]==1,{q0,m1},Null[]],If[m3[[1]]==nx,{m3,q3},Null[]]};
bc[1,1,0,1]:={If[m0[[1]]==1,{m0,m1},Null[]],If[m0[[2]]==1,{q2,m0},Null[]],
  If[m3[[2]]==ny,{m1,m3},Null[]],If[m3[[1]]==nx,{m3,q3},Null[]]};
bc[0,0,1,1]:={If[m3[[1]]==nx,{m3,m2},Null[]],
  If[m3[[2]]==ny,{q1,m3},Null[]],If[m2[[2]]==1,{m2,q2},Null[]]};
bc[1,0,1,1]:={If[m3[[1]]==nx,{m3,m2},Null[]],If[m3[[2]]==ny,{q1,m3},Null[]],
  If[m0[[1]]==1,{m0,q0},Null[]],If[m0[[2]]==1,{m2,m0},Null[]]};
bc[0,1,1,1]:={If[m1[[2]]==ny,{m1,m3},Null[]],If[m1[[1]]==1,{q0,m1},Null[]],
  If[m2[[2]]==1,{m2,q2},Null[]],If[m2[[1]]==nx,{m3,m2},Null[]]};
bc[___]={};

CP$AddLine[{_,x_,x_},_]:=Null;
CP$AddLine[{c_,x_,y_},k_]:=Module[{lx=First[contl[k][x]],ly=First[contl[k][y]],a},
  If[lx<=>{},
    If[ly<=>{},
      If[Last[lx]===y,
        contl[k][x]={Append[lx,x],c};
        contl[k][y]=.,
        contl[k][Last[lx]]={a=Join[Reverse[lx],ly],c};
        contl[k][Last[a]]={Reverse[a],c};
        contl[k][x]=.;
        contl[k][y]=.],
      contl[k][y]={a=Prepend[lx,y],c};
      contl[k][Last[a]]={Reverse[a],c};
      contl[k][x]=.],
    If[ly<=>{},
      contl[k][x]={a=Prepend[ly,x],c};
      contl[k][Last[a]]={Reverse[a],c};
      contl[k][y]=.,
      contl[k][x]={{x,y},c};
      contl[k][y]={{y,x},c}]]];

CP$AddBorder[{x_,x_},_]:=Null;
CP$AddBorder[{x_,y_},k_]:=Module[{lx=contb[k][x],ly=contb[k][y],a},
  If[lx<=>{},
    If[ly<=>{},
      If[Last[lx]===y,
        contb[k][x]=Append[lx,x];
        contb[k][y]=.,
        contb[k][Last[lx]]=(a=Join[Reverse[lx],ly]);
        contb[k][Last[a]]=Reverse[a];
        contb[k][x]=.;
        contb[k][y]=.],
      contb[k][y]=(a=Prepend[lx,y]);
      contb[k][Last[a]]=Reverse[a];
      contb[k][x]=.],
    If[ly<=>{},
      contb[k][x]=(a=Prepend[ly,x]);
      contb[k][Last[a]]=Reverse[a];
      contb[k][y]=.,
      contb[k][x]={x,y};
      contb[k][y]={y,x}]]];

CP$JoinLine[{l:{x_,___,x_},c_},k_]:={k,l,c};
CP$JoinLine[{l:{x_,m___,y_},c_},k_]:=Module[{lx=contb[k][x],ly=contb[k][y],a},
  If[lx<=>{},
    If[ly<=>{},
      If[Last[lx]===y,
        contb[k][x]=Join[lx,Reverse[{x,m}]];
        contb[k][y]=.,
        contb[k][Last[lx]]=(a=Join[Reverse[lx],{m},ly]);
        contb[k][Last[a]]=Reverse[a];
        contb[k][x]=.;
        contb[k][y]=.],
      contb[k][Last[lx]]=(a=Join[Reverse[lx],{m,y}]);
      contb[k][y]=Reverse[a];
      contb[k][x]=.],
    contb[k][x]=(a=Join[{x,m},ly]);
    contb[k][Last[a]]=Reverse[a];
    contb[k][y]=.];
  Null[]];

CP$GetLine[l1_,n_,cf_]:=Module[
  {l=Extract[Delete[?contl,{{1,1},{1,-1}}],{{1,,2},{1,,1,0,1}}],
    ls,lc,ls1,k,t=Table[{k,_},{k,n}]},
  l=Thread[Partition[l,Length[l]/2]];
  l=If[contl[#2][#[[1,1]]]<=>{{}},
    If[#[[1,1]]<=>#[[1,-1]],contl[#2][#[[1,-1]]]=.];
    {##},
    Null[]]&@@[l,{1}];
  {If[cf<=>Null,
    lc=CP$JoinLine@@[l,{1}];
    {ls1,lc}=SelectCases[lc,{CP$Inside[#[[3]],#[[2]]]&,True&}][[,,{1,2}]];
    ls1=SwitchCases[ls1,t];
    ls1=Sort[#,CP$Inside[#[[2,1]],#2[[2]]]&]&/@ls1;
    ls=Extract[Delete[?contb,{{1,1},{1,-1}}],{{1,,2},{1,,1,0,1}}];
    If[ls<=>{},
      ls=Thread[Partition[ls,Length[ls]/2]];
      ls=SwitchCases[{#2,CP$ReduceLine[#]}&@@[ls,{1}],t];
      ls=Sort[#,CP$Inside[#[[2,1]],#2[[2]]]&]&/@ls;
      ls=MapThread[Join,{ls1,ls}],
      ls=ls1];
    ls=MapAt[If[~CP$Parity[#],Reverse[#],#]&,ls,{,,2}];
    lc=MapAt[If[ CP$Parity[#],Reverse[#],#]&,lc,{,2}];
    ls=Sort[CP$FindNest[lc,ls]];
    ls,Null[]],
    l}];

CP$FindNest[lc_,ls0_]:=Module[{u,p,k,l,ls=ls0},
  Scan[(
    {k,u}=#;
    With[{u1=First[u]},
      p=Position[ls[[k]],_?(CP$Inside[u1,Second[#]]&),1,1][[1,1]]];
    l=ls[[k,p,2]];
    ls[[k,p,2]]=Join[l,u,{Last[l]}])&,lc];
  Flatten[ls,1]];

CP$Parity[l_]:=With[{
  v=Complex@@[Difference[l],{1}]},
  Plus@@Arg[v/RotateRight[v]]>0];

CP$Inside[p_,l_]:=With[{
  c=Complex@@[Rest[l],{1}]-Complex@@p},
  Abs[Plus@@Arg[c/RotateRight[c]]]>Pi];

CP$ReduceLine[l_]:=Module[{dl,dl1,g},
  dl=Thread[Difference[l]];
  dl1=RotateRight/@[dl];
  g=MapThread[If[#,#2,Null[]]&,
    {dl[[2]]*dl1[[1]]-dl[[1]]*dl1[[2]],Drop[l,-1]}];
  If[g==={},{l[[1]],l[[1]]},
    Append[g,First[g]]]];

CP$PlotRange[Automatic,l_]:=MinMax[l];
CP$PlotRange[{Automatic,Automatic},l_]:=MinMax[l];
CP$PlotRange[{Automatic,max_},l_]:={Min[l],max};
CP$PlotRange[{min_,Automatic},l_]:={min,Max[l]};
CP$PlotRange[x_,_]:=x;

CP$MeshRange[Default]:={{1,nx},{1,ny}};
CP$MeshRange[x_]:=x;

CP$Color[x_]:=RGBColor[Restrict[x*3-2,0,1],Restrict[x*3-1,0,1],Restrict[x*3,0,1]];
CP$ContourColor[x_]:=RGBColor[1-Restrict[x*3-2,0,1],1-Restrict[x*3-1,0,1],1-Restrict[x*3,0,1]];

CP$NullColor[x_]:=RGBColor[Restrict[x*3-2,0,1],Restrict[x*3-1,0,1],Restrict[x*3,0,1]];

End[];

EndPackage[];

SetAttributes[
  {ColumnPlot,Plot,FitPlot,HistoPlot,ListContourPlot,ListDensityPlot},Constant];
