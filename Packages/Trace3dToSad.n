BeginPackage[Trace3dToSad`];

!
!  Package for converting Trace3D units to those used by SAD, 
!  in particular, the space charge tracking part of SAD
!  implemented in the Scheff.n package
!
!	Author	: Christopher K. Allen
!	Date	: November, 2005
!




LightSpeed = 299792458;            ! speed of light in free space (meters/sec)    
Permittivity = 8.854187817e-12;    ! Electric permittivity of free space (Farad/meter)



!-----------------------------
!
! Function ComputePerveance
!
!----------------------------
! 
!  Compute and return the generalized beam perveance for a charged particle
!    beam.  This is for space charged effects.  The generalized beam perveance for
!    continuous beams and bunched beams can be reconciled using the note below.
!
!  Note that bunch charge Q is given by
!    Q = I/f for a bunched beaml where I is the beam current and f is the RF frequency.  
!    Q = I/v for a continous beam (charge per unit length); where v = beta*c is beam velocity.
!      
!      Parameters   
!        f           RF frequency of linac (Hz)
!        Er          rest energy of beam particle (in eV)
!        W           current design energy of particle (in eV)
!        Q           bunch charge (in C)
!      
!      Return              
!        generalized beam perveance (scalar)
!    

ComputePerveance[f_, Er_, W_, Q_] := Module[
    {
    gamma,    ! relativistic factor
    vnorm,    ! velocity of beam normalized to speed of light (beta) 
    t1,       ! temporary variable
    t2,       ! temporary variable
    K         ! generalized beam perveance
    },


    ! Compute auxiliary machine and beam parameters
    gamma = 1.0 + (W / Er);
    vnorm = Sqrt[1.0 - (1.0 / (gamma * gamma))];

    ! Compute the generalized perveance
    t1 = Q/(2.0*PI*Permittivity);
    t2 = 1/(gamma*gamma*gamma*vnorm*vnorm);

    K = t1*t2/Er;

    Return[K];
];



!---------------------------
!
! Function TraceToSadCoords
!
!---------------------------
! 
! Converts phase vector values in Trace3D units to values in units 
!   used by SAD Scheff (MKS).
!   Specifically, the argument vecCoord is assumed to be in the form
! 
!      vecPhase=(x,x',y,y',dPhi,dW)
! 
!           x    in mm
!           x'   in mrad
!           y    in mm
!           y'   in mrad
!           dPhi in degrees
!           dW   in keV
!      
!       The output vector in in the following form along with the units:
!      
!           returned=(x,x',y,y',z,z')
!      
!           x  in meters
!           x' in radians
!           y  in meters
!           y' in radians
!           z  in meters
!           z' in radians
!      
!      
!      Parameters   
!        f           RF frequency of linac (Hz)
!        Er          rest energy of beam particle (eV)
!        W           current design energy of particle (eV)
!        vecCoords   coordinate phase vector in Trace3D units (as above)
!      
!      Return              
!        coordinate phase vector in MKS units
!    

TraceToSadCoords[f_, Er_, W_, vecCoords_] := Module[
  {
  lambda,   (* wavelength of RF in meters *)
  gamma,    (* relativistic factor *)
  vnorm,    (* velocity of beam normalized to speed of light (beta) *)
  dW,       (* energy difference in eV *)
  x,        (* horizontal plane displacement from sync particle *)
  xp,       (* horizontal plane normalized momemtum x'=px/p *) 
  y,        (* vertical plane displacement from sync particle *)
  yp,       (* vertical plane normalized momemtum y'=py/p *) 
  z,        (* longitudinal plane displacement form the sync particle *)
  zp        (* longitudinal plane momentum offset (also called dp) *)
  },


    ! Compute auxiliary machine and beam parameters
    lambda = LightSpeed / f;
    gamma = 1.0 + (W / Er);
    vnorm = Sqrt[1.0 - (1.0 / (gamma * gamma))];

    
    ! Tranverse coordinates - just scaling
    x  = 0.001*vecCoords[[1]];
    xp = 0.001*vecCoords[[2]];
    y  = 0.001*vecCoords[[3]];
    yp = 0.001*vecCoords[[4]];


    ! Convert the longitudinal coordinates
    z  = -( (vnorm*lambda)/360.0 )*vecCoords[[5]];

    dW = vecCoords[[6]]*1.0e+3;           ! from keV to eV
    zp = ( gamma/(gamma + 1.0) )*(dW/W);  ! to dp/p
        
    Return[{x,xp,y,yp,z,zp}];
];



!--------------------------------
!
!  Function SadToTraceCoords
!
!--------------------------------
!
!
!  Converts phase vector values in SAD (MKS) units to values in units used by Trace3D.
!  Specifically, the argument is assumed to be in the form
! 
!     vecCoords = (x,x',y,y',z,z')
! 
!      x  in meters
!      x' in radians
!      y  in meters
!      y' in radians
!      z  in meters
!      z' in radians
! 
!  The output vector in in the following form along with the units:
! 
!      returned=(x,x',y,y',dPhi,dW)
! 
!      x    in mm
!      x'   in mrad
!      y    in mm
!      y'   in mrad
!      dPhi in degrees
!      dW   in keV
! 
! 
!  Parameters
!        f           RF frequency of linac (Hz)
!        Er          rest energy of beam particle (eV)
!        W           current design energy of particle (eV)
!        vecCoord    coordinate phase vector in MKS units (as above)
! 
!  Returned Value
!       coordinate phase vector in Trace3D units
!

SadToTraceCoords[f_, Er_, W_, vecCoords_] := Module[   
    {
    lambda,   (* wavelength of RF in meters *)
    gamma,    (* relativistic factor *)
    vnorm,    (* velocity of beam normalized to speed of light (beta) *)
    dW,       (* energy difference in eV *)
    x,        (* horizontal plane displacement from sync particle *)
    xp,       (* horizontal plane normalized momemtum x'=px/p *) 
    y,        (* vertical plane displacement from sync particle *)
    yp,       (* vertical plane normalized momemtum y'=py/p *) 
    phi,      (* longitudinal plane RF phase offset form the sync particle *)
    dW        (* energy difference from that of the sync particle *)
    },

    
    ! Compute auxiliary machine and beam parameters
    lambda = LightSpeed / f;
    gamma = 1.0 + (W / Er);
    vnorm = Sqrt[1.0 - (1.0 / (gamma * gamma))];

    ! Convert the transverse coordinates
    x  = vecCoords[[1]]*1000.0;
    xp = vecCoords[[1]]*1000.0;
    y  = vecCoords[[1]]*1000.0;
    yp = vecCoords[[1]]*1000.0;
        
        
    ! Convert the longitudinal coordinates
    phi = -(360/(vnorm*lambda) )*vecCoords[[5]];
    dW  = W*( (gamma+1)/gamma )*vecCoords[[6]];   ! to energy in eV
    dW  = W*1.0e-3;                               ! to keV
        
     Return[{x,xp,y,yp,phi,dW}];
];



!-------------------------------
!
!  Function TraceToSadTransTwiss  
!
!-------------------------------
!
! Converts Twiss parameter in Trace3D units to SAD (MKS) units for the transverse phase
! planes.  Method takes the set of Twiss parameters as a vector argument 
! and returns a new vector containing the same Twiss in the different units.  The
! function is none destructive.
!
!     Parameter 	Trace3D 			SAD
!     alpha             unitless                        unitless  (no conversion)
!     beta		mm/mrad 			m/rad 
!     emittance		eff. (5xRMS) mm-mrad 		RMS m-rad
!
! 
!   Parameters 	
!        vecT3dTwiss    Twiss parameters vector {alpha, beta, emitt} in Trace3D units
! 
!   Returned Value
!                       Twiss parameter vector {alpha, beta, emitt} in SAD units
!
!

TraceToSadTransTwiss[vecT3dTwiss_] := Module[ 
    {
    alpha,              ! returned Twiss alpha value
    beta,               ! returned Twiss beta value
    emitt               ! returned emittance
    },

    alpha = vecT3dTwiss[[1]];
    beta = vecT3dTwiss[[2]];
        
    emitt = vecT3dTwiss[[3]] * (1.0e-6);   ! to m-rad
    emitt = emitt * (1.0 / 5.0);           ! to rms emittance
        
    Return[{alpha, beta, emitt}];
];    




!------------------------------
!
!  Function TraceToSadLongTwiss
!
!------------------------------
!
! Converts Twiss parameter in Trace3D units to SAD (MKS) units for the longitudinal phase
! planes.  Method takes the set of Twiss parameters as a vector argument 
! and returns a new vector containing the same Twiss in the different units.  The
! function is none destructive.
!
!     Parameter 	Trace3D 			SAD
!     alpha             unitless                        (-1)unitless  (phase lag positive)
!     beta		deg/keV 			m/rad 
!     emittance		eff. (5xRMS) deg-keV 		RMS m-rad
!
! 
!   Parameters 	
!        f              RF frequency of linac (Hz)
!        Er             rest energy of beam particle (eV)
!        W              current design energy of particle (eV)
!        vecT3dTwiss    Twiss parameters vector {alpha, beta, emitt} in Trace3D units
! 
!   Returned Value
!                       Twiss parameter vector {alpha, beta, emitt} in SAD units
!

TraceToSadLongTwiss[f_, Er_, W_, vecT3dTwiss_] := Module[
    {
    lambda,             ! wavelength of RF in meters 
    gamma,              ! relativistic factor 
    vnorm,              ! velocity of beam normalized to speed of light (beta)
    t1,                 ! temporary conversion factor
    t2,                 ! temporary conversion factor
    Cdeg,               ! emittance conversion factor
    alpha,              ! returned Twiss alpha value
    beta,               ! returned Twiss beta value
    emitt               ! returned emittance
    },


    ! Compute auxiliary machine and beam parameters
    lambda = LightSpeed / f;
    gamma = 1.0 + (W / Er);
    vnorm = Sqrt[1.0 - (1.0 / (gamma * gamma))];


    ! Compute conversion factors
    t1 = (vnorm * lambda / 360.0);
    t2 = (gamma /(gamma + 1.0)) * (1.0 / W);
    Cdeg = t1 * t2;


    ! Compute value of Twiss parameters in MKS units
    alpha = -vecT3dTwiss[[1]];
        
    beta = vecT3dTwiss[[2]] * 0.001;            ! to deg/eV
    beta = beta * t1 * (1.0 / t2);              ! to m/rad
        
    emitt = vecT3dTwiss[[3]] * 1000.0; ! to deg-eV
    emitt = emitt / 5.0;               ! to rms emittance
    emitt = emitt * Cdeg;              ! to m-rad

    Return[{alpha, beta, emitt}];
];




!-------------------------------
!
!  Function SadToTraceTransTwiss  
!
!-------------------------------
!
! Converts Twiss parameter in SAD units (MKS) to Trace3D units for the transverse phase
! planes.  Method takes the set of Twiss parameters as a vector argument 
! and returns a new vector containing the same Twiss in the different units.  The
! function is none destructive.
!
!     Parameter 	Trace3D 			SAD
!     alpha             unitless                        unitless  (no conversion)
!     beta		mm/mrad 			m/rad 
!     emittance		eff. (5xRMS) mm-mrad 		RMS m-rad
!
! 
!   Parameters 	
!        vecSadTwiss    Twiss parameters vector {alpha, beta, emitt} in SAD (MKS) units
! 
!   Returned Value
!                       Twiss parameter vector {alpha, beta, emitt} in Trace3D units
!
!

SadToTraceTransTwiss[vecTwissSad_] := Module[
    {
    alpha,              ! returned Twiss alpha value
    beta,               ! returned Twiss beta value
    emitt               ! returned emittance
    },

    alpha = vecSadTwiss[[1]];
    beta = vecSadTwiss[[2]];
        
    emit = vecSadTwiss[[3]] * (1.0e+6);     ! to mm-mrad
    emit = emit * 5.0;                      ! to effective emittance
        
    Return[{alpha, beta, emit}];
];


!------------------------------
!
!  Function SadToTraceLongTwiss
!
!------------------------------
!
! Converts Twiss parameter in SAD units (MKS) to Trac3D units for the longitudinal phase
! planes.  Method takes the set of Twiss parameters as a vector argument 
! and returns a new vector containing the same Twiss in the different units.  The
! function is none destructive.
!
!     Parameter 	Trace3D 			SAD
!     alpha             unitless                        (-1)unitless  (phase lag positive)
!     beta		deg/keV 			m/rad 
!     emittance		eff. (5xRMS) deg-keV 		RMS m-rad
!
! 
!   Parameters 	
!        f              RF frequency of linac (Hz)
!        Er             rest energy of beam particle (eV)
!        W              current design energy of particle (eV)
!        vecSadTwiss    Twiss parameters vector {alpha, beta, emitt} in SAD (MKS) units
! 
!   Returned Value
!                       Twiss parameter vector {alpha, beta, emitt} in Trace3D units
!

SadToTraceLongTwiss[f_, Er_, W_, vecSadTwiss_] := Module[ 
    {
    lambda,             ! wavelength of RF in meters 
    gamma,              ! relativistic factor 
    vnorm,              ! velocity of beam normalized to speed of light (beta)
    t1,                 ! temporary conversion factor
    t2,                 ! temporary conversion factor
    Cdeg,               ! emittance conversion factor
    alpha,              ! returned Twiss alpha value
    beta,               ! returned Twiss beta value
    emitt               ! returned emittance
    },


    ! Compute auxiliary machine and beam parameters
    lambda = LightSpeed / f;
    gamma = 1.0 + (W / Er);
    vnorm = Sqrt[1.0 - (1.0 / (gamma * gamma))];


    ! Compute conversion factors
    t1 = (vnorm * lambda / 360.0);
    t2 = (gamma /(gamma + 1.0)) * (1.0 / W);
    Cdeg = t1 * t2;

         
    alpha = -vecSadTwiss[[1]];
		
    beta = vecSadTwiss[[2]];
    beta = beta * (t2 / 1.0) / t1;  ! to deg/eV
    beta = beta * 1000.0;           ! to deg/keV

    emit = vecSadTwiss[[3]];
    emit = emit / Cdeg;             ! to deg-eV
    emit = emit * 5.0;              ! to RMS emittance
    emit = emit / 1000.0;           ! to deg-keV

    Return[{alpha, beta, emittance}];
];


Protect[ComputePerveance,TraceToSadCoords,SadToTraceCoords,TraceToSadTransTwiss,TraceToSadLongTwiss,SadToTraceTransTwiss,SadToTraceLongTwiss];
EndPackage[];