(* ListPlot V1.1.1k64 7/31/2017 *)

Off[General::unprotconst];
Unprotect[Scale,Tags,Text,Above,Below,Right,Left];
On[General::unprotconst];
SetAttributes[{Graphics,AspectRatio,PlotRange,
  PlotRegion,PlotLabel,TickSize,Tags,Anchor,TickColor,
  PlotJoined,StepRatio,PointSize,PointSymbol,PlotColor,Dashing,
  ErrorBarTickSize,ErrorBarThickness,ErrorBarColor,PointColor,PointBorderColor,PointTags,
  LineTags,Thickness,FrameTicks,Initialize,FrameLabel,DisplayFunction,
  DataRange,Reference,FillColor,Arrow,ArrowShape,Clip,FrameUnitLabel,
  Orientation,Line,Point,Rectangle,Circle,Polygon,Hook,Linear,Bar,Text,
  TextSize,TextRotate,TextAlign,Scaled,GridLines,WindowScaled,CanvasScaled,
  RectScaled,AboveTags,BelowTags,Right,Left,Above,Below,
  TextCases,TextPosition,Vertical,Alignment,Legend,
  LegendRaise,LegendBG,
  Scale,Weight,FrameClick,InfoBind,TickFont,RemoveOverlap,FrameColor,
  FontScale,TickFontScale,FrameFontScale,LegendFontScale,TitleFontScale,
  Major,Minor,Both,Ticks,BelowFrame},Constant];

Graphics$Options=AspectRatio|FrameLabel|PlotRange|GridLines|Alignment|DataRange|
  PlotRegion|PlotLabel|FrameTicks|TickSize|TickFont|Tags|Background|Frame|FrameClick|
    InfoBind|FrameUnitLabel|FontScale|TickFontScale|FrameFontScale|LegendFontScale|
      TitleFontScale|FrameColor|TickColor|LegendBG|LegendRaise|BelowFrame;

Plot$DefaultColor={"royal blue","tomato3","forest green","dark goldenrod",
      "dodger blue","orange3","blue violet","lime green","hot pink","yellow4"};
Plot$DefaultSymbol={"CI","LT","RT","DT","UT","SQ","DI","PL","TI"};
Plot$DefaultDashing={{1},{0.75,0.25},{0.4, 0.15},{0.2,0.1},{0.1,0.08},
  {0.8,0.08, 0.08, 0.08},{0.4,0.08,0.08,0.08}};
LP$Ldef={PointSymbol->Plot$DefaultSymbol,
  PointSize->1,
  PointColor->Plot$DefaultColor,
  PlotColor->Plot$DefaultColor,
  PointBorderColor->Plot$DefaultColor,
  PlotJoined->False,
  ErrorBarTickSize->1,ErrorBarThickness->1,ErrorBarColor->Default,
  Dashing->Plot$DefaultDashing,
  Thickness->1,Legend->False};
LP$Lopt=LP$Ldef[[,1]];

With[{LP$def={Scale->{Linear,Linear},PlotRange->{Automatic,Automatic},
  AspectRatio->Automatic,PlotJoined->False,StepRatio->1,
  PointSize->1,PointSymbol->"1O",Plot->True,Frame->True,
  PlotColor->"Black",Dashing->{1},Tags->False,TickFont->Default,
  TickSize->Automatic,TickFont->Default,PlotRegion->{{0,1},{0,1}},
  ErrorBarTickSize->1,ErrorBarThickness->1,ErrorBarColor->Default,PointColor->"forest green",
  PointBorderColor->Automatic,GridLines->{Automatic,Automatic},
  PointTags->Null,LineTags->Null,Thickness->1,Arrow->Null,ArrowShape->Null,
  FrameTicks->{True,True,Ticks,Ticks},Initialize->True,
  FrameLabel->{"","","",""},FrameUnitLabel->{},FrameColor->"black",
  TickColor->Null,
  LegendRaise->False,LegendBG->Null,BelowFrame->False,
  FontScale->1,TickFontScale->1,FrameFontScale->1,LegendFontScale->1,
  TitleFontScale->1,
  DisplayFunction:>$DisplayFunction,RemoveOverlap->"",
  PlotLabel->"",Prolog->{},Epilog->{},Legend->False,
  Background->"#ffffff"},
  r=(Rule|RuleDelayed)[Graphics$Options,_]},

  FillList[a_,n_]:=Module[{l=Length[a]},
    If[l,
      Take[Flatten[Table[a,{Ceiling[n/l]}],1],n],
      Table[a,{n}]]];
 
  LPOptions[n_,opt_]:=Module[{l=LP$Lopt/.opt},
    Thread[LP$Lopt->(FillList[#,n]&/@l)]];

  LPOption1[lop_,k_]:=MapAt[#[[k]]&,lop,{,2}];

  ListPlot[ll_List,opt___]:=Module[
    {op,ld,d,sc,pg,eg,pj,of,in,pr,pl,body,gopt,dr,g,la,lop,n},
    If[Length[Dimensions[ll[[1]]]]==2,
      op=Override[{opt},LP$Ldef,LP$def];
      n=Length[ll];
      lop=LPOptions[n,op];
      pr=PlotRegion/.op;
      g=Table[
        ListPlot[ll[[k]],DisplayFunction->Identity,Null@@Override[LPOption1[lop,k],op]],{k,n}],

      op=Override[{opt},LP$def];
      If[Length[ll]>0,
        d=Length[First[ll]];
        {ld,dr}=Switch[d,
          0,
          {Thread[{Range[Length[ll]],ll}],{{1,Length[ll]},MinMax[ll]}},
          2,
          {ll,MapThread[MinMax,ll]},
          3,
          la=MapAt[Abs,Thread[ll],{3}];
          {Thread[{First[la],Second[la],Table[0,{Length[ll]}],Third[la]}],
            {MinMax[First[la]],
              {Min[Second[la]-Third[la]],Max[Second[la]+Third[la]]}}},
          4,
          la=MapAt[Abs,Thread[ll],{{3},{4}}];
          {ll,
            {{Min[First[la]-Third[la]],Max[First[la]+Third[la]]},
              {Min[Second[la]-la[[4]]],Max[Second[la]+la[[4]]]}}},
          _,
          Message[ListPlot::wrongsize];
          Return[]],
        {ld,dr}={{},{{0,1},{0,1}}}];
      ({sc,pg,eg,pj,of,in,pr,pl}={Scale,Prolog,Epilog,PlotJoined,DisplayFunction,
        Initialize,PlotRegion,Plot}/.op);
      sc=Flatten[{Linear,sc}][[{-2,-1}]];
      gopt=Override[Scale->sc,
        Cases[op,r,1],DataRange->dr];
      body=Flatten[
        {pg,
          Switch[pj,
            False,
            Point[ld,SetOption[{PointSize,PointColor,PointSymbol,PlotColor,
              PointBorderColor,
              ErrorBarTickSize,ErrorBarThickness,ErrorBarColor,PointTags,Legend},op]],

            Step|True,
            Line[ld,SetOption[
              {Plot,PointSize,PointColor,PointBorderColor,PointSymbol,PointTags,
	        PlotJoined,StepRatio,Thickness,PlotColor,Dashing,LineTags,
                ErrorBarTickSize,ErrorBarThickness,ErrorBarColor,Legend,Arrow,ArrowShape},op]],

	    _, (* Unsupported *)],
          eg}];
      g=Graphics[body,gopt];
      If[of<=>Identity && None<=>of<=>Null,
        Show[g,
          Initialize->in,
          PlotRegion->pr
          ]];

      If[Length[ll]>0,
        d=Length[First[ll]];
        {ld,dr}=Switch[d,
          0,
          {Thread[{Range[Length[ll]],ll}],{{1,Length[ll]},MinMax[ll]}},
          2,
          {ll,MapThread[MinMax,ll]},
          3,
          la=MapAt[Abs,Thread[ll],{3}];
          {Thread[{First[la],Second[la],Table[0,{Length[ll]}],Third[la]}],
            {MinMax[First[la]],
              {Min[Second[la]-Third[la]],Max[Second[la]+Third[la]]}}},
          4,
          la=MapAt[Abs,Thread[ll],{{3},{4}}];
          {ll,
            {{Min[First[la]-Third[la]],Max[First[la]+Third[la]]},
              {Min[Second[la]-la[[4]]],Max[Second[la]+la[[4]]]}}},
          _,
          Message[ListPlot::wrongsize];
          Return[]],
        {ld,dr}={{},{{0,1},{0,1}}}];
      ({sc,pg,eg,pj,of,in,pr,pl}={Scale,Prolog,Epilog,PlotJoined,DisplayFunction,
        Initialize,PlotRegion,Plot}/.op);
      sc=Flatten[{Linear,sc}][[{-2,-1}]];
      gopt=Override[Scale->sc,
        Cases[op,r,1],DataRange->dr];
      body=Flatten[
        {pg,
          Switch[pj,
            False,
            Point[ld,SetOption[{PointSize,PointColor,PointSymbol,PlotColor,
              PointBorderColor,
              ErrorBarTickSize,ErrorBarThickness,ErrorBarColor,PointTags,Legend},op]],

            Step|True,
            Line[ld,SetOption[
              {Plot,PointSize,PointColor,PointBorderColor,PointSymbol,PointTags,
	        PlotJoined,StepRatio,Thickness,PlotColor,Dashing,LineTags,
                ErrorBarTickSize,ErrorBarThickness,ErrorBarColor,Legend,Arrow,ArrowShape},op]],

	    _, (* Unsupported *)],
          eg}];
      g=Graphics[body,gopt]];
    If[of<=>Identity && None<=>of<=>Null,
      Show[g,
        Initialize->in,
        PlotRegion->pr
        ]];
    g]];

SetOption[opts_,r_]:=Thread[opts->(opts/.r)];
!SetOption[opts_,r_]:=Cases[r,p:((Alternatives@@opts)->_),1];

ListPlot::highD="List in 1, 2, or 3D is required";
ListPlot::wrongsize="List of less than 5 reals is required";

WindowBackground=Background;

Show[g__]:=Show1$[True,Automatic,g];

With[{
  def={PlotRange->Automatic,
    PlotRegion->{{0,1},{0,1}},
    DataRange->{{1E100,-1E100},{1E100,-1E100}}},
  def0={PlotRange->Default,
    PlotRegion->{{0,1},{0,1}},
    DataRange->{{1E100,-1E100},{1E100,-1E100}}}},

  Show1$[ini_,rect_,g__]:=Module[
    {{gl,df,init,opt,rem}=SwitchCases[Flatten[{g}],
      {_Graphics,(Rule|RuleDelayed)[DisplayFunction,_],
        (Rule|RuleDelayed)[Initialize,_],
	(_Rule|_RuleDelayed),
	_}],
      pr,dr,prl,drl,pr0,prg},
    gl00=gl=Replace[#,{Graphics[x_,y___]:>Graphics[x,Flatten[{y}]]}]&/@gl;
    df=DisplayFunction/.df/.DisplayFunction:>$DisplayFunction/.Default:>$DisplayFunction;
    opt=Override[opt,gl[[1,2]],def0];
    If[df<=>Identity && None<=>df<=>Null,
      If[ini && df===CanvasDrawer,
        The$CanvasObject@AllGraphics={gl,opt}];
      {pr0,prg}={PlotRange,PlotRegion}/.opt;
      prl=PRM1$$/@(Prepend[(PlotRange/.Second[#]/.def0)&/@gl,pr0]/.Default:>Null[]);
      pr=If[prl==={},
        {{Automatic,Automatic},{Automatic,Automatic}},
        First[prl]];
      drl=Thread[Partition[Flatten[(DataRange/.Second[#]/.def0)&/@gl],4]];
      dr={{Min[drl[[1]]],Max[drl[[2]]]},{Min[drl[[3]]],Max[drl[[4]]]}};
      opt=Override[{PlotRange->pr,DataRange->dr,PlotRegion->prg},
        opt];
      init=Initialize/.init/.Initialize->True;
      StandardForm[
        df[opt,gl[[1,1]],init,True,rect,Length[gl]==1,ini];
        Do[
          df[Override[opt,gl[[i,2]]],gl[[i,1]],init,False,
            rect,i==Length[gl],ini],
          {i,2,Length[gl]}]];
      If[df===CanvasDrawer,
        After[0,The$CanvasObject@AdjustLegend[]]]
      ];
    Append[gl,opt]
    ]];

PRM1$$[Automatic]={{Automatic,Automatic},{Automatic,Automatic}};
PRM1$$[{Automatic,Automatic}]={{Automatic,Automatic},{Automatic,Automatic}};
PRM1$$[y:{_Real,_Real}]:={{Automatic,Automatic},y};
PRM1$$[{Automatic,y:{_,_}}]:={{Automatic,Automatic},y};
PRM1$$[{x:{_,_},Automatic}]:={x,{Automatic,Automatic}};
PRM1$$[x_]:=x;

SetAttributes[
  {ListPlot,SetOption,PRM1$$,
    ListPlotMessage,Show,
    Show1$,Graphics$Options,
    WindowBackground},Constant];
