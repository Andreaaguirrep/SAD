BeginPackage[Scheff`];


(* ScheffSimulate

Simulate a predefined beamline in SAD.  The simulation has space charge
effects given by a initial value for the generalized beam perveance.

NOTES:
This function calls Emittance[] to generate all the element transfer
matrices.  In the current configuration the SAD simulation must be
set to RING rather than TRPT to extract physical quantites, rather than
scaled ones.  This is confusing and should be addressed in the future.

Another way to do this is to set the flag "NOCOD" in the SAD deck.

Arguments:
  K0      - initial generalized beam perveance
  sig0    - initial second-order momement matrix, or beam matrix
  h0      - initial step size to start adaptive stepping
  errSoln - error tolerance in the solution (from  adaptive stepping)
  hslack - slack percentage where h can vary before we actually change it
  hmax - optional argument specifying maximum integraion step size (=0 if not used)

Returned value:
  lstPos   - List of element entrance positions
  lstGamma - list of relativistic factors at element entrances
  lstSig   - list of beam matrices at all the element entrance locations
*)

ScheffSimulate[K0_, sig0_, h0_:0.01, errSoln_:1.0e-10, hslack_:0.05, hmax_:0.0] := Module[
  {
  lstLen,      ! list of element lengths
  lstGamma,    ! returned value - list of gamma values 
  lstTm,       ! list of individual element transfer matrices 
  lstPos,      ! returned value - list of element positions
  lstSig       ! returned value - list of beam matrices
  },

  !Get beam parameters 
  lstLen = LINE["L"];
  {lstPos, lstGamma, lstTm} = GetBeamlineElementData[];

  If [K0 > 0.0,
    lstSig = ScheffPropagate[K0, sig0, lstLen, lstGamma, lstTm, h0, errSoln, hslack, hmax];,
    lstSig = ScheffZeroPropagate[sig0, lstTm];
  ];

  Return[{lstPos, lstGamma,  lstSig}];
];
  



(* ScheffPropagate

Propagate an RMS envelope matrix through a beamline with space charge.
The beamline is described by a list of transfer matrices along with a list
of their lengths.  The acceleration
is described by the list of relativistic gamma values at the elements.
The space charge is described by the generalized beam perveance which 
is then adjusted at each beam element location using the gamma values.

Arguments:
  K0 - initial generalized beam perveance
  sig0 - initial second-order moment matrix describing the beam
  LL - list of beamline element lengths
  GL - list of the relativistic gamma at each beamline element
  TL - list of transfer matrices representing the beamline
  h0 - current integration step size
  errSoln - error tolerance in the solution (for adaptive stepping)
  hslack - slack percentage where h can vary before we change it
  hmax - maximum integration step size (=0 if unused)

Returned value
  sigList - list of beam matrices at each beamline element
*)

ScheffPropagate[K0_, sig0_, LL_, GL_, TL_, h0_, errSoln_, hslack_, hmax_] := Module[
  {
  dims,    (* dimensions of the transfer matrix list *)
  nElems,  (* number of beamline elements *)
  C,       (* space charge constant for current element *)
  K,       (* generalized beam perveance for current element *)
  L,       (* length of current element *)
  gam0,    (* initial gamma *)
  gam,     (* current gamma *)
  gam2,    (* current gamma squared *)
  n,       (* element loop index *)
  T,       (* current transfer matrix *)
  sig,     (* current beam matrix *)
  sigList  (* sigmas at the element locations - returned value*)
  },


  ! Get the number of elements 
  dims = Dimensions[TL];
  nElems = dims[[1]];


  ! Get the space charge constant 
  gam = GL[[1]];
  gam2 = gam*gam;

  C = K0*gam*(gam2 - 1.0);


  ! Set up the propagation loop
  h = h0;
  sig = sig0;
  sigList = {sig};
  For[n=1, n<=nElems, n++,    ! Propagate through each element

    gam = GL[[n]];
    L = LL[[n]];
    T = TL[[n]];
      
!    Print['n = ', n];
!    Print['h = ', h];
!    Print['L = ', L];

    gam2 = gam*gam;
    K = C/(gam*(gam2-1.0));

    {h, sig} = ScheffPropElem[K, gam, L, T, sig, h, errSoln, hslack, hmax];

    sigList = Append[sigList,sig];
  ];

  Return[sigList];
];




(* ScheffZeroPropagate

Propagate an RMS envelope matrix through a beamline without space charge.
The beamline is described by a list of transfer matrices.

This ia meant as a routine for testing the space charge routines.

Arguments:
  sig0 - initial second-order moment matrix describing the beam
  BL - list of transfer matrices representing the beamline

Returned value
  sigList - list of beam matrices at each beamline element
*)

ScheffZeroPropagate[sig0_, BL_] := Module[
  {
  dims,		! dimensions of the transfer matrix list
  nElems,	! number of beamline elements
  n,		! loop control (current beamline element)
  F,		! current transfer matrix
  Ft,		! transpose of transfer matrix
  sig,		! current beam second-order moment matrix
  sigList	! list of beam moment matrices 
  },

  dims = Dimensions[BL];
  nElems = dims[[1]];

  sig = sig0;
  sigList = {sig};
  For[n=1, n<=nElems, n++,
    F = BL[[n]];
    Ft = Transpose[F];
    sig = F.sig.Ft;
    sigList = Append[sigList,sig];
  ];

  Return[sigList];
];



(* ScheffPropElem


	Author:		Christopher K. Allen
	Created:	March, 2005

Propagates a beam through a beamline element while including space charge. 
The beam is represented by the 6x6 second-order moment matrix and the
element is represented by a 6x6 transfer matrix.  Note that this is 
essentially an RMS envelope simulation including the first-order effects of
space charge.

Note that the relativistic factor is assumed to be constant throughout
the element propagation, likewise with the beam perveance K (which
depends upon gamma and beta).  This condition should not present a 
problem because most acccelerating elements are represented by a
zero-length element which provide a "kick" to the beam.  In a zero-
length element no space charge effects can develope.

Arguments:
  K   - generalized beam perveance, as defined by Allen and Pattengale
  gam - relativistic factor
  L   - length of the beamline elment
  T   - transfer matrix for the WHOLE beamline element
  sig - RMS envelope matrix 
  h   - current step size
  errSoln - error tolerance in the solution
  hslack - slack percentage where h can vary before we change it
  hmax 	  - maximum step sizes to propagate sig (=0 if not used)

Returned value:
  hnew - new value of step size
  sigP - propagated beam matrix at end of element
*)


ScheffPropElem[K_, gam_, L_, T_, sig_, h0_, errSoln_, hslack_, hmax_] := Module[
  {
    h,   ! current step size
    ha,  ! current step size used to compute the external force matrices F1, F2
    hnew,! new step size 
    s,   ! current position within element 
    A,   ! beamline element generator matrix 
    F1,  ! current element transfer matrix for length h
    F2,  ! current element transfer matrix for length h/2
    Tt,  ! transpose of T 
    sig1,! propagated sigma matrix for one step of length h 
    sig2,! propagated sigma matrix for two steps of length h/2 
    sigP ! propagated beam matrix 
  },


  ! Check for "minus offset" element - throw it away if so
  If[ L < 0.0, 
    h = h0;
    Return[{h,sig}];
    , 
  ];


  ! Check for zero-length element
  If[ L == 0.0, 
    Tt = Transpose[T];

    sigP = T.sig.Tt;
    h    = h0;
    Return[{h,sigP}];
    ,
  ];
   

  ! Compute the generator matrix for the beamline element 
  A = (1.0/L)*MatrixLog[T];


  ! Initialize integration loop
  s  = 0.0;
  ha = 0.0;
  h  = h0;
  sigP = sig;

  While[ s < L,


    ! Make sure we do not use a larger step then hmax
    If[ ((hmax<>0.0) && (h > hmax)), h = hmax;, ];

    ! Make sure we do not step past the element exit
    If[ (s + h) > L, h = L - s;, ];


    ! Check if h () ha
    !   If so then we have to compute the new force matrices F1 and F2
    !   If the are the same we can continue to use the same matrices
    If[ h <> ha,
        ha = h;
        F2 = MatrixExp[(ha/2.0)*A];
        F1 = F2.F2;
        ,
    ];
    
    ! Compute sig1
    sig1 = StepSigmaMatrix[h, K, gam, F1, sigP];


    ! Compute sig2
    sig2 = StepSigmaMatrix[h/2, K, gam, F2, sigP];
    sig2 = StepSigmaMatrix[h/2, K, gam, F2, sig2];


    ! Compute new step size
    hnew = CompStepSize[h, sig1, sig2, errSoln, hslack];
    
    ! Check if this was a valid step
    !   If so, update sigma matrix, move by distance h
    !   If not, we have to re-step with smaller hnew
    If[ hnew >= h,                   
        sigP = (4.0/3.0)*sig2 - (1./3.0)*sig1;   ! "internal extrapolation"
        s = s + h;
        ,
    ];

    h = hnew;
  ];

  Return[ {h,sigP} ];
];


!---------------------------
!
!  FUNCTION StepSigmaMatrix
!
!---------------------------
!
! Steps the moment matrix sigma a prescribed distance given by
! the argument 'h'.  The step includes the space charge force as
! well as the force due to the beamline element, which is represented
! by its generator matrix A given as an argument.
!
!	Author	: Christopher K. Allen
!	Date	: December, 2005
!
! Arguments:
!  h	- integration step length
!  K 	- generalized beam perveance
!  gam	- relativistic factor
!  Fa	- external force matrix of current beamline element
!  sig  - beam second-order moment matrix
!
! Returned Value:
!  sigP	- the new value of the moment matrix
!

StepSigmaMatrix[h_, K_, gam_, Fa_, sig_] := Module[
    {
    Id,         ! identity matrix
    B,		! space charge generator matrix
    Fsc,        ! force matrix for space charge
    F, 		! matrix including both external forces and  space charge
    Ft,		! transpose of force matrix
    sigP	! new moment matrix
    },


    ! Compute the space charge force matrix
    Id  = IdentityMatrix[6];
    B   = ScheffGenerator2[K, gam, sig];

    Fsc = Id + 0.5*h*B;


    ! Build the total force matrix 2nd order accurate
    F  = Fsc.Fa.Fsc;
    Ft = Transpose[F];

    sigP = F.sig.Ft;

    Return[sigP];
];


!------------------------------
!
!  FUNCTION CompStepSize  
!
!------------------------------
!
! Computes the new step size given the results 'sig1' of a single step of
! size 'h' and a double step 'sig2' of size 'h/2'.  The new step size is
! computed to be as large as possible while  maintaining the given error 
! tolerance 'errTol'.  We are assuming second order accuracy in the stepping.
!
! Arguments:
!  h	- current step size
!  sig1 - moment matrix from a single step of length h
!  sig2 - moment matrix from a double step of length h/2
!  errSoln - residual error tolerance parameter (solution accuracy)
!  hslack  - slack percentage where h can vary before we change it
!
! Returned Value:
!   hnew  - new step size
!
!	Author	: Christopher K. Allen
!	Date	: December, 2005
!

CompStepSize[h_, sig1_, sig2_, errSoln_, hslack_] := Module[
    {
    Del,	! difference between sig1 and sig2
    d,		! l2 distance between sig1 and sig2
    expFac,	! expansion (or contraction) factor for step size
    hnew	! new step size
    },


    ! Compute the error between solutions steps
    Del = sig1 - sig2;
    d   = Sqrt[ MatrixNorm2[Del] ];


    ! Compute the expansion/contraction factor and update hnew
    expFac = Power[ (errSoln/d), 1.0/3.0];
    hnew   = h*expFac;


    ! If hnew isn't much different, don't change it
    If[ Abs[(hnew - h)/h] < hslack, 
        hnew = h;,
    ];       

    Return[ hnew ];
];

 
(* ScheffGenerator1

Compute and return the generator matrix for the given beam matrix and 
generalized beam perveance.  This is the infinitesimal generator 
matrix accounting for the single particle motion due to space charge
for the beam envelopes sig.  By exponentiating this matrix you get
the flow and consequently the space charge transfer matrix.

Arguments:
  K - generalized beam perveance
  gam - the current relativistic factor
  sig - 6x6 matrix of second-order moments

Returned value:
  B - Generator matrix for space charge
*)

ScheffGenerator1[K_, gam_, sig_] := Module[
  {
  SanHanRootGo = 11.180339887498948482045868343656,
  Xi = 1,  (* index of x configuration plane *)
  Yi = 3,  (* index of y configuration plane *)
  Zi = 5,  (* index of z configuration plane *)
  C,       (* space charge constant *)
  G,       (* gamma transformation matrix *)
  Gt,      (* transpose of G - same as G, it's diagonal*)
  Ginv,    (* inverse of G *)
  D,       (* decoupled beam matrix *)
  R,       (* rotation matrix in SO(6) that decouples sig *)
  Rt,      (* transpose of R *)
  sigG,    (* gamma transformmed beam matrix *)
  X2,      (* <x^2> - x RMS envelope squared *)
  Y2,      (* <Y^2> - y RMS envelope squared *)
  Z2,      (* <Z^2> - z RMS envelope squared *)
  dpx,     (* momentum impulse in x plane *)
  dpy,     (* momentum impulse in y plane *)
  dpz,     (* momentum impulse in z plane *)
  B        (* generator matrix *)
  },

  C = (K/2.)/(SanHanRootGo);


  ! Decouple the beam ellispoid in configuration space

  ! First step, convert to primed coordinates (from d/dp)
  G = IdentityMatrix[6];
  G[[5,5]] = gam;
  G[[6,6]] = 1.0/gam;

  Ginv = IdentityMatrix[6];
  Ginv[[5,5]] = 1/gam;
  Ginv[[6,6]] = gam;

  sigG = G.sig.G;

  ! Get the block diagonalized beam matrix and rotation matrix that does it
  {D, R} = ScheffDecoup[sigG];

  Rt = Transpose[R];


  !  Built the generator matrix 
  X2 = D[[Xi,Xi]];  ! RMS envelope squared
  Y2 = D[[Yi,Yi]];  ! RMS envelope squared
  Z2 = D[[Zi,Zi]];  ! RMS envelope squared

  dpx = C*EllipticRd[Y2, Z2, X2]*gam;
  dpy = C*EllipticRd[Z2, X2, Y2]*gam;
!  dpz = C*EllipticRd[X2, Y2, Z2]*gam*gam;
  dpz = C*EllipticRd[X2, Y2, Z2]*gam;


  B = {{  0, 0, 0,   0, 0,   0},
       {dpx, 0, 0,   0, 0,   0},
       {  0, 0, 0,   0, 0,   0},
       {  0, 0, dpy, 0, 0,   0},
       {  0, 0, 0,   0, 0,   0},
       {  0, 0, 0,   0, dpz, 0}
    };


  ! Rotate back then convert back to momentum coordinates
  B = Ginv.R.B.Rt.G;
!  B = Ginv.Rt.B.R.G;


  Return[B];
];


(* ScheffGenerator2

Compute and return the generator matrix for the given beam matrix and 
generalized beam perveance.  This is the infinitesimal generator 
matrix accounting for the single particle motion due to space charge
for the beam envelopes sig.  By exponentiating this matrix you get
the flow and consequently the space charge transfer matrix.

Arguments:
  K - generalized beam perveance
  gam - the current relativistic factor
  sig - 6x6 matrix of second-order moments

Returned value:
  B - Generator matrix for space charge
*)

ScheffGenerator2[K_, gam_, sig_] := Module[
  {
  SanHanRootGo = 11.180339887498948482045868343656,
  Xi = 1,  (* index of x configuration plane *)
  Yi = 3,  (* index of y configuration plane *)
  Zi = 5,  (* index of z configuration plane *)
  ct,       (* space charge constant *)
  cl,       (* space charge constant *)  
  g2,      (* gamma squared *)
  G,       (* gamma transformation matrix *)
!  Gt,      (* transpose of G - same as G, it's diagonal*)
!  Ginv,    (* inverse of G *)
  D,       (* decoupled beam matrix *)
  R,       (* rotation matrix in SO(6) that decouples sig *)
  Rt,      (* transpose of R *)
  r,       (* 3x3 submatrix of R contained in SO(3) *)
  rt,      (* transpose of r *)
  Em,      (* diagonal electric field moment matrix *)
  A,       (* force coefficient matrix *)
  sigG,    (* gamma transformmed beam matrix *)
  X2,      (* <x^2> - x RMS envelope squared *)
  Y2,      (* <Y^2> - y RMS envelope squared *)
  Z2,      (* <Z^2> - z RMS envelope squared *)
!  dpx,     (* momentum impulse in x plane *)
!  dpy,     (* momentum impulse in y plane *)
!  dpz,     (* momentum impulse in z plane *)
  B        (* generator matrix *)
  },

  g2 = gam*gam;
  ct = (K/2.)/(SanHanRootGo);
  cl = gam*g2*ct;


  ! First step, convert to primed coordinates (from d/dp)
  G = IdentityMatrix[6];
  G[[5,5]] = gam;
  G[[6,6]] = 1.0/gam;

  sigG = G.sig.G;

  ! Get the block diagonalized beam matrix and rotation matrix that does it
  {D, R} = ScheffDecoup[sigG];

  Rt = Transpose[R];


  ! Get the submatrix
  r = IdentityMatrix[3];
  r[[1,1]] = R[[Xi,Xi]];  r[[1,2]] = R[[Xi,Yi]];  r[[1,3]] = R[[Xi,Zi]];
  r[[2,1]] = R[[Yi,Xi]];  r[[2,2]] = R[[Yi,Yi]];  r[[2,3]] = R[[Yi,Zi]];
  r[[3,1]] = R[[Zi,Xi]];  r[[3,2]] = R[[Zi,Yi]];  r[[3,3]] = R[[Zi,Zi]];


  rt = Transpose[r];
  

  !  Built the generator matrix
  X2 = D[[Xi,Xi]];  ! RMS envelope squared
  Y2 = D[[Yi,Yi]];  ! RMS envelope squared
  Z2 = D[[Zi,Zi]];  ! RMS envelope squared

  Em = IdentityMatrix[3];
  Em[[1,1]] = EllipticRd[Y2, Z2, X2];
  Em[[2,2]] = EllipticRd[Z2, X2, Y2];
  Em[[3,3]] = EllipticRd[X2, Y2, Z2];

  A = r.Em.rt;

  B = {{       0,        0,        0,        0,        0,        0},
       {ct*A[[1,1]],     0, ct*A[[1,2]],     0, ct*A[[1,3]],     0},
       {       0,        0,        0,        0,        0,        0},
       {ct*A[[2,1]],     0, ct*A[[2,2]],     0, ct*A[[2,3]],     0},
       {       0,        0,        0,        0,        0,        0},
       {cl*A[[3,1]],     0, cl*A[[3,2]],     0, cl*A[[3,3]],     0}
  };


  Return[B];
];



(*  ScheffDecoup

Removes any spatial coupling in the beam matrix.  We perform Jacobi
rotations of the beam matrix sig until the coupling between configuration
planes x,y,z is neglible (to machine accuracy).  Thus, the resulting beam
matrix maintains its (hyper)volume in 6D phase space but is now aligned to
the coordinate axes. 

Arguments:
  sig - 6x6 matrix of second order moments or "beam matrix"

Returned values {sigD, R}:
  sigD - 6x6 decoupled beam matrix
  R    - rotation matrix in SO(6) which decouples sig; sigD = R.sig.R'
         where R' is R transpose
*)

ScheffDecoup[sig_] := Module[
  {
  i,       ! iteration counter - not important
  sigD,    ! returned value - the decoupled beam matrix
  R,       ! returned value - the rotation matrix that decoupled the beam matrix
  A,       ! current Jacobi matrix
  At       ! transpose of A
  },

!  Print['In ScheffDecoup'];

  R = IdentityMatrix[6];
  sigD = sig;

  i = 0;
  While[ True, 
    A = ScheffDecoupRotMatrix[sigD];
    
    If[ MatrixQ[A] == False,    ! Returned value was null
      Break[];                  !   we are done - no significant coupling
    ];

    At = Transpose[A];
    sigD = At.sigD.A;
    R = R.A;
    i = i + 1;

!    Print['iteration i = ', i];
!    Print['sig  = ', sig];
!    Print['sigD = ', sigD];
  ];

  Return[ {sigD, R} ];
 
];




(* ScheffDecoupRotMatrix

This routine finds the largest coupling in the beam matrix (sigma matrix)
between any of the three (3) configuration planes.  If there is
coupling (an non-zero off-diagonal in the xy,xz, or yz position) then
we return the rotation matrix R in SO(3) embedded in SO(6) that zeros 
that coupling (off diagonal element).

Note that our embedding of SO(3) in SO(6) insures that the momentum 
coordinates are properly rotated.

Arguments:
  sig - the 6x6 matrix of second-order moments, or "beam matrix"

Return:
  R - 6x6 matrix in SO(6) that zeros the largest coupling element in sig
      Returns the null list if there is no SIGNIFICANT coupling
*)
  

ScheffDecoupRotMatrix[sig_] := Module[
  {
  epsilon = 1.0e-6,
  oneDeg = 0.017453292519943295769236907684886,

  Xi = 1,  (* index of x coordinate in phase space *)
  Yi = 3,  (* index of y coordinate in phase space *)
  Zi = 5,  (* index of z coordinate in phase space *)

  resoln=5,(* phase plane coupling resolution = oneDeg/resoln *)
  cxy,     (* normalized coupling term in x-y *)
  cxz,     (* normalizedcoupling term in x-z *)
  cyz,     (* normalizedcoupling term in y-z *)
  cMax,    (* maximum value of all coupling terms *)

  i,       (* row index of maximum coupling term *)
  j,       (* column index of maximum coupling term *)
  x,       (* ArcTan denominator *)
  y,       (* ArcTan numerator *)
  ang,     (* rotation angle in SO(3) *)
  s,       (* Sin[ang] *)
  c,       (* Cos[ang] *)
  R        (* rotation matrix - returned value *)
  },

 (* Determine the largest coupling between planes *)

  cxy = sig[[Xi,Yi]]^2/(sig[[Xi,Xi]]*sig[[Yi,Yi]]);
  cxz = sig[[Xi,Zi]]^2/(sig[[Xi,Xi]]*sig[[Zi,Zi]]);
  cyz = sig[[Yi,Zi]]^2/(sig[[Yi,Yi]]*sig[[Zi,Zi]]);

!  Print['cxy = ',cxy];
!  Print['cxz = ',cxz];
!  Print['cyz = ',cyz];

  cMax = Max[{cxy, cxz, cyz}];

  If[ cMax < epsilon, Return[]];

!  Print['cMax = ', cMax];

  Which[ cxy == cMax, 
           i = Xi; 
           j = Yi;,

         cxz == cMax,  
           i = Xi; 
           j = Zi;,

         cyz == cMax, 
           i = Yi; 
           j = Zi;
  ];

!  Print['i = ', i];
!  Print['j = ', j];


 (* Compute the orthogonal matrix that would rotate out the largest coupling *)

  y = 2.0 sig[[i,j]];
  x = sig[[j,j]] - sig[[i,i]];

!  Print['x = ', x];
!  Print['y = ', y];

  ang = 0.5*ArcTan[x,y];
  If [ang > Pi/4., ang = ang - Pi/2.];
  If [ang <-Pi/4., ang = ang + Pi/2.];

!  Print['ang = ',ang];

  If[ Abs[ang] < oneDeg/resoln, Return[] ];

  R = IdentityMatrix[6];

  s = Sin[ang];
  c = Cos[ang];

  R[[i,i]] = c;
  R[[i+1,i+1]] = c;
  R[[i,j]] = s;
  R[[i+1,j+1]] = s;
  R[[j,i]] = -s;
  R[[j+1,i+1]] = -s;
  R[[j,j]] = c;
  R[[j+1,j+1]] = c;

  Return[R];
];



!----------------------------------
!
!  FUNCTION GetBeamlineElementData  
!
!----------------------------------
!
!  Returns information for each element in a beamline.
!    In particular we return the position of each element entrance,
!    the relativilistic factor at the entrace of each element, and
!    the transfer matrix of each beamline element.
!     in the beamline.
!
!    Parameters
!       None
!
!    Returned Value
!	{lstPos, lstGamma, lstTm}  
!		where 
!       lstPos   is a list of the elment entrace positions plus the exit of the last
!       lstGamma is the relatisitic factor at each element entrance
!       lstTm    is the list of 6x6 element transfer matrices, one for each element
!
!
GetBeamlineElementData[] := Module[
    {
    n,          ! loop control
    nElems,     ! number of elements in beamline
    lstGamma,   ! returned value - list of relativistic factors at element entrance
    lstLen,     ! list of element lengths
    pos,        ! exit position of current element in beamline
    lstPos,     ! returned value - list of element entrance positions
    e,          ! results of the Emittance[] calculation
    lstPhi,     ! inverse of Phi for element n-1
    Phi,        ! current transfer matrix from start to beamline element
    PhiInv,     ! list of transfer matrices from start to beamline element
    Tm,         ! current transfer matrix for an element
    lstTm       ! returned value - list of element transfer matrices 
    },


    ! Get beamline parameters
    nElems = LINE["position", "$$$"];  ! returns the index of last element
    lstGamma = LINE["GAMMA"];          ! returns a list of gamma values
    lstLen = LINE["L"];                ! returns a list of element lengths
    lstPos = LINE["S"];                ! returns a list of element entr. positions


    ! Build the list of transfer matrices
    e = Emittance[Matrix->True];        ! returns a bunch of info
    lstPhi = TransferMatrices/.e;       ! extract the beamline  transfer matrices

!    lstTm ={lstPhi[[1]]};
    lstTm ={};
    For[n=2, n<=nElems, n++,

        Phi    = lstPhi[[n]];
        PhiInv = SymplecticInverse[ lstPhi[[n-1]] ];

        Tm = Phi.PhiInv;
        lstTm = Append[lstTm,Tm];
    ];

    Return[{lstPos, lstGamma, lstTm}];
];




!---------------------------------------
!
!  FUNCTION  SaveBeamMatrixData
!
!---------------------------------------
!
!
!  Function for saving simulation data to persistent
!    storage.
!
!  Parameters
!    strFile   file name of the data
!    lstPos    list of element positions along the beamline
!    lstGamma  list of gamma values at element entrances
!    lstSig    list of moment matrices for beam at element locations
!
!  Returned Value
!    None
!
!
!    Author  :  Christopher K. Allen
!    Created :  November, 2005
!

SaveBeamMatrixData[strFile_, lstPos_, lstGamma_, lstSig_] := Module[
    {
    n,             ! loop control
    nElems,        ! number of elements in beamline
    EmitX,         ! x plane rms emittance
    EmitY,         ! y plane rms emittance
    EmitZ,         ! z plane rms emittance
    lstBetaX,      ! list of x plane beta values
    lstBetaY,      ! list of y plane beta values
    lstBetaZ,      ! list of z plane beta values
    fos            ! file output stream 
    },

    nElems = Dimensions[lstSig][[1]];

    lstBetaY = {};
    lstBetaX = {};
    lstBetaZ = {};
 

    For[n=1, n<=nElems, n++,
        sig = lstSig[[n]];
        EmitX = Sqrt[ sig[[1,1]]*sig[[2,2]] - sig[[1,2]]*sig[[2,1]] ];
        EmitY = Sqrt[ sig[[3,3]]*sig[[4,4]] - sig[[4,3]]*sig[[4,3]] ];
        EmitZ = Sqrt[ sig[[5,5]]*sig[[6,6]] - sig[[5,6]]*sig[[6,5]] ];

!        Print["n = ", n];
!
!        Print["EmitX = ", EmitX];
!        Print["EmitY = ", EmitY];
!        Print["EmitZ = ", EmitZ];

        lstBetaX = Append[lstBetaX, sig[[1,1]]/EmitX];
        lstBetaY = Append[lstBetaY, sig[[3,3]]/EmitY];
        lstBetaZ = Append[lstBetaZ, sig[[5,5]]/EmitZ];
    ];
  
    fos = OpenWrite[strFile];
    Write[fos, "s    betaX    betaY    betaZ    Gamma"];
    For[n=1, n<=nElems, n++, 
 
!        Print["n = ", n];

       Write[fos, lstPos[[n]]," ",lstBetaX[[n]]," ",lstBetaY[[n]]," ",lstBetaZ[[n]], "  ", lstGamma[n] ];
    ];
    Close[fos];

];


!---------------------------------------
!
!  FUNCTION  PlotBeamBeta  
!
!---------------------------------------
!
!
!  Function for plotting values of beta given the
!    list of element positions and beam moment 
!    matrices (i.e., from a ScheffSimulation).
!
!  Parameters
!    lstPos    list of element positions along the beamline
!    lstSig    list of moment matrices for beam at element locations
!
!  Returned Value
!    None
!
!
!    Author  :  Christopher K. Allen
!    Created :  November, 2005
!

PlotBeamBeta[lstPos_, lstSig_] := Module[
    {
    n,             ! loop control
    nElems,        ! number of elements in beamline
    EmitX,         ! x plane rms emittance
    EmitY,         ! y plane rms emittance
    EmitZ,         ! z plane rms emittance
    lstBetaX,      ! list of x plane beta values
    lstBetaY,      ! list of y plane beta values
    lstBetaZ,      ! list of z plane beta values
    lstDataX,      ! list of data points for ListPlot function
    lstDataY,      ! list of data points for ListPlot function
    lstDataZ,      ! list of data points for ListPlot function
    f,
    w,
    f1,
    c1,
    c2,
    c3
    },

    w = KBMainFrame["SAD Envelope Simulation",f,Title -> "SAD Env"];
    w[AboutMessage]="SAD Envelope Simulation, C.K. Allen, Nov. 2005";
    f1 = Frame[f,Side->"left"];
    c1 = Canvas[f1,Width->640,Height->320];
    c2 = Canvas[f1,Width->640,Height->320];
    c3 = Canvas[f1,Width->640,Height->320];


    nElems = Dimensions[lstSig][[1]];

    lstBetaY = {};
    lstBetaX = {};
    lstBetaZ = {};
 
    lstDataX = {};
    lstDataY = {};
    lstDataZ = {};

    For[n=1, n<=nElems, n++,
        sig = lstSig[[n]];
        EmitX = Sqrt[ sig[[1,1]]*sig[[2,2]] - sig[[1,2]]*sig[[2,1]] ];
        EmitY = Sqrt[ sig[[3,3]]*sig[[4,4]] - sig[[4,3]]*sig[[4,3]] ];
        EmitZ = Sqrt[ sig[[5,5]]*sig[[6,6]] - sig[[5,6]]*sig[[6,5]] ];

        lstBetaX = Append[lstBetaX, sig[[1,1]]/EmitX];
        lstBetaY = Append[lstBetaY, sig[[3,3]]/EmitY];
        lstBetaZ = Append[lstBetaZ, sig[[5,5]]/EmitZ];

        lstDataX = Append[lstDataX, {lstPos[[n]],lstBetaX[[n]]}];
        lstDataY = Append[lstDataY, {lstPos[[n]],lstBetaY[[n]]}];
        lstDataZ = Append[lstDataZ, {lstPos[[n]],lstBetaZ[[n]]}];
    ];
  
    Canvas$Widget = c1;
    ListPlot[lstDataX, PlotJoined->True, PlotLabel->'beta_x'];
    Update[];

    Canvas$Widget = c2;
    ListPlot[lstDataY, PlotJoined->True, PlotLabel->'beta_y'];
    Update[];

    Canvas$Widget = c3;
    ListPlot[lstDataZ, PlotJoined->True, PlotLabel->'beta_z'];
    Update[];

    TkWait[];
];




!---------------------------------------------
!
!  OLD CODE STORAGE
!


!  lstGamma = LINE["GAMMA"];

!  Print["lstLen = ", lstLen];
!  Print["lstGamm = ", lstGamma];

 (* Build a list of element positions *)
!  lstPos = {0.0};
!  For[n=1, n<=nElems, n++,
!    pos = lstPos[[n]] + lstLen[[n]];
!    lstPos = Append[lstPos, pos];
!  ];

!  Print["lstPos = ", lstPos];


 (* Build the list of element transfer matrices *)
!  e = Emittance[Matrix->True];       ! returns a bunch of info
!  lstPhi = TransferMatrices/.e;       ! extract the transfer matrices


!  Print["lstPhi = ", lstPhi];

!  Tm = IdentityMatrix[6];
!  lstTm ={Tm};
!  lstTm = { lstPhi[[1]] };
!  Do [
!        Print[" n = ", n];
!
!	Phi = lstPhi[[n]];
!
!        PhiInv = lstPhi[[n-1]];
!	PhiInv = SymplecticInverse[PhiInv];
!
!	Tm = Phi.PhiInv;
!        lstTm = Append[lstTm, Tm];
!
!    ,{n,2,nElems}
!  ];

!  Print["lstTm = ", lstTm];


!
!
! OLD CODE STORAGE
!
!--------------------------------------------------


Protect[ScheffSimulate,ScheffPropagate,ScheffZeroPropagate,ScheffPropElem,ScheffGenerator,ScheffDecoup,ScheffDecoupRotMatrix,SaveBeamMatrixData,PlotBeamBeta,GetBeamlineElementData];
EndPackage[];
