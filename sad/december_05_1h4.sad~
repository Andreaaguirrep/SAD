ON ECHO;OFF CTIME;
MOMENTUM=0.299792458 GEV;
;

DRIFT L1 = ( L = 0.15)
      L2 = ( L = 0.1) 
      L3 = ( L = 0.12)
      L4 = ( L = 0.25)
      L5 = ( L = 1.0 )
      L6 = ( L = 0.20 )
      L7 = ( L = 0.35 )
      L8 = ( L = 2.0 )
;

QUAD  Q1 = ( L = 0.25 K1 = -4.54217410240  ) 
      Q2 = ( L = 0.25 K1 =  4.282485515185  ) 
      Q3 = ( L = 0.25 k1 =  1.487839360990  )
      Q4 = ( L = 0.25 k1 =  -2.52475428683 )
      Q5 = ( L = 0.25 K1 =  5.659073756114  ROTATE = -25 DEG )
      Q6 = ( L = 0.25 k1 =  -2.98985434847 ROTATE = -25 DEG )
      Q7 = ( L = 0.25 k1 =  2.017860202879 ROTATE =  -25 DEG )
      Q8 = ( L = 0.25 k1 =  -.364027957668 ROTATE = -25 DEG )
;

BEND  BTR1 = ( L= 0.25 ANGLE = 12.5 DEG ROTATE = -90 DEG E1 = 0.5 E2 = 0.5 )
      BTR2 = ( L= 0.25 ANGLE = 12.5 DEG ROTATE = -90 DEG E1 = 0.5 E2 = 0.5)

;  

COORD  C1 = ( CHI3 = 45 DEG )
       C2 = ( CHI3 = -45 DEG )
;

LINE MSOL=(PINJ MMAP PEXT)
!         MATCH = (PINJ  L1 Q1 L2 Q2 L5 BV L5 Q3 L2 Q4 L2 Q5 L3 PEXT)
          MATCH = (PINJ L2 BTR1 L1 Q1 L3 Q2 L3 Q1 L1 BTR2 L2 Q3 L3 Q4 L2 L2 Q5 L6 Q6 L7 Q7 L4 Q8 L5 L8 PEXT)
;

!--------- set momentum width --------------
     mowidth = 0.0015;
!--------------------------------------------


MARK PINJ=(BETAX=10 AX= 0.0 BETAY=10 AY=  0.0 
           EMITX=1.5E-6 EMITY=1.5E-6 DP=mowidth SIGZ=1E-3)
     PEXT=( )
!-------- The values of PINJ must be written for tracking of line MSOL ------
;

MAP MMAP  =  ()
;

FFS USE=MATCH;


!-------------------------------------
!  Preparing KBMainFrame
!-------------------------------------
  w=KBMainFrame["sample0",f0];
  $DisplayFunction=CanvasDrawer;
  tf=KBFTabFrame[f0];
  to=tf@AddTab["Optics",fo];
  tsc=tf@AddTab["Scatter",tsc];
  th=tf@AddTab["Histo",fh];
  stitle="";

  kd = KBFComponentFrame[fh,Add->{
      KBFText[Text->"undef",Variable:>stitle,WidgetOption->{TextAnchor->"c"}],
      KBFFrame[WidgetVariable:>fdu],
      KBFFrame[WidgetVariable:>fdd]
      }];
  kdu = KBFComponentFrame[fdu,Add->{
       KBFFrame[WidgetVariable:>fd11],
       KBFFrame[WidgetVariable:>fd12,NextColumn->True]
      }];
  kdd = KBFComponentFrame[fdd,Add->{
       KBFFrame[WidgetVariable:>fd21],
       KBFFrame[WidgetVariable:>fd22,NextColumn->True]
      }];

  co=Canvas[fo,Width->936,Height->550,Side->"top"];
  cd11 = Canvas[fd11,Width->300,Height->300];
  cd12 = Canvas[fd12,Width->300,Height->300];
  cd21 = Canvas[fd21,Width->300,Height->300];
  cd22 = Canvas[fd22,Width->300,Height->300];
!
!
!-------------------------------------
!  Optics Plot
!-------------------------------------
po:=(
  Canvas$Widget=co;
  OpticsPlot[{{"BX","BY"},{"EX","EY"},{"SIGX","SIGY"}},
    Names->"{QB}*",Prolog->{Text[{ A ,{3,9}},TextSize->1.7,TextAlign->"left",TextFont->"times"]},
    ListCoordinate->"S"
      ];
  Update[];
  );
!
!-------------------------------------


INS;
!-------------------------------------
! Initial condition for Optics caiculation
     EMITX=1.5e-6;
     EMITY=1.5e-6;
     DP= mowidth;
     SIGZ=1e-3;
     AXI 0.0 ; BXI 1e+1;
     AYI 0.0 ; BYI 1e+1;

!-----------------------------------------------------------
!-----------------------------------------------------------

    A = "Hiromi test ;" ;

!------------------------------------------------------------
!------------------------------------------------------------

!    FREE Q1 Q2;
         FREE  Q5 Q6 Q7 Q8 ;
      !   FREE  R1 R2 R3 R4 ;
!    FREE L1 L2 L3 ;
!      FREE L5  ;
       ! fit PEXT  BX 2.5 AX 3.6 BY 2.5 AY 3.6 ;
        fit PEXT  BX 2.5 AX 3.6 BY 1.5 AY 2.6 ;
      !  fit PEXT  R1 3 R2 1 R3 1 R4 2;


  calc;
  po;
  go;

! draw bx by & ex ey & sizex sizey q*;
! draw bx by & ex ey & dx dy q*

NOCOD;NOEMIT;
 {mcalc,dcod}={OneTurnTransferMatrix,OrbitAtExit}/.
     Emittance[OneTurnInformation->True];
 StandardForm[$FORM="8.4";PageWidth=80;
     Print[mcalc]];

 mcoord = Flatten[Drop[NormalCoordinates["$$$"],-1],1];
 StandardForm[$FORM="8.4";PageWidth=80;
     Print[mcoord]];

 tf@SelectTab[1];
 Update[]; 
 end;

!//////////////////////////
    outTMP=OpenWrite["TransferMatrix_ALL_test.txt"];
    mTrans=TransferMatrix[1,2];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[2,3];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[3,4];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[4,5];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[5,6];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[6,7];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[7,8];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[8,9];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[9,10];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[10,11];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[11,12];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[12,13];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[13,14];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[14,15];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[15,16];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[16,17];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[17,18];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[18,19];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[19,20];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[20,21];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[21,21];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[21,22];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[22,22];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[22,23];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[23,23];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[23,24];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[24,24];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[24,25];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[25,25];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[25,26];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[26,26];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[26,27];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[27,27];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[27,28];
	    Write[outTMP,mTrans];
    mTrans=TransferMatrix[28,28];
	    Write[outTMP,mTrans];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},1];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},2];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},3];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},4];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},5];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},6];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},7];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},8];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},9];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},10];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},11];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},12];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},13];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},14];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},15];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},16];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},17];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},18];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},19];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},20];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},21];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},22];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},23];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},24];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},25];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},26];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},27];
	    Write[outTMP,nowTwiss];
    nowTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},28];
	    Write[outTMP,nowTwiss];
    mTrans=TransferMatrix[1,28];
	    Write[outTMP,mTrans];
		   Close[outTMP];
!/////////////////////////////


 USE MSOL; 

!--------------------------------------- 
! Tracking in solenoid with beam line

! Definition of Beam line Matrix


                     m1=mcalc;
!                    m1=IdentityMatrix[6];

!-------------------------------------------
!  Definition of the rotation matrix

                     mr1={{Cos[kaku],0,-Sin[kaku],0,0,0},{0,Cos[kaku],0,-Sin[kaku],0,0},
                         {Sin[kaku],0,Cos[kaku],0,0,0},{0,Sin[kaku],0,Cos[kaku],0,0},
                         {0,0,0,0,1,0},{0,0,0,0,0,1}} /. kaku -> PI/4 ;

!----------------------------------------

! Definition of solenoid Matrix 

!                    m2={{8.242747e-02,4.147734e-02,1.121422e-01,4.293711e-01,1.851847e-01,-4.362572e-02},
!                        {-2.075107e-01,9.729067e-01,-1.763344e+00,-1.104303e+00,-1.121754e-01,1.527139e+00},
!                        {4.612663e+01,1.627374e+01,-8.456236e+00,-3.029915e+01,-2.911629e+00,2.515218e+00},
!                        {-5.642309e+00,-1.953555e+00,9.958357e-01,3.684126e+00,3.555801e-01,-4.000157e-01},
!                        {-7.266913e+00,-2.486247e+00,1.401243e+00,5.907637e+00,-7.919908e-01 ,6.629516e-01},
!                        {-2.046593e-01,3.997471e-02,-2.220266e-01,2.563309e-02,-2.194897e-02,-5.887776e-01}}; 

!                     m2=IdentityMatrix[6];

!--------------------------------------- 

! Definition of total (beam line and solenoid) matrix                  
  
!                          ms=m2.m1; 
      
!---------------------------------------

! Definition of decoupled matrix
!                          mss= mr1.m1.Inverse[mr1].mrs;
!                           mss=Inverse[mr1].m1.mr1 ;
!                           mss= mr1;
!----------------------------------------

! Definition of physical matrix
                                ms= m1;

!  Image of source in decoupled coordinate,not physical
!                               ms = mcoord.m1 ;
!---------------------------------------
  Standardform[$FORM="8.4";PageWidth=80;Print[m1]]; 

!  Standardform[$FORM="8.4";PageWidth=80;Print[mss]];

  Standardform[$FORM="8.4";PageWidth=80;Print[ms]];
 
   INS;

    ExternalMap["OPTICS",LINE["POSITION","MMAP"],cod_]:=
      {cod,ms};


  calc


  ExternalMap["TRACK",LINE["POSITION","MMAP"],_,x_]:=
       Append[ms.Take[x,6],x[[-1]]];

  Print[Twiss[{"BX","BY"},"^^^"]];
  Print[Twiss[{"AX","AY"},"^^^"]];
!  Print[Twiss[{"BX","BY"},"$$$"]];
!  Print[Twiss[{"AX","AY"},"$$$"]];
    Print[Twiss[{"R1","R2"},"^^^"]];
   Print[Twiss[{"R3","R4"},"^^^"]];

trackemi[np_,emi_,sige_]:=Module[
  {{bx,ax,by,ay}=Twiss[{"BX","AX","BY","AY"},"^^^"],p,siz,xlist0,pxlist0,ylist0,pylist0,dlist0,
    xlist,pxlist,ylist,pylist,dlist},

    SeedRandom[1677901905];
    Sini=SeedRandom[];
    xlist0=Sqrt[emi]*GaussRandom[np];
    pxlist0=Sqrt[emi]*GaussRandom[np]; 
    ylist0=Sqrt[emi]*GaussRandom[np];
    pylist0=Sqrt[emi]*GaussRandom[np];
    dlist0 = sige*GaussRandom[np];

    xlist=Sqrt[bx]*xlist0;
    pxlist=(pxlist0-ax*xlist0)/Sqrt[bx];
    ylist=Sqrt[by]*ylist0;
    pylist=(pylist0-ay*ylist0)/Sqrt[by];
    dlist = dlist0;
   
    p={xlist,pxlist,ylist,pylist,Table[0,{np}],dlist};

  AppendTo[p,Table[1,{np}]];
        TrackParticles[{1,p},LINE["POSITION","PEXT"]][[2]]];

!------- set the momentum width ----------
!    mowidth = 0.0015;
!----------------------------------------

part["X"]={1,2}; 
part["Y"]={3,4};
part["U"]={3,2};
part["V"]={1,4};
part["W"]={1,3};
part["WW"]={2,4};
label["X"]={"x(mm)","p`dx`n(10`u-3`n)"};
label["Y"]={"y(mm)","p`dy`n(10`u-3`n)"};
label["U"]={"y(mm)","p`dx`n(10`u-3`n)"};
label["V"]={"x(mm)","p`dy`n(10`u-3`n)"};
label["W"]={"x(mm)","y(mm)"};
label["WW"]={"p`dx`n(10`u-3`n)","p`dy`n(10`u-3`n)"};
colors={"purple","blue","green","red"};

!-------number of rays and emittance ------------
 np = 2000;
 emt1 = 1.5e-6;
 emt2 = 1.5e-7;
 emt3 = 1e-8;
!-----------------------------------------------

 plottrack[l_,plane_]:=Module[{p,gy},

!------- mowidth is the momentum width --------------
     p=trackemi[np,#,mowidth]&/@l;
!-------------------------------------------------
    pdata = 1000*p;

    pdata0 = Partition[Take[Flatten[pdata],4*np],np]; 
    pdata1 = pdata0[[1]];
    pdata2 = pdata0[[2]];
    pdata3 = pdata0[[3]];
    pdata4 = pdata0[[4]]; 
!---------------check
! Print[pdata1];
! end;!hiromi
  out10=OpenWrite["testPDATA1_dec05_h2.txt"];
       Write[out10,pdata1];
       Close[out10];
  out11=OpenWrite["testPDATA2_dec05_h2.txt"];
       Write[out11,pdata2];
       Close[out11];
  out12=OpenWrite["testPDATA3_dec05_h2.txt"];
       Write[out12,pdata3];
       Close[out12];
  out13=OpenWrite["testPDATA4_dec05_h2.txt"];
       Write[out13,pdata4];
       Close[out13];
!---------------check
    gy=MapThread[ListPlot[1000*Thread[#[[part[plane]]]],
     PointColor->#2,
     PointSize->0.3,
     FrameLabel->label[plane],
     GridLines->{Automatic,Automatic},
     DisplayFunction->Identity,
     AspectRatio->1]&,
     {p, Take[colors, Length[p]]}] ];

 gx=plottrack[{emt1,emt2},"X"];
 gy=plottrack[{emt1,emt2},"Y"];
 gu=plottrack[{emt1,emt2},"U"]; 
 gv=plottrack[{emt1,emt2},"V"];
 gw=plottrack[{emt1,emt2},"W"];
 gww=plottrack[{emt1,emt2},"WW"];


 Show[{
   Graphics[ Rectangle[{-0.15, 0.64}, {0.2, 1.25}, gx] ],
   Graphics[ Rectangle[{0.15, 0.64}, {0.8, 1.25}, gy] ],
   Graphics[ Rectangle[{0.75, 0.64}, {1.1, 1.25}, gu] ],
   Graphics[ Rectangle[{-0.15, -0.13}, {0.2, 0.48}, gv] ],
   Graphics[ Rectangle[{-0.35, -0.13}, {1.3, 0.48}, gw] ],
   Graphics[ Rectangle[{0.75, -0.13}, {1.1, 0.48}, gww] ]}];
 Update[];
end;

!--------Histo Plot -------------------------

  stitle=" ";
scolor1="tomato";scolor2="MediumPurple1";
ppro1={7.3,10.5};
sprolog1="Tracking";


  MakeHisto[data_,cw_,sp_,xlabel_,rbin_,nbin_,cp_,ppro_] := 
   Module[{f1},
   Canvas$Widget = cw ;
   HistoPlot[data,
                    GridLines -> True,
                    PlotStyle ->ColumnPlot,
                    PointSymbol -> Bar,
                    ColumnOffset -> 0,
                    ColumnSize -> 5,
                    FillColor -> cp,
                    FrameLabel -> {xlabel,"Counts"},
                    BinRange -> rbin,
                    Bins -> nbin
                  ];
     Update[];
          ];

MakeHisto[pdata1,cd11,sprolog1,"X(mm)",{-10.0,10.0},50,scolor2,ppro1];
MakeHisto[pdata2,cd12,sprolog1,"p`dx`n(mrad)",{-10.0,10.0},50,scolor2,ppro1];
MakeHisto[pdata3,cd21,sprolog1,"Y(mm)",{-20.0,20.0},50,scolor2,ppro1];
MakeHisto[pdata4,cd22,sprolog1,"p`dy`n(mrad)",{-10.0,10.0},50,scolor2,ppro1];

tf@SelectTab[3];Update[];

!-------------------------------------------------- 

    mTrans=TransferMatrix[1,"$$$"];
    mTransInv=TransferMatrix["$$$",1];
    iniTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},1];
    outTwiss=Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},"$$$"];
    Print[Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},1]];
    Print[Twiss[{"AX","BX","AY","BY","R1","R2","R3","R4"},"$$$"]];
    Print[TransferMatrix[1,$$$]];
    Print[TransferMatrix[$$$,1]];

    Print[mTrans];
    out11=OpenWrite["TransferMatrix_dec05_h2.txt"];
	    Write[out11,mTrans];
	    Write[out11,mTransInv];
	    Write[out11,iniTwiss];
	    Write[out11,outTwiss];
		   Close[out11];

end






