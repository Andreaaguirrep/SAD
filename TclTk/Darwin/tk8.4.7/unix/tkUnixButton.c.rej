***************
*** 30,35 ****
      sizeof(Tk_ClassProcs),	/* size */
      TkButtonWorldChanged,	/* worldChangedProc */
  };
  
  /*
   *----------------------------------------------------------------------
--- 30,43 ----
      sizeof(Tk_ClassProcs),	/* size */
      TkButtonWorldChanged,	/* worldChangedProc */
  };
+ 
+ static void     TkKGDisplayText _ANSI_ARGS_((Display *display,
+                 Drawable drawable, TkButton *, Tk_Font tkfont, Tk_Font tkaltfont,
+                 Tk_Font tksciptfont, Tk_Font tkaltscriptfont, char *string,
+                 int numChars, int x, int y, int length, Tk_Justify justify,
+                 int underline, GC gc, GC altGc, GC scriptGc, GC altScriptGc,
+ 				int bmeas));
+ 
  
  /*
   *----------------------------------------------------------------------
***************
*** 78,84 ****
      ClientData clientData;	/* Information about widget. */
  {
      register TkButton *butPtr = (TkButton *) clientData;
-     GC gc;
      Tk_3DBorder border;
      Pixmap pixmap;
      int x = 0;			/* Initialization only needed to stop
--- 86,92 ----
      ClientData clientData;	/* Information about widget. */
  {
      register TkButton *butPtr = (TkButton *) clientData;
+     GC gc, altGc, scriptGc, altScriptGc;
      Tk_3DBorder border;
      Pixmap pixmap;
      int x = 0;			/* Initialization only needed to stop
***************
*** 96,116 ****
      int imageXOffset = 0, imageYOffset = 0; /* image information that will
  					     * be used to restrict disabled
  					     * pixmap as well */
  
      butPtr->flags &= ~REDRAW_PENDING;
      if ((butPtr->tkwin == NULL) || !Tk_IsMapped(tkwin)) {
  	return;
      }
  
      border = butPtr->normalBorder;
      if ((butPtr->state == STATE_DISABLED) && (butPtr->disabledFg != NULL)) {
  	gc = butPtr->disabledGC;
      } else if ((butPtr->state == STATE_ACTIVE)
  	    && !Tk_StrictMotif(butPtr->tkwin)) {
  	gc = butPtr->activeTextGC;
  	border = butPtr->activeBorder;
      } else {
  	gc = butPtr->normalTextGC;
      }
      if ((butPtr->flags & SELECTED) && (butPtr->state != STATE_ACTIVE)
  	    && (butPtr->selectBorder != NULL) && !butPtr->indicatorOn) {
--- 104,139 ----
      int imageXOffset = 0, imageYOffset = 0; /* image information that will
  					     * be used to restrict disabled
  					     * pixmap as well */
+     char *text;
  
      butPtr->flags &= ~REDRAW_PENDING;
      if ((butPtr->tkwin == NULL) || !Tk_IsMapped(tkwin)) {
  	return;
      }
  
+     if (butPtr->textPtr==NULL)
+ 	text = NULL;
+     else
+ 	text = Tcl_GetString(butPtr->textPtr);
+ 
      border = butPtr->normalBorder;
      if ((butPtr->state == STATE_DISABLED) && (butPtr->disabledFg != NULL)) {
  	gc = butPtr->disabledGC;
+ 	altGc = butPtr->disabledAltGC;
+ 	scriptGc = butPtr->disabledScriptGC;
+ 	altScriptGc = butPtr->disabledAltScriptGC;
      } else if ((butPtr->state == STATE_ACTIVE)
  	    && !Tk_StrictMotif(butPtr->tkwin)) {
  	gc = butPtr->activeTextGC;
+ 	altGc = butPtr->activeAltTextGC;
+ 	scriptGc = butPtr->activeScriptTextGC;
+ 	altScriptGc = butPtr->activeAltScriptTextGC;
  	border = butPtr->activeBorder;
      } else {
  	gc = butPtr->normalTextGC;
+ 	altGc = butPtr->normalAltTextGC;
+ 	scriptGc = butPtr->normalScriptTextGC;
+ 	altScriptGc = butPtr->normalAltScriptTextGC;
      }
      if ((butPtr->flags & SELECTED) && (butPtr->state != STATE_ACTIVE)
  	    && (butPtr->selectBorder != NULL) && !butPtr->indicatorOn) {
***************
*** 326,335 ****
  		x += offset;
  		y += offset;
  	    }
- 	    Tk_DrawTextLayout(butPtr->display, pixmap, gc, butPtr->textLayout,
- 		    x, y, 0, -1);
- 	    Tk_UnderlineTextLayout(butPtr->display, pixmap, gc,
  		    butPtr->textLayout, x, y, butPtr->underline);
  	    y += butPtr->textHeight/2;
  	}
      }
--- 349,367 ----
  		x += offset;
  		y += offset;
  	    }
+ 	    if (butPtr->bspecial||butPtr->rotation)
+ 		TkKGDisplayText(butPtr->display, pixmap, butPtr, butPtr->tkfont,
+ 			butPtr->tkaltfont, butPtr->tkscriptfont, butPtr->tkaltscriptfont,
+ 			text, strlen(text), x, y, 
+ 			(butPtr->rotation==90)||(butPtr->rotation==270)?butPtr->textHeight:butPtr->textWidth,
+ 			butPtr->justify, butPtr->underline, gc, altGc, scriptGc, altScriptGc,
+ 			0);
+ 	    else {
+ 		Tk_DrawTextLayout(butPtr->display, pixmap, gc, butPtr->textLayout,
+ 			x, y, 0, -1);
+ 		Tk_UnderlineTextLayout(butPtr->display, pixmap, gc,
  		    butPtr->textLayout, x, y, butPtr->underline);
+ 	    }
  	    y += butPtr->textHeight/2;
  	}
      }
***************
*** 570,575 ****
      int width, height, avgWidth, txtWidth, txtHeight;
      int haveImage = 0, haveText = 0;
      Tk_FontMetrics fm;
  
      butPtr->inset = butPtr->highlightWidth + butPtr->borderWidth;
  
--- 602,613 ----
      int width, height, avgWidth, txtWidth, txtHeight;
      int haveImage = 0, haveText = 0;
      Tk_FontMetrics fm;
+     char *text;
+ 
+     if (butPtr->textPtr==NULL)
+ 	text = NULL;
+     else
+ 	text = Tcl_GetString(butPtr->textPtr);
  
      butPtr->inset = butPtr->highlightWidth + butPtr->borderWidth;
  
***************
*** 597,610 ****
      }
      
      if (haveImage == 0 || butPtr->compound != COMPOUND_NONE) {
- 	Tk_FreeTextLayout(butPtr->textLayout);
- 	    
- 	butPtr->textLayout = Tk_ComputeTextLayout(butPtr->tkfont,
  		Tcl_GetString(butPtr->textPtr), -1, butPtr->wrapLength,
  		butPtr->justify, 0, &butPtr->textWidth, &butPtr->textHeight);
  	
- 	txtWidth = butPtr->textWidth;
- 	txtHeight = butPtr->textHeight;
  	avgWidth = Tk_TextWidth(butPtr->tkfont, "0", 1);
  	Tk_GetFontMetrics(butPtr->tkfont, &fm);
  	haveText = (txtWidth != 0 && txtHeight != 0);
--- 635,663 ----
      }
      
      if (haveImage == 0 || butPtr->compound != COMPOUND_NONE) {
+ 	if (butPtr->bspecial||butPtr->rotation) {
+ 	    TkKGDisplayText(butPtr->display, NULL, butPtr, butPtr->tkfont,
+ 		butPtr->tkaltfont, butPtr->tkscriptfont, butPtr->tkaltscriptfont,
+ 		text, strlen(text), 0, 0, butPtr->wrapLength,
+ 		butPtr->justify, butPtr->underline, NULL, NULL, NULL, NULL, 1);
+ 	    if ((butPtr->rotation==90)||(butPtr->rotation==270)) {
+ 		txtWidth = butPtr->textHeight;
+ 		txtHeight = butPtr->textWidth;
+ 		butPtr->textWidth = txtWidth;
+ 		butPtr->textHeight = txtHeight;
+ 	    } else {
+ 		txtWidth = butPtr->textWidth;
+ 		txtHeight = butPtr->textHeight;
+ 	    }
+ 	} else {
+ 	    Tk_FreeTextLayout(butPtr->textLayout);
+ 	    butPtr->textLayout = Tk_ComputeTextLayout(butPtr->tkfont,
  		Tcl_GetString(butPtr->textPtr), -1, butPtr->wrapLength,
  		butPtr->justify, 0, &butPtr->textWidth, &butPtr->textHeight);
  	
+ 	    txtWidth = butPtr->textWidth;
+ 	    txtHeight = butPtr->textHeight;
+ 	}
  	avgWidth = Tk_TextWidth(butPtr->tkfont, "0", 1);
  	Tk_GetFontMetrics(butPtr->tkfont, &fm);
  	haveText = (txtWidth != 0 && txtHeight != 0);
***************
*** 717,719 ****
  	    + 2*butPtr->inset), (int) (height + 2*butPtr->inset));
      Tk_SetInternalBorder(butPtr->tkwin, butPtr->inset);
  }
--- 770,1068 ----
  	    + 2*butPtr->inset), (int) (height + 2*butPtr->inset));
      Tk_SetInternalBorder(butPtr->tkwin, butPtr->inset);
  }
+ 
+ static char *strchrpnl(p)
+     char *p;
+ {
+     char *x=p;
+ 
+     while (x = strchr(x,'`')) {
+ 	if ((x[1]=='f')||(x[1]=='n')||(x[1]=='d')||(x[1]=='u')||(x[1]=='`'))
+ 	    return x;
+ 	x += 2;
+     }
+ 
+     return p + strlen(p);
+ }
+ 
+ 
+ static void
+ TkKGDisplayText(display, drawable, butPtr, tkfont, tkaltfont, tkscriptfont,
+     tkaltscriptfont, string, numChars, x, y, length, justify, underline, gc,
+     altGc, scriptGc, altScriptGc, bIsMeas)
+     Display *display;
+     Drawable drawable;
+     TkButton *butPtr;
+     Tk_Font tkfont, tkaltfont, tkscriptfont, tkaltscriptfont;
+     char *string;
+     int numChars;
+     int x, y;
+     int length;
+     Tk_Justify justify;
+     int underline;
+     GC gc, altGc, scriptGc, altScriptGc;
+     int bIsMeas;
+ {
+ #define MAXFONTS 50
+     char *p, *pnl, *pChars[MAXFONTS], *pnewl;
+     int charsThisLine, lengthThisLine, xThisLine;
+     GC currGc[MAXFONTS];
+     int xStart[MAXFONTS], yScript[MAXFONTS], nChars[MAXFONTS];
+     int iel, i, currNumChars;
+     int bInScript, bInAltFont, x0, y0, w, h, is, j;
+     Tk_Font pTkFont[MAXFONTS];
+     Tk_FontMetrics tkfm,tkscriptfm;
+     Tk_Window tkwin = butPtr->tkwin;
+     Pixmap pixmap;
+     XImage *ims, *imd;
+     char *imddat;
+     unsigned long ip1, ip2, maxWidth=0, numLines=0, bSupScr=0, bSubScr=0;
+     int dysc;
+     int st, supscrpad=0;
+     
+ /*printf("TkKGDisplayText %d,%d\n",x,y);*/
+ 
+     /*printf("text: [%s]\n", string);*/
+     Tk_GetFontMetrics(tkfont, &tkfm);
+     Tk_GetFontMetrics(tkscriptfont, &tkscriptfm);
+     dysc = (tkscriptfm.descent-tkscriptfm.ascent)/2;
+     if (length<=0)
+ 	length = INT_MAX;
+     x0 = x; y0 = y; w = Tk_Width(tkwin)-2*x0; h = Tk_Height(tkwin)-2*y0;
+     if (!bIsMeas)
+ 	if ((butPtr->rotation==90)||(butPtr->rotation==270)) {
+ 	    pixmap = Tk_GetPixmap(butPtr->display, Tk_WindowId(tkwin),
+ 	        Tk_Height(tkwin), Tk_Width(tkwin), Tk_Depth(tkwin));
+ 	  Tk_Fill3DRectangle(tkwin, pixmap, butPtr->normalBorder, x0, y0, h,
+ 			     w, 0, TK_RELIEF_FLAT);
+ 	} else
+ 	    pixmap = drawable;
+ 
+     p = string;
+     pnl = strchrpnl(p);
+     currNumChars = pnl - p;
+     y += tkfm.ascent;
+     currGc[0] = gc;
+     pTkFont[0] = tkfont;
+     yScript[0] = 0;
+     iel = 0;
+     while (numChars > 0) {
+ 	/*if (iel>0) {
+ 	  yScript[0] = yScript[iel-1];
+ 	  pTkFont[0] = pTkFont[iel-1];
+ 	  currGc[0] = currGc[iel-1];
+ 	  }*/
+ 	yScript[0] = 0;
+ 	pTkFont[0] = tkfont;
+ 	currGc[0] = gc;
+ 	iel = 0;
+ 	xStart[0] = 0;
+ 	pChars[0] = p;
+ 	charsThisLine = 0;
+ 	lengthThisLine = 1;
+ 	bInScript = 0;
+ 	bInAltFont = 0;
+ 	bSubScr = 0;
+ 	while ((lengthThisLine > 0)&&(numChars > 0)) {
+ 	    while (currNumChars <= 0) {
+ 		if (p[0] == '`') {
+ 		    switch (p[1]) {
+ 		    case 'n':
+ 			pTkFont[iel] = tkfont;
+ 			currGc[iel] = gc;
+ 			yScript[iel] = 0;
+ 			bInScript = 0;
+ 			bInAltFont = 0;
+ 			break;
+ 		    case 'f':
+ 			bInAltFont = 1;
+ 			if (bInScript) {
+ 			    pTkFont[iel] = tkaltscriptfont;
+ 			    currGc[iel] = altScriptGc;
+ 			} else {
+ 			    pTkFont[iel] = tkaltfont;
+ 			    currGc[iel] = altGc;
+ 			}
+ 			break;
+ 		    case 'd':
+ 			bSubScr = 1;
+ 		    case 'u':
+ 			if (bInAltFont) {
+ 			    pTkFont[iel] = tkaltscriptfont;
+ 			    currGc[iel] = altScriptGc;
+ 			}else {
+ 			    pTkFont[iel] = tkscriptfont;
+ 			    currGc[iel] = scriptGc;
+ 			}
+ 			yScript[iel] = dysc;
+ 			if (p[1]=='u') {
+ 			    yScript[iel] += (int)(tkfm.ascent*0.8);
+ 			    bSupScr = 1;
+ 			}
+ 			bInScript = 1;
+ 			break;
+ 		    }
+ 		    if (p[1]=='`') {
+ 			p++; numChars--;
+ 			pnl = strchrpnl(p+1);
+ 		    } else {
+ 			p += 2; numChars -= 2;
+ 			if (numChars <= 0)
+ 			    break;
+ 			pnl = strchrpnl(p);
+ 		    }
+ 		}
+ 		pChars[iel] = p;
+ 		currNumChars = pnl - p;
+ 	    }
+ 	    /*printf("a1 %d,%d,%d,%d\n",currNumChars,numChars,xStart[iel],length);*/
+ 	    pnewl = strchr(p,'\n');
+ 	    if (pnewl!=NULL) {
+ 		if (pnewl==p) {
+ 		    p++; numChars--; currNumChars--;
+ 		    break;
+ 		} else if (pnewl-p<currNumChars)
+ 		    currNumChars = pnewl-p;
+ 	    }
+ 	    /*printf("a2 %d,%d,%d,%d\n",currNumChars,numChars,xStart[iel],length);*/
+ 	    nChars[iel] = Tk_MeasureChars(pTkFont[iel], p, currNumChars,
+ 			      length, TK_WHOLE_WORDS/*|TK_AT_LEAST_ONE*/,
+ 			      &lengthThisLine);
+ 	    charsThisLine += nChars[iel];
+ 	    p += nChars[iel];
+ 	    pChars[iel+1] = p;
+ 	    lengthThisLine += xStart[iel];
+ 	    xStart[iel+1] = lengthThisLine;
+ 	    currNumChars -= nChars[iel];
+ 	    numChars -= nChars[iel];
+ 	    pTkFont[iel+1] = pTkFont[iel];
+ 	    currGc[iel+1] = currGc[iel];
+ 	    yScript[iel+1] = yScript[iel];
+ 	    /*printf("b %d, %d, %d, %d, %d\n",iel,currNumChars,numChars,lengthThisLine,nChars[iel]);*/
+ 	    iel++;
+ 	}
+ 	/*printf("x %d %d %d %d\n", x, length, lengthThisLine, numChars);*/
+ 	if ((numLines==0)&&bSupScr) {
+ 	    st = dysc+(int)(tkfm.ascent*0.8)+tkscriptfm.ascent;
+ 	    if (st > tkfm.ascent) {
+ /*		printf("st:%d ascent:%d y:%d\n", st, font->ascent,y);*/
+ 		supscrpad = st - tkfm.ascent;
+ 		y += supscrpad;
+ /*		printf("y:%d\n", y);*/
+ 	    }
+ 	}
+ 	numLines++;
+ 	if (bIsMeas) {
+ 	    if (lengthThisLine > maxWidth)
+ 		maxWidth = lengthThisLine;
+ 	} else {
+ 	    if (justify == TK_JUSTIFY_LEFT) {
+ 		xThisLine = x;
+ 	    } else if (justify == TK_JUSTIFY_CENTER) {
+ 		xThisLine = x + (length - lengthThisLine)/2;
+ 	    } else {
+ 		xThisLine = x + (length - lengthThisLine);
+ 	    }
+ 	    for (i=0; i<iel; i++) {
+ /*		printf("[%s]%d,%d\n",pChars[i],nChars[i],xThisLine+xStart[i]);*/
+ 		Tk_DrawChars(display, pixmap, currGc[i], pTkFont[i], pChars[i],
+ 			       nChars[i], xThisLine+xStart[i], y-yScript[i]);
+ /*		if (nChars[i]==0) return;*/
+ 	    }
+ 	    /*
+ 	    if ((underline >= 0) && (underline < charsThisLine)) {
+ 		TkUnderlineChars(display, pixmap, gc, tkfont, p,
+ 		   xThisLine, y, xThisLine, 0, underline, underline);
+ 	    }
+ 	    underline -= charsThisLine;
+ 	    */
+ 	    y += tkfm.ascent + tkfm.descent;
+ 	}
+ 
+ 	/*if (isspace(UCHAR(*p))) {
+ 	    p++;
+ 	    numChars--;
+ 	    currNumChars--;
+ 	    underline--;
+ 	    }*/
+     }
+ 
+     if (bIsMeas) {
+ 	butPtr->textWidth = maxWidth;
+ 	butPtr->textHeight = (numLines==0?1:numLines) * (tkfm.ascent + tkfm.descent) + supscrpad;
+ /* printf("maxw&h:%d %d\n", maxWidth, butPtr->textHeight);*/
+ 	if (bSubScr) {
+ 	    st = -dysc+tkscriptfm.descent;
+ 	    if (st > tkfm.descent)
+ 		butPtr->textHeight += st - tkfm.descent;
+ 	}
+ 	return;
+     }
+ 
+     if ((butPtr->rotation==90)||(butPtr->rotation==180)||(butPtr->rotation==270)) {
+ 	if (butPtr->rotation==180)
+ 	    ims = XGetImage(butPtr->display, pixmap, x0, y0, w, h, 
+ 		     AllPlanes, ZPixmap);
+ 	else
+ 	    ims = XGetImage(butPtr->display, pixmap, x0, y0, h, w,
+ 		     AllPlanes, ZPixmap);
+ /*	printf("ims: %d %d %d %d %d\n", h, w, ims->xoffset, ims->bitmap_pad, ims->bytes_per_line);*/
+ 	imddat = malloc(w*h*sizeof(int));
+ 	imd = XCreateImage(butPtr->display, Tk_Visual(tkwin), Tk_Depth(tkwin),
+ 		   ZPixmap, 0, imddat, w, h, ims->bitmap_pad, 0);
+ 	if (butPtr->rotation==90)
+ 	    for (i=0; i<w; i++)
+ 		for (j=0; j<h; j++)
+ 		    XPutPixel(imd, i, h-j-1, XGetPixel(ims, j, i));
+ 	else if (butPtr->rotation==180)
+ 	    for (i=0; i<h; i++)
+ 		for (j=0; j<w; j++)
+ 		    XPutPixel(imd, w-j-1, h-i-1, XGetPixel(ims, j, i));
+ 	else if (butPtr->rotation==270)
+ 	    for (i=0; i<w; i++)
+ 		for (j=0; j<h; j++)
+ 		    XPutPixel(imd, w-i-1, j, XGetPixel(ims, j, i));
+ 	XPutImage(butPtr->display, drawable, butPtr->copyGC, imd, 0, 0, x0,
+ 	    y0, w, h);
+ 	if (butPtr->rotation!=180)
+ 	    Tk_FreePixmap(butPtr->display, pixmap);
+ 	XDestroyImage(ims);
+ 	XDestroyImage(imd);
+     }
+ }
+ /*
+ void
+ TkKGComputeTextGeometry(font, string, numChars, wrapLength,
+ 	widthPtr, heightPtr)
+     XFontStruct *font;
+     char *string;
+     int numChars;
+     int wrapLength;
+     int *widthPtr;
+     int *heightPtr;
+ {
+     int thisWidth, maxWidth, numLines;
+     char *p;
+ 
+     if (wrapLength <= 0) {
+ 	wrapLength = INT_MAX;
+     }
+     maxWidth = 0;
+     for (numLines = 1, p = string; (p - string) < numChars; numLines++) {
+ 	p += TkMeasureChars(font, p, numChars - (p - string), 0,
+ 	    wrapLength, 0, TK_WHOLE_WORDS|TK_AT_LEAST_ONE, &thisWidth);
+ 	if (thisWidth > maxWidth) {
+ 	    maxWidth = thisWidth;
+ 	}
+ 	if (*p == 0) {
+ 	    break;
+ 	}
+ 
+ 	if (isspace(UCHAR(*p))) {
+ 	    p++;
+ 	}
+     }
+     *widthPtr = maxWidth;
+     *heightPtr = numLines * (font->ascent + font->descent);
+ }
+ */
