***************
*** 241,246 ****
   *
   *--------------------------------------------------------------
   */
  
  static int
  CreateRectOval(interp, canvas, itemPtr, objc, objv)
--- 241,249 ----
   *
   *--------------------------------------------------------------
   */
+ static int		KBCreateRectOval _ANSI_ARGS_((Tcl_Interp *interp,
+ 			    Tk_Canvas canvas, struct Tk_Item *itemPtr,
+ 			    int objc, Tcl_Obj *CONST objv[]));
  
  static int
  CreateRectOval(interp, canvas, itemPtr, objc, objv)
***************
*** 275,280 ****
      rectOvalPtr->disabledFillStipple = None;
      rectOvalPtr->fillGC = None;
  
      /*
       * Process the arguments to fill in the item record.
       */
--- 278,286 ----
      rectOvalPtr->disabledFillStipple = None;
      rectOvalPtr->fillGC = None;
  
+     if (objc<0)
+ 	return KBCreateRectOval(interp, canvas, itemPtr, objc, objv);
+ 
      /*
       * Process the arguments to fill in the item record.
       */
***************
*** 289,294 ****
  	goto error;
      }
      if (ConfigureRectOval(interp, canvas, itemPtr, objc-i, objv+i, 0)
  	    == TCL_OK) {
  	return TCL_OK;
      }
--- 295,337 ----
  	goto error;
      }
      if (ConfigureRectOval(interp, canvas, itemPtr, objc-i, objv+i, 0)
+ 	    == TCL_OK) {
+ 	return TCL_OK;
+     }
+ 
+     error:
+     DeleteRectOval(canvas, itemPtr, Tk_Display(Tk_CanvasTkwin(canvas)));
+     return TCL_ERROR;
+ }
+ 
+ static int
+ KBCreateRectOval(interp, canvas, itemPtr, objc, objv)
+     Tcl_Interp *interp;			/* For error reporting. */
+     Tk_Canvas canvas;			/* Canvas to hold new item. */
+     Tk_Item *itemPtr;			/* Record to hold new item;  header
+ 					 * has been initialized by caller. */
+     int objc;				/* Number of arguments in objv. */
+     Tcl_Obj *CONST objv[];		/* Arguments describing rectangle. */
+ {
+     RectOvalItem *rectOvalPtr = (RectOvalItem *) itemPtr;
+     int nn;
+     double *bb, *coordPtr;
+ 
+     objc = -objc;
+     nn = *((int *)objv[objc-2]);
+     bb = (double *)objv[objc-1];
+     objc -= 2;
+ 
+     /*
+      * Process the arguments to fill in the item record.
+      */
+ 
+     rectOvalPtr->bbox[0] = bb[0];
+     rectOvalPtr->bbox[1] = bb[1];
+     rectOvalPtr->bbox[2] = bb[2];
+     rectOvalPtr->bbox[3] = bb[3];
+     ComputeRectOvalBbox(canvas, rectOvalPtr);
+     if (ConfigureRectOval(interp, canvas, itemPtr, objc, objv, 0)
  	    == TCL_OK) {
  	return TCL_OK;
      }
