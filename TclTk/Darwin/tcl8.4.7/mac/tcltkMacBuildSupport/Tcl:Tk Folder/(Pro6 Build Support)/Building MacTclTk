Instructions below originally from Jim Ingham for building 8.3.1,adapted for building 8.4 on Pro6.3 by Daniel Steffen:Quick notes* To install the completed build for your own use, it might be sufficient to make an alias inyour extensions folder to the "Tool Command Language" folder in this directory, this isespecially convenient when you're working with different releases of Tcl/Tk at the same time.* You might want to replace my versions of the MW & MSL libraries (or the placeholder aliasesif you have the CVS install) in "(Pro6 Build Support):Runtime Libraries"with copies of (or aliases to) the files of the same name in your Pro6 install.!!! Note that if you do this, you will also need to rebuild your CW libraries according to theinstructions in the "CW Pro6 changes" file !!!* You need to use a recent version of Universal Interfaces, preferrably 3.4 or later, at thetime of this writing, UniversalInterfaces3.4.2.img was the latest stable version available.!!! Note that to be able to rebuild your CW libraries with UniversalInterfaces 3.4 installedyou will need to apply some changes to the library sources, see the "CW Pro6 changes" file !!!* You need to get MoreFiles1.5.3 from Apple if you don't have it already, and place its"CHeaders" and "Sources" directories into "(Pro6 Build Support):MoreFiles 1.5.3",then open MoreFiles.mcp and make the "Build All" target to build the MoreFiles Libraries.Daniel Steffen, das@users.sourceforge.net, 06/04/02----------- Slightly modified "Building MacTk" document originally by Jim Inham -----------This little README is an attempt to get you started with the process of building MacTkfor PPC and 68K systems.1) Started with a clean install of MacOS 9.0.4, and installed CodeWarrior Pro 6.2   You need to install BOTH the PPC & the 68K compilers.  If you don't, then you   will not be able to build the Tk MDEF.  You can still build PPC Tk without this,   but you will not be able to change the fonts or colors of menu items, and you won't   be able to use multi-column menus.2) Apply the fixes in "(Pro6 Build Support):CW Pro6 changes" to your Pro6 install.      4) Open the QuickTime Settings control panel, choose "QuickTime Exchange" from the    dropdown menu, and turn OFF QuickTime Exchange.  If you don't do this, QuickTime will   change the type of the .bmp include files in Tk, and CW will refuse to open them.   5) Now get the sources from Sourceforge.  I use MacCVS Pro, but any CVS client will do.   Note that MacCVSPro has a bug in its Latin1 translation code, check the Sourceforge   patch manager for a fix (might have been applied to the latest sources already)   For 8.4 with the latest fixes, get the "HEAD" tag of the   "tcl" & "tk" modules.   Let's call the folder in which you put the source {Tcl/Tk Source}.6) Now make the Build Folder.  In the {Tcl/Tk Source} folder, make a folder called "Build".  Unstuff the two files     "{Tcl/Tk Source}:tcl:mac:tclMacProjects.sea.hqx"         and    "{Tcl/Tk Source}:tk:mac:tkMacProjects.sea.hqx"into the "Build" folder.  Now your sources should look like this:{Tcl/Tk Source}    Build        tcl            BOA_TclShells.¹            MacTcl MSL.¹            Tclapplescript.¹            TclLibraries.¹            TclShells.¹        tk            TkLibraries.¹            TkShells.¹            Tk_MDEF.¹    MoreFiles    	an alias to (Pro6 Build Support):MoreFiles 1.5.3    tcl        The Tcl sources...    tk        The Tk sources...8) Okay, what are all these projects:      ¥ tcl:BOA_TclShells.¹: This projects builds a "Background Only" version of the Tcl       Shell.  It is useful for writing "Driver" or background type tools.  To use it,       you build the shell, and either put a file called bgScript.tcl in the same       folder as the application, or put a bgScript.tcl TEXT resource in the Shell.       It will run the file as its startup script.    ¥ tcl:MacTcl MSL.¹: This project rebuilds the MetroWerks Standard Libraries.  It        differs from the standard build in that it exports the symbols out of the library.       We do this so we can export them from the Tcl Shared library, which allows Tk       and other Tcl extensions to use a single copy of the Standard C Library - namely       that exported from the Tcl Shared Library.   ¥ tcl:Tclapplescript.¹:  This builds the Tclapplescript extension.   ¥ tcl:TclLibraries.¹: This builds various Shared & Static versions of the Tcl       library.   ¥ tcl:TclShells.¹: This builds various versions of the Tcl shell application.      ¥ tk:TkLibraries.¹: This builds various Shared & Static versions of the Tk        library.   ¥ tk:TkShells.¹: This builds various versions of the Wish application.   ¥ tk:Tk_MDEF.¹: This builds the Tk MDEF, which is basically a glue routine to go       from the MDEF that the Menu Manager calls to the actual Tk Menu code contained       in the Tk Library.       9) The targets in these libraries are all linked, so you really don't need to know about     all the targets (though I will describe them below).  To quickly build ALL of the     standard MacTk Products, open the TkShells.¹ project, select the "Tk Release Build"    and build.  If all goes well, the build will complete in something between around    5 minutes (on a fast G4) to half an hour or so on a slower PPC.        You will get lots of warnings, all benign.  There are some stub X functions which    don't have prototypes, there is one case where a CONST needs to be added, but can't    because the non-const-ed version is already in the stub table.  There are lots of    duplicate symbols, these are on purpose, they are either redefinitions of Std C    functions by Tcl, or redefinitions of SIOUX functions in Tk to    support the Tk console.            You should not get any errors.    10) Having done the build, if you now look in the build folder, you will notice    a whole bunch of junk.  What of it do you need?  The following is the list    of the end products I include in the final distribution:        Applications:      ¥ Drag & Drop Tclets: This is a FAT shell for making Tclets out of script files.      ¥ TclShell: This is a FAT shell for running Tcl scripts.      ¥ Wish: This is a FAT shell for running Tk scripts.      ¥ Simple BOA Tcl (PPC): This is a statically bound shell which runs as a Background          Only Application.                All the other shells are merged into the ones given above.  You can use them on their      own, but they also link dynamically to the MSL Runtime Libraries, so if you want to use       them rather than the FAT shells you need to either provide the MSL Runtime Library       (either PPC or CFM68K), or use the Merge linker to merge this into the libraries (which       is one of the things that the FAT targets do).          Shared Libraries:      ¥ Tcl8.4.shlb: The PPC version of the Tcl library.      ¥ Tcl8.4CFM68K.shlb: The CFM68K version of the Tcl library.      ¥ Tclapplescript.shlb: the Tclapplescript extension.      ¥ Tk8.4.shlb: The PPC version of the Tk library.      ¥ Tk8.4CFM68K.shlb: The CFM68K version of the Tk library.            All the shared libraries also contain the basic startup Tcl scripts that are       needed.  However, they do not contain things like the http library, etc...  These      need to be copied over to the "Tool Command Language" folder of the Extension      folder.          Static Libraries:      ¥ TclStub.lib: The PPC Tcl Stub library.      ¥ Tcl8.4CFM68KStub.lib: The CFM68K version of the Tcl Stub library.            ¥ TkStub.lib: The PPC Tk Stub library.      ¥ Tk8.4CFM68KStub.lib: The CFM68K version of the Tk Stub library.            All the other static libraries are used in building the shared libraries, and can      be thrown away.      11) Using the Build folder keeps most of the build junk out of the sources, but there    doesn't seem any way to keep the precompiled headers out of the mac folder.  So if    you want to package up the sources, you need to remember to remove these.    12) Also if you use MacCVS Pro, it puts hidden CVS directories in the source, and also    puts 'ckid' resources in all the text files.  You can get rid of these en masse by    using the "Actions->Orphan Files" menu item, though of course if you do this, you     can't do any more CVS operations on the sources.  The cheesy way to get around this     is to duplicate the tcl & tk folders, orphan the originals, make the release, and    then move the duplicates back on top of the originals...    13) So, now you want to put together a release build.  I have been using Stuffit     InstallerMaker to make the releases up, but this has gotten a bit tedious, and    so for this release, I am going to just copy stuff by hand...  The following script     will assemble a moderately convenient release folder:### Begin Install Script.set release "::Release"set macTk_shells "::Release:MacTk 8.3.1:"set macTk_stubs "::Release:MacTk 8.3.1:stubs:"set common_libs "::Release:Tool Command Language:"set ppc_libs "::Release:Tool Command Language (PPC):"set 68k_libs "::Release:Tool Command Language (68K):"file mkdir $releasefile mkdir $macTk_shellsfile mkdir $macTk_stubsfile mkdir $common_libsfile mkdir $ppc_libsfile mkdir $68k_libsforeach shell {"Drag & Drop Tclets" "TclShell" "Simple BOA Tcl (PPC)" Wish} {    file copy $shell $macTk_shells}foreach stub {"TclStub.lib" "TclStubCFM68K.lib" "TkStub.lib" "TkStubCFM68K.lib"} {    file copy $stub $macTk_stubs}foreach lib {Tcl8.3.shlb Tclapplescript1.1.shlb Tk8.3.shlb} {    file copy $lib $ppc_libs}foreach lib {Tcl8.3CFM68K.shlb TclapplescriptCFM1.1.shlb Tk8.3CFM68K.shlb} {    file copy $lib $68k_libs}file copy "::tcl:library" [file join $common_libs tcl8.3]file copy "::tk:library"  [file join $common_libs tk8.3]# Remove the DDE extensions, since it is useless on the Mac.file delete -force [file join $common_libs tcl8.3 dde1.0]file delete -force [file join $common_libs tcl8.3 dde1.1]set install_readme [file join $release "Readme-Install"]set fileH [open $install_readme w]puts $fileH {Readme-InstallTo install this release of MacTk (version 8.3.1) just copy the platformspecific file from either "Tool Command Language (PPC)" or "Tool Command Language (68K)"into the "Tool Command Language" folder, and copy that into your Extensions folder.Then put the "MacTk 8.3.1" folder wherever you want to store the shells.Jim Ingham 6/18/2000}close $fileHfile attributes $install_readme -type TEXT -creator CWIE### End install script.    To run the script, you can just save it into a file in the Build folder,     fire up the TclShell, and source it in.  It will create a folder    called Release at the same level as the Build folder.  Don't forget to either    Orphan the files in the source folders, or go through and delete all the ckid    resources, and the CVS folders...        You can get the HTML versions of the man pages from the Ajuba dev site.    14) Okay, what are all these targets & libraries about anyway...    There are three basic choices that can be made in building the Tcl Shell and    the Wish applications.          a) Whether to build PPC or 68K binaries.    b) Whether you link statically or dynamically to the Tcl & Tk shared libraries.      c) Whether you turn on the TCL_TEST and TK_TEST defines when you build the shells,     so that you can fully run the Tcl & Tk test suites.          First, the library targets:        We provide both Static & Shared targets for the Test disabled version, and PPC Static     targets for the Test enabled version.        The naming convention is:        {ppc,68K}¥{*, *ShLib, TestLibrary}        where * is Tcl or Tk.  The RHS of the ¥ indicates the target architecture, the LHS    indicates the type of library, static, shared or test enabled respectively.        The Library projects also contain targets to build the PPC & CFM68K versions of the    Stub library.        The one slightly confusing thing here is that we build a static PPC library, and link    that INTO the shared PPC library, but in the 68K case we don't use the static 68K library    in the shared (CFM68K) library.  This is mostly historical, the original 68K static     target was not a CFM application, so we couldn't use it's library in the CFM68K    shared library.        Next the Shells:        The Shell projects follow the same naming conventions.  They also contain some extra    targets.  First, there are the merge targets, which make the FAT shells (Wish in the    TkShells.¹ project, and TclShell in the TclShells.¹ project).  And then there are the    test shells that you can use for running the test suites.        The TkShells.¹ project also contains some other release oriented targets.  You have    already seem the Tk Release Build target, which builds the Tcl & Tk shells, the PPC    and CFM68K libraries, Tclapplescript and the D&D Tclets.  There is also a target to    build the D&D Tclets, a target to build all the static shells, and one to build the     entire world...        Hope this helps...Jim Ingham work - jingham@apple.comhome - wolfsuit@best.com