!
! LogBrowser ChannelTimeRange Mix-in Class
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: ChannelTimeRange.n,v 1.11 2005/11/15 02:41:48 amorita Exp $
! Style:      Channel Mix-in Class Library
! Require:    Widget/DateChooser.n
!             Widget/PeriodChooser.n
!             App/LogBrowser/TimeRange.n
!
Library@Require["Widget/DateChooser", "Widget/PeriodChooser"];
Library@Require["App/LogBrowser/TimeRange"];

! <<< LogBrowser ChannelTimeRange class >>>
ChannelTimeRange=Class[{},
  { ModuleFile = "LogBrowser/ChannelTimeRange.n",
    ModuleClassName = "ChannelTimeRange",
    RevisionID = "$Revision: 1.11 $"[12, -3]
    },
  {
    },

  Destructor[] := Null;

  Constructor[] := (
    This@RegisterNotifyProperty["Information", {"TimeRangeID"}]);

  (* Local default functions... *)
  DefaultTimeRange[] := With[{
    obj = TimeRange@TimeRange$Object[ExtractProperty["TimeRangeID"]]},
    If[obj <=> Undefined, obj@Range[],
      With[{now = FromDate[], width = 3600}, {now - width, now}]]];

  (* Channel Plugin API functions *)
  (* Override Property functions *)
  SetProperty[prop:((Rule[_String, _]|RuleDelayed[_String, _])...)] := Module[{
    timerange, rem, i},
    {timerange, rem} = SwitchCases[{prop},
      {Rule["TimeRange", _]|RuleDelayed["TimeRange", _], _}];

    If[Length[timerange] > 0, timerange = timerange[[1,2]];
      If[RealListQ[timerange]
	&& Length[timerange] >= 2 && LessEqual@@timerange,
	i = ExtractProperty["TimeRangeID"];
	With[{trObj = TimeRange@TimeRange$Object}, If[RealQ[i],
	  trObj[i]@Config[Type->"Fixed", Range->timerange];
	  Notify["Channel:Update:Information"],
	  i = Select[Reverse[TimeRange@Active[]], trObj[#]@Type[] === "Fixed"
	    && trObj[#]@Range[Update->False] === timerange&, 1];
	  If[i <=> {}, i = First[i],
	    i = TimeRange@Create["Fixed", Range->timerange]];
	  SetProperty["TimeRangeID"->i]]];
	Notify["Channel:Property:Set", "TimeRange"->timerange],
	Debug[ERROR, "SetProperty",
	  "Invalid time range[", timerange, "] is requested"]]];

    Channel`SetProperty@@rem];

  (* Information API family *)
  Information["TimeRange"] := With[{
    obj = TimeRange@TimeRange$Object[ExtractProperty["TimeRangeID"]]},
    If[obj <=> Undefined, obj@Label[], "Trend Range: 01:00:00"]];

  (* Interface[PopupMenu] *)
  Interface["PopupMenu:Template:Edit/TimeRange", {cid__}, Variable:>v_] := With[{
    ids = {cid}, ch = Channel$Object, mch = Channel$Object[First[{cid}]]},
    Module[{i = v[0]},
      {5000, (* Preference *)
	v[i] = mch@ExtractProperty["TimeRangeID"];
	If[Not[RealQ[v[i]]], v[i] = 0];
	Cascade[Text->"Edit", Add->{Cascade[Text->"TimeRange", Add->Append[
	  Map[With[{i, j = #,
	    text = #//": "//TimeRange@TimeRange$Object[#]@Label[],
	    dialog = # === v[i],
	    update = Length[ids] > 1 || # <=> v[i]},
	    RadioButton[Text->text, Value->j, Variable:>v[i],
	      Command:>(
		If[update, Scan[ch[#]@SetProperty["TimeRangeID"->j]&, ids]];
		If[dialog, Interface["Dialog:TimeRange", ids]])]]&,
	    TimeRange@Active[]],
	  With[{clone = Position[TimeRange@Active[], v[i]] <=> {}, src = v[i],
	    now = FromDate[Join[Drop[Date[], -1], {0}]], period = 3600},
	    Button[Text->"Create New Time Range",
	      Command:>Module[{new},
		new = If[clone, TimeRange@TimeRange$Object[src]@Clone[],
		  TimeRange@Create["Fixed", Range->{now - period, now}]];
		Scan[ch[#]@SetProperty["TimeRangeID"->new]&, ids];
		Interface["Dialog:TimeRange", ids]]]]]]},
	  i += 1; Null[]],

	v[0] = i; Separator[]}]];

  (* Interface[Dialog] *)
  Interface["Dialog:TimeRange", {ids__Real}] := Module[{mid = First[{ids}],
    tid, type, tabname, begin, end,
    fixedBegin, fixedEnd, expandBegin, movingPeriod},

    tid = Channel@Channel$Object[mid]@ExtractProperty["TimeRangeID"];
    If[Position[TimeRange@Active[], tid] === {}, Return[False]];

    type = TimeRange@TimeRange$Object[tid]@Type[];
    {begin, end} = TimeRange@TimeRange$Object[tid]@Range[];

    tabname[t_String] := t;

    tabname["Fixed"]  = "Fixed Range";
    tabname["Expand"] = "Auto Expand Trend";
    tabname["Moving"] = "Moving Trend";

    If[Not[KBFOptionDialog[Title->"Edit Time Range: "//tid, Add->{
      KBFFrameTabed[InitialTab->tabname[type], Add->{
	KBFTab[TabName->tabname["Fixed"],
	  Command:>(type = "Fixed";
	    fixedBegin = begin; fixedEnd = end),
	  DeselectCommand:>(begin = fixedBegin; end = fixedEnd),
	  Add->{
	    KBFText[Text->"Fixed Time Range from Begin to End"],
	    KBFComponent[ComponentName:>DateChooser,
	      WidgetOption->{Variable:>fixedBegin, Text->"Begin: "}],
	    KBFComponent[ComponentName:>DateChooser,
	      WidgetOption->{Variable:>fixedEnd,   Text->"End:   "}],
	    }],

	KBFTab[TabName->tabname["Expand"],
	  Command:>(type = "Expand";
	    expandBegin = begin),
	  DeselectCommand:>(begin = expandBegin),
	  Add->{
	    KBFText[Text->"Auto Expand Time Range from Begin to Now"],
	    KBFComponent[ComponentName:>DateChooser,
	      WidgetOption->{Variable:>expandBegin, Text->"Begin: "}],
	    }],

	KBFTab[TabName->tabname["Moving"],
	  Command:>(type = "Moving";
	    movingPeriod = Abs[end - begin]),
	  DeselectCommand:>(begin = end - movingPeriod),
	  Add->{
	    KBFText[Text->"Moving Trend Range"],
	    KBFComponent[ComponentName:>PeriodChooser,
	      WidgetOption->{Variable:>movingPeriod, Text->"Width: "}],
	    }],
	}],

      Null[]}]], Return[False]];

    TimeRange@TimeRange$Object[tid]@Config[Type->type,
      Switch[type,
	"Fixed",  Range->Sort[{fixedBegin, fixedEnd}],
	"Expand", Begin->expandBegin,
	"Moving", Period->movingPeriod,
	_, Null[]]];

    Scan[If[tid <=> Channel@Channel$Object[#]@ExtractProperty["TimeRangeID"],
      Channel@Channel$Object[#]@SetProperty["TimeRangeID"->tid]]&, {ids}];

    Channel@Channel$Object[mid]@Notify["Channel:Update:Information"];

    True];

  ];
! >>> LogBrowser ChannelTimeRange class <<<

LogBrowser@RegisterModule["System", ChannelTimeRange];

! End of File
