!
! LogBrowser ChannelList Class
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: ChannelList.n,v 1.18 2005/08/10 04:53:01 amorita Exp $
! Style:      Class Library
! Require:    Prog/UniqID.n
!             Misc/Convert.n
!             App/LogBrowser/Channel.n
!             App/LogBrowser/ChannelListRender.n
!             App/LogBrowser/ChannelListNotify.n
!
Library@Require["Prog/UniqID", "Misc/Convert"];
Library@Require["App/LogBrowser/Channel",
  "App/LogBrowser/ChannelListRender",
  "App/LogBrowser/ChannelListNotify"];

! <<< LogBrowser ChannelList class >>>
ChannelList=Class[{ChannelListNotify, ChannelListRender},
  { ModuleFile = "LogBrowser/ChannelList.n",
    ModuleClassName = "ChannelList",
    RevisionID = "$Revision: 1.18 $"[12, -3],
    (* ChannelList framework variables *)
    ChannelList$Objects = {}
    },
  { CL$IDs, CL$Channel, CL$ChannelRev
    },

  Destructor[] := Module[{},
    Scan[With[{id = CL$Channel[#]},
      Channel@Channel$Object[id]@Dereference[]]&, CL$IDs@Active[]];

    ChannelList$Objects = Select[ChannelList$Objects, # <=> This&];

    ChannelListNotify`Destructor[];
    ChannelListRender`Destructor[]];

  Constructor[] := Module[{},
    ChannelListRender`Constructor[];
    ChannelListNotify`Constructor[];

    AppendTo[ChannelList$Objects, This];

    CL$Channel[_] := Undefined; CL$ChannelRev[_] := Undefined;
    CL$IDs = UniqID[False]];

  (* Public Channel Add/Remove API *)
  Active[] := CL$IDs@Active[];

  AddChannel[op:((_Rule|_RuleDelayed)...)] := Module[{id, type, rem},
    {type, rem} = SwitchCases[{op},
      {Rule["URL", _]|RuleDelayed["URL", _], _}];
    If[Length[type] > 0, type = type[[1,2]], Return[$Failed]];
    With[{pos = StringPosition[type, "://"]},
      If[Length[pos] < 1, Return[$Failed]];
      id = AddChannel$[type[1,pos[[1,1]]-1], op];
      If[RealQ[id], Return[id]]];
    $Failed];

  RemoveChannel[id_Real] := With[{ch = Channel@Channel$Object[CL$Channel[id]]},
    If[RemoveChannel$[id],
      ch@UnregisterNotifyCallback[Command:>ReceiveNotify];
      ch@Dereference[]]];

  (* Internal API *)
  AddChannel$[type_String, op:((_Rule|_RuleDelayed)...)] := Module[{id, cid},
    cid = Channel@Create[type, Channel$Map->CL$Channel, op];
    If[cid === $Failed, $Failed,
      id = CL$IDs@Allocate[];
      CL$Channel[id] = cid; CL$ChannelRev[cid] = id;
      ch[CL$Channel[id]]@SetProperty["DefaultColor"->Convert@HSV2X11Color[
	Mod[(id - 1) * Sqrt[1 / 2.5], 1], 1, 1]];
      ch[CL$Channel[id]]@RegisterNotifyCallback[Command:>ReceiveNotify];
      id]];

  RemoveChannel$[Undefined] := False;
  RemoveChannel$[id_Real] := With[{cid = CL$Channel[id]},
    If[Not[RealQ[cid]], False,
      CL$IDs@Release[id]; CL$Channel[id] =.; CL$ChannelRev[cid] =.;
      Notify["Channel:Remove", {id, cid}];
      True]];

  ];
! >>> LogBrowser ChannelList class <<<

LogBrowser@RegisterModule["System", ChannelList];

! End of File
