!
! LogBrowser ChannelListRender Mix-In Library
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: ChannelListRender.n,v 1.29 2005/11/14 06:45:03 amorita Exp $
! Style:      Mix-In Library
! Require:    Prog/UniqID.n
!             Prog/QFunctions.n
!             App/LogBrowser/TimeRange.n
!             App/LogBrowser/ChannelBuffer.n
!
Library@Require["Prog/UniqID", "Prog/QFunctions"];
Library@Require["App/LogBrowser/TimeRange", "App/LogBrowser/ChannelBuffer"];

! <<< LogBrowser ChannelListRender class >>>
ChannelListRender=Class[{},
  { ModuleFile = "LogBrowser/ChannelListRender.n",
    ModuleClassName = "ChannelListRender",
    RevisionID = "$Revision: 1.29 $"[12, -3]
    },
  { CLR$IDs, CLR$Buffer, CLR$List, CLR$AxisOptions,
    CLR$LayerOrder, CLR$AxisOrder
    },

  Destructor[] := Module[{},
    Scan[With[{rid = #},
      RenderRelease[rid]]&, CLR$IDs@Active[]];
    ];

  Constructor[] := Module[{},
    CLR$IDs = UniqID[True]];

  (* Gateway to ChannelRender@Active[] *)
  Active["XAxis"] := ChannelRender@Active["XAxis"];
  Active["YAxis"] := ChannelRender@Active["YAxis"];

  (* Public Render* family API *)
  RenderRequest[op:((_Rule|_RuleDelayed)...)] := With[{ch = Channel@Channel$Object}, Module[{
    opt = Override[op, AxisOptions->{}],
    rID, alist, depend, axismap},
    rID = CLR$IDs@Allocate[];
    CLR$Buffer[rID] = ChannelBuffer[];

    CLR$AxisOptions[rID] = AxisOptions/.opt;

    (* Reject inconsistent Source option in AxisOptions *)
    CLR$AxisOptions[rID] = Select[CLR$AxisOptions[rID], Switch[#,
      Source["X", _Real]->{"Channel", _Real}, ch[#[[2,2]]]@cID === #[[2,2]],
      _, True]&];

    CLR$List[rID] = Map[With[{id = #}, (* Pickup active channels *)
      Which[
	Not[ch[id]@ActiveQ[]], Null[],
	Position[CLR$AxisOptions[rID], (* Reject self correlation *)
	  Source["X", ch[id]@ExtractProperty["XAxis"]]->{"Channel", id}]
	    <=> {}, Null[],
	True, id]]&, Sort[CL$Channel/@CL$IDs@Active[]]];

    alist = {};
    TimeRange@UpdateClock[]; (* Update TimeRange base time ticks *)
    Scan[With[{id = #}, (* Mark retrieve request *)
      CLR$Buffer[rID]@renderoption[id] = ch[id]@RenderProperties[];
      AppendTo[alist, {id, ch[id]@ExtractProperty["Layer"],
	ch[id]@ExtractProperty["XAxis", "YAxis"],
	Null[]}];
      ch[id]@RetrieveQueue[CLR$Buffer[rID]]]&, CLR$List[rID]];

    CLR$LayerOrder[rID] = First/@Sort[alist, #1[[2]] < #2[[2]]&];

    CLR$AxisOrder[rID] = Map[With[{axis = #},
      {axis, First/@Select[alist, #[[3]] === axis&]}]&, Union[alist[[,3]]]];
    axismap[1] = {}; axismap[2] = {};
    CLR$AxisOrder[rID] = Map[With[{ax1 = #[[1,1]], ax2 = #[[1,2]],
      clist = #[[2]]},
      If[Position[axismap[1], ax1] === {}, AppendTo[axismap[1], ax1]];
      If[Position[axismap[2], ax2] === {}, AppendTo[axismap[2], ax2]];
      { First/@Join[Position[axismap[1], ax1], Position[axismap[2], ax2]],
	clist, {ax1, ax2}}]&, CLR$AxisOrder[rID]];

    (* Mark retrieve request for source channel *)
    depend = Select[First[SwitchCases[CLR$AxisOptions[rID],
	{Rule[Source["X", _Real], {"Channel", _Real}]}]],
      Position[axismap[1], #[[1, 2]]] <=> {}&][[,2,2]];

    Scan[With[{id = #}, (* Mark retrieve request *)
      CLR$Buffer[rID]@renderoption[id] = ch[id]@RenderProperties[];
      ch[id]@RetrieveQueue[CLR$Buffer[rID]]]&, depend];

    Scan[With[{id = #}, (* Lock channel & Order retrieve request *)
      ch[id]@Reference[];
      ch[id]@RetrieveRequest[CLR$Buffer[rID]]]&, CLR$Buffer[rID]@Active[]];

    If[Length[CLR$Buffer[rID]@Active[]] < 1,
      Print["Debug: Empty Render Buffer ", rid];
      RenderRelease[rID]; Return[$Failed]];

    Channel@RetrieveBackendStrategy[]; (* Start reteiever backend *)

    rID]];

  RenderPoll[rID_Real] := With[{ch = Channel@Channel$Object},
    Channel@RetrieveBackendProcess[]; (* Run reteiever backend processor *)
    Min[1, Min@@Map[With[{id = #},
      ch[id]@RetrievePoll[CLR$Buffer[rID]]]&, CLR$Buffer[rID]@Active[]]]];

  RenderUpdate[rID_Real, timestamp_Real] := With[{ch = Channel@Channel$Object},
    Scan[With[{id = #},
      ch[id]@RetrieveUpdate[CLR$Buffer[rID], timestamp]]&,
      CLR$Buffer[rID]@Active[]]];

  RenderData[rID_Real, cID_Real] := CLR$Buffer[rID]@buffer[cID];

  RenderGraphics[rID_Real, op___Rule] := With[{ch = Channel@Channel$Object}, Module[{gobj, opt, uselayer,
    allaxis, axismap, source, scale, range, framelabel},
    {uselayer, opt} = SwitchCases[Override[op, UseLayer->True],
      {Rule[UseLayer, _], _}];

    Scan[With[{hv = #},
      allaxis[hv] = Union[CLR$AxisOrder[rID][[,1,hv]]];
      Scan[With[{axis = #[[1, hv]], mapto = #[[3, hv]]},
	axismap[ hv,  axis] = mapto;
	axismap[-hv, mapto] = axis]&, CLR$AxisOrder[rID]];
      ]&, {1, 2}];

    (* Extract AxisOptions *)
    source[_] := Date;
    scale[_, _] := Linear;
    scale[1, x_] := If[source[x] === Date, Date, Linear];
    Scan[With[{tag = #[[1]], val = #[[2]]},
      Switch[tag,
	Source["X", _Real], source[axismap[-1, tag[[2]]]] = Switch[val,
	  {"Channel", _Real}, Math[Correlation, val[[2]]],
	  _, Date],

	Scale["X", _Real], scale[1, axismap[-1, tag[[2]]]] = val,
	Scale["Y", _Real], scale[2, axismap[-2, tag[[2]]]] = val,

	_, (* Nothing TODO *)];
      ]&, Select[CLR$AxisOptions[rID], RuleQ]];

    (* Setup FrameLabel *)
    framelabel[_, _] = {};
    Scan[With[{axis = #, src = source[#]}, framelabel[1, axis] = Switch[src,
      Math[Correlation, _Real], (
	"Label"/.CLR$Buffer[rID]@renderoption[src[[2]]]),
      Date, "Time", _, ""]]&, allaxis[1]];

    Scan[With[{axis = #[[1,2]], clist = #[[2]]},
      framelabel[2, axis] = Join[framelabel[2, axis],
	Map["Label"/.CLR$Buffer[rID]@renderoption[#]&, clist]];
      ]&, CLR$AxisOrder[rID]];
    Scan[With[{axis = #},
      framelabel[2, axis] = CLR$FrameLabel[framelabel[2, axis]];
      ]&, allaxis[2]];

    (* Setup PlotRange *)
    range[_, _] = Automatic;
    Scan[With[{axis = #[[1,1]], clist = #[[2]]},
      range[1, axis] = {Min[#1], Max[#2]}&@@Thread[
	If[Length[#] == 2, #, {INF, -INF}]&/@Append[
	  Map[ch[#]@RenderHorzRange[CLR$Buffer[rID], scale[1, axis]]&,
	    clist], range[1, axis]]];
      ]&, CLR$AxisOrder[rID]];

    Scan[With[{axis = #[[1,2]], clist = #[[2]]},
      range[2, axis] = {Min[#1], Max[#2]}&@@Thread[
	If[Length[#] == 2, #, {INF, -INF}]&/@Append[
	  Map[ch[#]@RenderVertRange[CLR$Buffer[rID], scale[2, axis]]&,
	    clist], range[2, axis]]];
      ]&, CLR$AxisOrder[rID]];

    Scan[With[{axis = #, src = source[#]}, Switch[src,
      Math[Correlation, _Real], (range[1, axis] =
	ch[src[[2]]]@RenderDataRange[CLR$Buffer[rID], scale[1, axis]]),

      _, (* Nothing TODO *)]]&, allaxis[1]];

    Scan[With[{dhv = #}, Scan[With[{axis = #},
      If[range[dhv, axis] === {INF, -INF}, range[dhv, axis] = Automatic]]&,
      allaxis[dhv]]]&, {1, 2}];

    gobj = Map[With[{axis = #[[1]], clist = #[[2]]},
      gobj = Map[With[{id = #},
	ch[id]@RenderGraphics[CLR$Buffer[rID],
	  "LegendChanelID"->CL$ChannelRev[id],
	  Source->source[axis[[1]]],
	  PlotRange->{
	    CLR$RangeMargin[range[1, axis[[1]]], scale[1, axis[[1]]]],
	    CLR$RangeMargin[range[2, axis[[2]]], scale[2, axis[[2]]]]},
	  FrameLabel->{
	    If[axis[[1]] === 1, framelabel[1, 1], ""],
	    If[axis[[2]] === 1, framelabel[2, 1], ""],
	    If[axis[[1]] === 2, framelabel[1, 2], ""],
	    If[axis[[2]] === 2, framelabel[2, 2], ""],
	    Null[]},
	  FrameTicks->{
	    If[axis[[1]] === 1, True, False],
	    If[axis[[2]] === 1, True, False],
	    If[axis[[1]] === 2
	      || axis[[1]] === 1 && Length[allaxis[1]] < 2, True, False],
	    If[axis[[2]] === 2
	      || axis[[2]] === 1 && Length[allaxis[2]] < 2, True, False],
	    Null[]},
	  GridLines->{axis[[1]] === 1, axis[[2]] === 1},
	  Scale->{scale[1, axis[[1]]], scale[2, axis[[2]]]},
	  Null@@opt]]&, clist];
      If[gobj <=> {}, Join@@gobj, {}]]&, CLR$AxisOrder[rID]];

    With[{exec = (uselayer <=> {} && uselayer[[1,2]] === True),
      stacking0 = Flatten[CLR$AxisOrder[rID][[,2]]],
      layers = CLR$LayerOrder[rID]},
      Append[Map[If[Length[#] > 0,
	Graphics[Rectangle[{0, 0}, {1, 1}, #]], Null[]]&, gobj],
	Graphics[Hook[Command:>Module[{stacking, i, i0, j, j0},
	  If[exec, stacking = stacking0; j0 = -INF; Scan[(i = #;
	    If[j = Position[stacking, i]; j <=> {}, j = j[[1,1]];
	      If[j < j0, StandardFrom[
		The$Canvas[Raise] = {"CH:"//i, "CH:"//i0}];
		stacking = Insert[Delete[stacking, j], i, j0], j0 = j];
	      i0 = i])&, layers]];

	  Scan[With[{id = #, tag = StandardForm["CH:"//ToString[#]]}, 
	    Bind[The$Canvas, "<Button-1>",
	      ch[id]@Notify["Channel:Anchor"],       Tags->tag, Raise->False];
	    Bind[The$Canvas, "<Control-Button-1>",
	      ch[id]@Notify["Channel:SelectToggle"], Tags->tag, Raise->False];
	    Bind[The$Canvas, "<Button-3>",
	      ch[id]@Notify["Channel:PopupMenu"],    Tags->tag, Raise->False];
	    ]&, layers];

	  Null]]]]]]];

  RenderRelease[rID_Real] := With[{ch = Channel@Channel$Object},
    Scan[With[{id = #}, (* Release backend retriever & Unlock channel *)
      ch[id]@RetrieveRelease[CLR$Buffer[rID]];
      ch[id]@Dereference[];
      CLR$Buffer[rID]@Inactivate[id]]&, CLR$Buffer[rID]@Active[]];
    CLR$Buffer[rID] =.;
    CLR$AxisOptions[rID] =.;
    CLR$AxisOrder[rID] =.;
    CLR$LayerOrder[rID] =.;
    CLR$List[rID] =.;
    CLR$IDs@Release[rID]];

  (* Internal API *)
  CLR$RangeMargin[range_, scale_] := With[{log10 = Log[10], margin = 2.5e-2},
    If[Length[range] <=> 2, range,
    Switch[scale,
      Log, Module[{width = Log[10, range[[2]] / range[[1]]],
	tmp = Log[10, range]},
	tmp = {tmp[[1]] - Floor[tmp[[1]]], Ceiling[tmp[[2]]] - tmp[[2]]};
	Which[
	  width < 1 && Min[tmp] > 0.9 * margin * width, If[LessEqual@@tmp,
	    range * Exp/@({-1.1 * Min[tmp], margin * width} * log10),
	    range * Exp/@({-margin * width, 1.1 * Min[tmp]} * log10)],

	  True, range * Exp/@({-1, 1} * margin * width * log10)]],

      _, With[{width = Abs[range[[2]] - range[[1]]]},
	{range[[1]] - margin * width, range[[2]] + margin * width}]]]];

  CLR$FrameLabel[labels$_] := With[{labels = Override[Flatten[{labels$}]]},
    StringJoin@@Rest[Flatten[Thread[{"\n", labels}]]]];

  ];
! >>> LogBrowser ChannelListRender class <<<

LogBrowser@RegisterModule["System", ChannelListRender];

! End of File
