!
! LogBrowser Channel Super Class
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: Channel.n,v 1.56 2005/08/22 06:14:20 amorita Exp $
! Style:      Super Class Library
! Require:    Prog/DebugLog.n
!             Prog/QFunctions.n
!             Prog/UniqID.n
!             Misc/Convert.n
!             Widget/HSVColorChooser.n
!             Widget/RGBColorChooser.n
!             App/LogBrowser/ChannelRender.n
!             App/LogBrowser/ChannelNotify.n
!             App/LogBrowser/ChannelEngine.n
!
Library@Require["Prog/DebugLog", "Prog/QFunctions", "Prog/UniqID",
  "Misc/Convert", "Widget/HSVColorChooser", "Widget/RGBColorChooser"];
Library@Require["App/LogBrowser/ChannelRender",
  "App/LogBrowser/ChannelNotify", "App/LogBrowser/ChannelEngine"];

! <<< LogBrowser Channel class >>>
Channel=Class[{ChannelNotify, ChannelRender, DebugLog},
  { ModuleFile = "LogBrowser/Channel.n",
    ModuleClassName = "Channel", PluginType = "Channel",
    RevisionID = "$Revision: 1.56 $"[12, -3],
    ChannelCategory = "Super Class", ChannelType = "Unknown",
    defProperty,
    (* Channel class variables *)
    Channel$DiscriminatorTypes = {"Band Pass", "Band Reject",
      "Low Cut",  "Low Pass", "High Cut", "High Pass",
      "None"},
    (* Channel framework variables *)
    Channel$ObjectID = Null, Channel$Object,
    Channel$Types = {}, Channel$Selectors = {}
    },
  { cID, Channel$Map = (Undefined&), Channel$RefCount, Channel$Cite,
    Channel$Property, instDefProperty
    },

  (* Override DebugLog`Debug[] for Class functions *)
  Debug[type_Symbol, func_String, msg__] := Debug$[type,
    ModuleClassName, func,
    StringJoin@@Join[{ModuleClassName, "@", func, " "}, ToString/@{msg}]];

  (* Channel plugin register API *)
  RegisterPlugin[class_] := Module[{missing,
    provide = class@Interface["Provide"], type = class@ChannelType},

    If[Position[provide, "Channel:Create"] <=> {}, (* Channel:Create API *)
      missing = Complement[{"Channel:Create"}, provide];
      If[missing <=> {}, Debug[ERROR, "RegisterPlugin",
	class@ModuleClassName, " plugin is not supported following features: ",
	Null@@Rest[Flatten[Thread[{"/", missing}]]]],
	AppendTo[Channel$Types, {type, class}];
	ChannelList@Notify["ChannelPlugin:Register:Type", type]]];

    If[Position[provide, "Channel:Create:Panel"] <=> {},
      AppendTo[Channel$Selectors, {type, class}];
      ChannelList@Notify["ChannelPlugin:Register:Selector", type]];

    Null];

  (* Create API *)
  Create[type_String, op:((_Rule|_RuleDelayed)...)] := Module[{
    sel = Select[Channel$Types, #[[1]] === type&, 1], temp, id},
    If[sel <=> {}, sel = First[sel],
      Debug[ERROR, "Create",
	"Channel type ", type, " is not supported"]; Return[$Failed]];

    temp = Second[sel]@Interface["Channel:Create", op];
    If[temp === $Failed, Debug[ERROR, "Create",
      "Failed to create new ", type, " channel by using ", {op}]; $Failed,
      id = temp@cID; Clear[temp]; id]];

  (* Channel virtual object Constructor/Destructor *)
  Destructor[] := Module[{},
    If[Channel$RefCount -= 1; Channel$RefCount <=> 0, If[Channel$RefCount > 0,
      Debug[PANIC, "Destructor",
	"channel object[", cID, "] is destructed",
	" with positive reference count [", Channel$RefCount, "]"],
      Debug[ERROR, "Destructor",
	"detect invalid reference count[", Channel$RefCount,
	"] at channel object[", cID, "]"]]];

    Scan[With[{id = #}, (* Dereference cited objects *)
      Channel$Object[id]@Dereference[]]&, Channel$Cite];

    Notify["Channel:Destruct"];

    ChannelRender`Destructor[];
    ChannelNotify`Destructor[];
    Channel$ObjectID@Release[cID]; (* Release object ID number *)
    Clear[Channel$Map];
    DebugLog`Destructor[]];

  Constructor[] := Module[{},
    DebugLog`Constructor["Channel"];
    ChannelNotify`Constructor[];
    ChannelRender`Constructor[];

    If[Channel$ObjectID === Null, Channel$ObjectID = UniqID[True]];

    If[Not[BoundQ[Channel`defProperty]], Channel`defProperty = Override[
      "Active"->True, "UseLabel"->False, "Label"->"", "SystemLabel"->"",
      ChannelRender`defProperty]];

    cID = Channel$ObjectID@Allocate[]; (* Allocate object ID number *)
    Channel$Object[cID] = This;

    Channel$RefCount = 1;
    Channel$Cite = {};
    Channel$Property = {};
    instDefProperty = {};

    RegisterNotifyProperty["List", {"Active"}]];

  (* URL method header operators *)
  ValidURLMethodQ[url_] := With[{method = ChannelType//"://"},
    StringQ[url] && url[1,StringLength[method]] === method];

  StripURLMethod[url_String] := With[{method = ChannelType//"://"},
    url[StringLength[method]+1,-1]];

  (* object id operators *)
  Active[] := Channel$ObjectID@Active[];

  (* Reference Counter operators *)
  Reference[] := (Channel$RefCount += 1);

  Dereference[] := If[Channel$RefCount > 1, Channel$RefCount -= 1,
    With[{Channel$Object, cID}, Channel$Object[cID] =.]];

  ReplaceCite[{ids___Real}] := ReplaceCite[ids];
  ReplaceCite[ids___Real] := With[{ch = Channel$Object},
    If[ValidCiteQ[ids],
      Scan[(ch[#]@Reference[])&,   Complement[{ids}, Channel$Cite]];
      Scan[(ch[#]@Dereference[])&, Complement[Channel$Cite, {ids}]];
      Channel$Cite = {ids}; True, False]];

  ValidCiteQ[{ids___Real}] := ValidCiteQ[ids];
  ValidCiteQ[ids___Real]   := With[{l = ExpandCite$[ids]},
    Position[l, $Failed] === {} && Position[l, cID] === {}];
  ValidCiteQ[_] := False;

  ExpandCite[{ids___Real}] := Select[ExpandCite$[ids], RealQ];
  ExpandCite[ids___Real]   := Select[ExpandCite$[ids], RealQ];

  ExpandCite$[{ids___Real}] := ExpandCite$[ids];
  ExpandCite$[ids___Real] := With[{ch = Channel$Object}, Module[{prev, new},
    prev = If[# === ch[#]@cID, #, $Failed]&/@{ids};
    While[new = Union[prev,
      Flatten[If[# === ch[#]@cID, ch[#]@Channel$Cite, {$Failed}]&/@prev]];
      Length[prev] <> Length[new], prev = new];
    new]];

  (* Property operators *)
  SetInstDefProperty[{prop__}] := SetInstDefProperty[prop];

  SetInstDefProperty[prop:((Rule[_String, _]|RuleDelayed[_String, _])...)] := (
    instDefProperty = Override[prop, instDefProperty]);

  SetProperty[{prop__}] := SetProperty[prop];

  SetProperty[prop:((Rule[_String, _]|RuleDelayed[_String, _])...)] := Module[{
    mask = instDefProperty[[,1]], modify},
    modify = Select[{prop}, Position[mask, #[[1]]] === {}&];
    If[Length[modify] > 0,
      ChannelRender`SetProperty$@@modify;
      Channel$Property = Override[modify, Channel$Property];
      Notify["Channel:Property:Set", Null@@modify]]];

  UnsetProperty[{prop___String}] := UnsetProperty[prop];

  UnsetProperty[prop___String] := With[{
    remove = Intersection[{prop}, Channel$Property[[,1]]]},
    If[Length[remove] > 0,
      Channel$Property = Select[Channel$Property,
	Position[{prop}, First[#]] === {}&];
      Notify["Channel:Property:Unset", Null@@remove]]];

  ExtractProperty[{prop__String}] := If[Length[#] > 0, #[[1, 2]], Undefined]&/@
    SwitchCases[Properties$[], Map[Rule[#, _]|RuleDelayed[#, _]&, {prop}]];

  ExtractProperty[prop__String] := If[Length[{prop}] < 2,
    First[ExtractProperty[{prop}]], ExtractProperty[{prop}]];

  Property[{prop__String}] := Property[prop];

  Property[prop__String] := Evaluate/@(Rule@@##&/@Property$[prop]);

  Property$[{prop__String}] := Property$[prop];

  Property$[prop__String] := With[{pattern = Alternatives@@Join@@Map[
    {Rule[#, _], RuleDelayed[#, _]}&, {prop}]},
    First[SwitchCases[Properties$[], {pattern, _}]]];

  Properties[] := Evaluate/@(Rule@@##&/@Properties$[]);

  Properties$[] := Override[Channel$Property, instDefProperty, defProperty];

  (* Q functions *)
  ActiveQ[] := ExtractProperty["Active"];

  RetrieveBackendStrategy[] := Scan[With[{class = Second[#]},
    class@RetrieveStrategy[]]&, Channel$Types];

  RetrieveBackendProcess[] := Scan[With[{class = Second[#]},
    class@RetrieveProcess[]]&, Channel$Types];

  (* GUI menu frontend *)
  GUI$PulldownMenu[{lid___Real}, {cid___Real}, opt___RuleDelayed] := (
    GUI$CreateMenu["", {cid}, opt]);

  GUI$PopupMenu[{lid__Real}, {cid__Real}, opt___RuleDelayed] := Module[{
    mvopt, vopt, tag, index},
    {mvopt, vopt} = SwitchCases[{opt},
      {RuleDelayed[MenuVariable, _], RuleDelayed[Variable, _]}];

    StandardForm[tag = ToString[First[{lid}]];
      Scan[With[{id = ToString[#]},
	If[StringLength[tag] + StringLength[id] + 1 < 10,
	  tag = tag//","//id, tag = tag//"..."; Break[]]]&, Rest[{lid}]];
      tag = "[Channel "//tag//"]"];

    With[{m = Extract[mvopt, {1,2}, Unevaluated$],
      v = Extract[vopt, {1,2}, Unevaluated$]},
      index = GUI$CreateMenu[tag, {cid}, MenuVariable:>m, Variable:>v];

      m["/"][Popup]={
	(X/.$Event) + WidgetInformation[Widget/.$Event, RootX],
	(Y/.$Event) + WidgetInformation[Widget/.$Event, RootY], index}]];

  (* GUI menu backend *)
  GUI$CreateMenu[tag_String, {cid___Real}, opt___RuleDelayed] := Module[{
    vopt, template = {}},
    {vopt} = SwitchCases[{opt}, {RuleDelayed[Variable, _]}];

    If[Length[{cid}] > 0, With[{mch = Channel@Channel$Object[First[{cid}]],
      v = Extract[vopt, {1,2}, Unevaluated$],
      service = Intersection@@(
	Channel@Channel$Object[#]@Interface["PopupMenu:Provide"]&/@{cid})},

      If[RealQ[v[0]] && v[0] > 1, (* Clean-up variable *)
	Do[DeleteVariable[v[i]], {i, v[0] - 1}]];
      v[0] = 1; (* Initialize variable index *)
      template = mch@Interface["PopupMenu:Template", {cid}, service,
	Variable:>v];

      template = Rest/@Sort[template, #1[[1]] < #2[[1]]&];
      template = Join@@Prepend[template,
	If[tag <=> "", {Button[Text->tag], Separator[]}, {}]];
      While[template[[-1, 0]] === Separator, template = Drop[template, -1]]]];

    GUI$ComponentMenu[template, opt]];

  GUI$ComponentMenu[template_List, opt___RuleDelayed] := Module[{
    mvopt, index},
    {mvopt} = SwitchCases[{opt}, {RuleDelayed[MenuVariable, _]}];

    With[{m = Extract[mvopt, {1,2}, Unevaluated$]},
      If[Not[ListQ[m[List]]], m[List] = {}, (* Initialize menu list *)
	Scan[With[{w = m[#]}, DeleteWidget[w]]&,
	  Select[m[List], # <=> "/"&]]; (* Remove non-root menu widget *)
	If[Position[m[List], "/"] <=> {}, (* Has root menu widget *)
	  m["/"][Delete] = {1, "end"}; (* Remove all menu entry *)
	  m[List] = {"/"}, m[List] = {}]];

      If[Length[template] < 1, Return[0]];

      GUI$ArrangeMenu["/", template, WidgetVariable:>m]];

    index = Select[Range[Length[template]], template[[#, 0]] <=> Separator&];

    If[tag <=> "" && Length[index] > 1, index = Rest[index]];

    If[Length[index] > 0, First[index], 1]];

  GUI$ArrangeMenu[path_String, add$_List, WidgetVariable:>menu_] := Module[{
    text, add, rem, skipSeparator},
    If[Not[WidgetQ[menu[path]]], AppendTo[menu[List], path];
      With[{pos = StringPosition[path, "/"]}, menu[path] = If[Length[pos] > 1,
	Menu[menu[path[1,pos[[-2,1]]]]], Menu[]]]];

    skipSeparator = False;
    Scan[With[{entry = If[# <=> Null, #, {}]},
      {text, add, rem} = SwitchCases[entry, {Rule[Text, _], Rule[Add, _], _}];
      Switch[entry,
	Separator[___],
	If[Not[skipSeparator],
	  skipSeparator = True; menu[path][Add] = {entry}],

	(Button|CheckButton|RadioButton)[___],
	skipSeparator = False;
	menu[path][Add] = {entry},

	Cascade[___], If[text <=> {} && add <=> {},
	  With[{nextpath = path//text[[1,2]]//"/"},
	    skipSeparator = WidgetQ[menu[nextpath]];
	    GUI$ArrangeMenu[nextpath, add[[1,2]], WidgetVariable:>menu];
	    If[Not[skipSeparator],
	      menu[path][Add] = {Cascade[Menu->menu[nextpath],
		Null@@text, Null@@rem]}]]],

	_, (* Nothing TODO *)]]&, add$];
    ];

  (* Local default functions... *)
  DefaultDiscriminator[] := Module[{range, disc},
    range = ExtractProperty["Discriminator:Range"];
    If[Not[RealListQ[range]] || Length[range] < 2, range = {-INF, INF}];
    range = Take[range, 2];
    With[{high = range[[2]], low = range[[1]],
      mode = ExtractProperty["Discriminator:Mode"]},
      disc = Switch[mode,
	"Band Pass",   (low =< #[[2]] && #[[2]] =< high)&,
	"Band Reject", (#[[2]]  < low || high <  #[[2]])&,
	"Low Cut",     (low <   #[[2]])&,
	"Low Pass",    (#[[2]]  =< low)&,
	"High Pass",   (high =< #[[2]])&,
	"High Cut",    (#[[2]]  < high)&,
	_, True];
      With[{disc}, If[disc <=> True,
	ChannelEngine@Discriminator[#, disc]&, Identity]]]];

  (* Channel Plugin API function prototypes *)
  (* Information API family *)
  Information["Provide"] := {"Type", "Source"};

  Information["Type"] := ChannelCategory;

  Information["Source"] := "None";

  (* Retrieve* backend control API *)
  RetrieveStrategy[] := Null;
  RetrieveProcess[] := Null;

  (* Retrieve* API family *)
  RetrieveQueue[cbuf_] := With[{id = cID}, (* Queuing retrieve request *)
    cbuf@request[id] = {};
    cbuf@Activate[id]];

  RetrieveRequest[cbuf_] := With[{id = cID}, (* Issue retrieve request *)
    cbuf@requestID[id] = Null];

  RetrievePoll[cbuf_] := 1; (* Polling backend retriever *)

  RetrieveUpdate[cbuf_, timestamp_Real] := With[{id = cID}, (* Update buffer *)
    If[timestamp > cbuf@updatestamp[id],
      cbuf@buffer[id] = {}; (* Updating buffer *)
      cbuf@updatestamp[id] = timestamp]];

  RetrieveRelease[cbuf_] := With[{id = cID}, (* Release retrieve  buffer *)
    cbuf@Inactivate[id];
    cbuf@Clear[id]];

  (* Interface top half API family *)
  Interface["PopupMenu:Template", {ids__Real}, service_, Variable:>v_] :=
    With[{mch = Channel@Channel$Object[First[{ids}]]}, StandardForm[
      Select[Map[With[{key = "PopupMenu:Template:"//#,},
	mch@Interface[key, {ids}, Variable:>v]]&, service],
	ListQ[#] && Switch[Length[#], 0|1, False,
	  2, #[[2]] <=> Separator[], _, True]&]]];

  (* Interface botton half API family *)
  Interface["Provide"] := {};

  (* Interface[PopupMenu] *)
  Interface["PopupMenu:Provide"] := Join[{
    "Active", "Label", "Delete",
    Null[]}, ChannelRender`Interface["PopupMenu:Provide"]];

  Interface["PopupMenu:Template:Active", {cid__}, Variable:>v_] := With[{
    ids = {cid}, ch = Channel$Object, mch = Channel$Object[First[{cid}]]},
    {0, (* Preference *)
      If[Length[ids] == 1,
	With[{newvalue = Not[mch@ExtractProperty["Active"]]},
	  Button[Text->If[newvalue, "Enable", "Disable"],
	    Command:>mch@SetProperty["Active"->newvalue]]],
	Cascade[Text->"Activity", Add->{
	  Button[Text->"  Toggle",  Command:>Scan[ch[#]@SetProperty[
	    "Active"->Not[ch[#]@ExtractProperty["Active"]]]&, ids]],
	  Button[Text->"  Enable",  Command:>Scan[ch[#]@SetProperty[
	    "Active"->True]&, ids]],
	  Button[Text->"  Disable", Command:>Scan[ch[#]@SetProperty[
	    "Active"->False]&, ids]],
	  Null[]}]],
      Separator[]}];

  Interface["PopupMenu:Template:Label", {cid__}, Variable:>v_] := With[{
    ids = {cid}, ch = Channel$Object, mch = Channel$Object[First[{cid}]]},
    Module[{i = v[0]},
      {100, (* Preference *)
	v[i] = mch@ExtractProperty["UseLabel"];
	Cascade[Text->"Label", Add->{
	  With[{i, newvalue = Not[v[i]], l = mch@ExtractProperty["Label"]},
	    CheckButton[Text->"Use Custom Label", Variable:>v[i],
	      Command:>(Scan[ch[#]@SetProperty["UseLabel"->newvalue]&, ids];
		If[newvalue && Not[StringQ[l] && l <=> ""],
		  Interface["Dialog:Label", ids]]),
	      Null[]]],
	  Button[Text->"Edit Label",
	    Command:>Interface["Dialog:Label", ids]],
	  i += 1; Null[]}],
	v[0] = i; Separator[]}]];

  Interface["PopupMenu:Template:Index", {cid__}, Variable:>v_] := With[{
    ids = {cid}, ch = Channel$Object, mch = Channel$Object[First[{cid}]]},
    Module[{i = v[0], max, size = 30},
      {300, (* Preference *)
	max = Channel@Channel$Object[#]@ExtractProperty["MaxIndex"]&/@ids;
	max = If[RealListQ[max], Min[max], 1];
	If[Not[max > 1], Null[], v[i] = mch@ExtractProperty["Index"];
	  Cascade[Text->"Index: "//v[i],
	    Add->Append[Table[With[{i, j, text = ToString[j],
	      break = j > 1 && Mod[j , 10] == 1,
	      update = Length[ids] > 1 || j <=> v[i]},
	      RadioButton[Text->text, Value->j, Variable:>v[i],
		ColumnBreak->break,
		Command:>If[update, Scan[ch[#]@SetProperty[
		  "Index"->j]&, ids]]]], {j, If[max > size, size - 1, max]}],
	      If[max > size, Button[Text->"any",
		Command:>Interface["Dialog:Index", ids]], Null]],
	    i += 1; Null[]]],

	v[0] = i; Separator[]}]];

  Interface["PopupMenu:Template:Edit/Discriminator", {cid__}, Variable:>v_] := With[{
    ids = {cid}, ch = Channel$Object, mch = Channel$Object[First[{cid}]]},
    {1000, (* Preference *)
      Cascade[Text->"Edit", Add->{
	Button[Text->"Discriminator",
	  Command:>Interface["Dialog:Discriminator", ids]],
	Separator[]}],
      Separator[]}];

  Interface["PopupMenu:Template:Delete", {cid__}, Variable:>v_] := With[{
    ids = {cid}, ch = Channel$Object, mch = Channel$Object[First[{cid}]]},
    {9000, (* Preference *)
      Button[Text->"Delete",
	Command:>Scan[(ch[#]@Notify["Channel:RemoveRequest"])&, ids]],
      Separator[]}];

  (* Interface[Dialog] *)
  Interface["Dialog:Label", {ids__Real}] := Module[{f0, v0, f, v, entry},
    {f0, v0} = Channel@Channel$Object[First[{ids}]]@ExtractProperty[{
      "UseLabel", "Label"}]; {f, v} = {f0, v0};
    If[Not[KBFOptionDialog[Title->"Edit Channel Label", Add->{
      KBFCheckButton[Text->"Use custom label", Variable:>f],
      KBFString[Text->"Label: ", Variable:>v, WidgetVariable:>entry],
      KBFHook[Command:>(
	BindWidget[entry, "<Key-Escape>", TkReturn[False]];
        BindWidget[entry, "<Key-Return>", TkReturn[True]];
	entry[Focus$Set])]}]], Return[False]];
    If[Length[{ids}] == 1 && {f0, v0} === {f, v}, Return[False]];
    Scan[Channel@Channel$Object[#]@SetProperty[
      "UseLabel"->f, "Label"->v]&, {ids}]; True];

  Interface["Dialog:Index", {ids__Real}] := Module[{max},
    max = Channel@Channel$Object[#]@ExtractProperty["MaxIndex"]&/@{ids};
    max = If[RealListQ[max], Min[max], 1]; If[Not[max > 1], Return[False]];
    Interface["Dialog:Number", {ids}, "Index",
      Title->"Channel Index", Range->{1, max}, Resolution->1]];

  Interface["Dialog:Discriminator", {ids__Real}] := Module[{
    mid = First[{ids}], range, mode,
    w, f, cf, r, v0, v, m0, m},
    mode = Channel@Channel$Object[mid]@ExtractProperty["Discriminator:Mode"];
    range = Channel@Channel$Object[mid]@ExtractProperty["Discriminator:Range"];
    If[Not[RealListQ[range]] || Length[range] < 2, range = {-INF, INF}];

    m = Position[Channel$DiscriminatorTypes, mode];
    If[m === {}, m = Position[Channel$DiscriminatorTypes, "None"]];
    m0 = If[m <=> {}, m[[1,1]], 1]; m = m0;
    {v0[1], v0[2]} = Take[range, 2]; {v[1], v[2]} = {v0[1], v0[2]};

    w = KBDialogFrame["Dialog:Discriminator", f,
      Title->"Edit Discriminator"];
    w[State] = "withdraw"; (* Hide dialog window under construction... *)
    cf = KBFComponentFrame[f, Add->{
	KBFGroup[Text->"Discrimination Type"],
	KBFRadioButton[Items->Channel$DiscriminatorTypes, Columns->2,
	  Variable:>m],
	KBFGroup[Text->"Boundary"],
	KBFNumber[Text->"High: ", Variable:>v[2], WidgetVariable:>v[-2]],
	KBFNumber[Text->"Low: ",  Variable:>v[1], WidgetVariable:>v[-1]],
      KBFFrame[Add->{
	KBFButton[Text->"Reset", WidgetOption->{Width->8}, NextColumn->True,
	  Command:>(m = m0; v[2] = v0[2]; v[1] = v0[1])],
	KBFButton[Text->"OK", WidgetOption->{Width->8}, NextColumn->True,
	  Command:>(TkReturn[True])],
	KBFButton[Text->"Close", WidgetOption->{Width->8}, NextColumn->True,
	  Command:>(TkReturn[False])],
	}],
      }];
    w[Close] := TkReturn[False]; (* Bind Close event as Cancel Button *)

    (* Waiting construction of complex widget: KBFTabFrame *)
    Do[(Pause[0.01]; Update[TimerTasks]; (* Invoke After[] events *)
      Update[IdleTasks]), {loop, 5}];
    w[State] = "normal"; (* Show dialog window *)

    While[True,
      If[r = TkWait[]; Not[r], Break[]];

      If[r = RealQ[v[1]] && RealQ[v[2]]; r, Break[],
	Switch[KBFMessageBox[StandardForm[StringJoin[
	  Switch[RealQ/@{v[1], v[2]},
	    {False, False}, "High & Low",
	    {False, _}, "Low", _, "High"], " boundary is not real"]],
	Items->{"ReEdit", "Cancel"}, Bitmap->"error",
	Title->"Parameter Error"],
	2, Break[], (* Cancel Editing *)
	_, (* Nothing TODO *)]];
      ];
    If[Length[{ids}] == 1
      && m === m0 && {v[1], v[2]} === {v0[1], v0[2]}, r = False];

    If[r, (mode = Channel$DiscriminatorTypes[[m]]; range = {v[1], v[2]};
      Scan[(
	Channel@Channel$Object[#]@SetProperty["Discriminator:Mode"->mode];
	Channel@Channel$Object[#]@SetProperty["Discriminator:Range"->range];
	)&, {ids}];
      )];

    w[State] = "withdraw"; cf =.; w[Close] := None; w[Close]; r];

  (* Interface[Dialog] template *)
  Interface["Dialog:Number", {ids__Real}, prop_String, opt___Rule] := Module[{
    mid = First[{ids}], title, range, res,
    w, f, cf, entry, r, v0, v, v1, vr},
    {title, range, res} = SwitchCases[Override[opt, Title->prop],
      {Rule[Title, _String], Rule[Range, {_, _}], Rule[Resolution, _Real]}];
    If[Length[title] < 1, Return[$Failed], title = title[[1,2]]];

    v0 = Channel@Channel$Object[mid]@ExtractProperty[prop]; v = v0;

    w = KBDialogFrame["Dialog:Number:"//title, f,
      Title->"Edit "//title];
    w[State] = "withdraw"; (* Hide dialog window under construction... *)
    cf = KBFComponentFrame[f, Add->{
      KBFNumber[Text->title//": ", Variable:>v, WidgetVariable:>entry],
      KBFHook[Command:>(
	BindWidget[entry, "<Key-Escape>", TkReturn[False]];
        BindWidget[entry, "<Key-Return>", TkReturn[True]];
	entry[Focus$Set])],
      KBFFrame[Add->{
	KBFButton[Text->"OK", WidgetOption->{Width->8}, NextColumn->True,
	  Command:>(TkReturn[True])],
	KBFButton[Text->"Close", WidgetOption->{Width->8}, NextColumn->True,
	  Command:>(TkReturn[False])],
	}],
      }];
    w[Close] := TkReturn[False]; (* Bind Close event as Cancel Button *)

    (* Waiting construction of complex widget: KBFTabFrame *)
    Do[(Pause[0.01]; Update[TimerTasks]; (* Invoke After[] events *)
      Update[IdleTasks]), {loop, 5}];
    w[State] = "normal"; (* Show dialog window *)

    While[True,
      If[r = TkWait[]; Not[r], Break[]];

      v1 = If[Length[res] > 0, Round[v / res[[1,2]]] * res[[1,2]], v];

      If[range === {}, Break[]];

      vr = Switch[RealQ/@range[[1,2]],
	{True,  True},  Restrict[v1, range[[1,2,1]], range[[1,2,2]]],
	{True,  False}, Restrict[v1, range[[1,2,1]], INF],
	{False, True},  Restrict[v1, -INF, range[[1,2,2]]],
	_, v1];

      If[v1 === vr, Break[], Switch[KBFMessageBox[StandardForm[StringJoin[
	"Parameter ``", title, "'' is out of range [",
	If[RealQ[range[[1,2,1]]], range[[1,2,1]], -INF], ", ",
	If[RealQ[range[[1,2,2]]], range[[1,2,2]],  INF], "]"]],
	Items->{"Restrict", "ReEdit", "Cancel"}, Bitmap->"error",
	Title->"Parameter Range Error"],
	1, v1 = vr;   Break[], (* Restrict & Apply *)
	3, r = False; Break[], (* Cancel Editing *)
	_, (* Nothing TODO *)]];
      ];
    If[Length[{ids}] == 1 && v1 === v0, r = False];

    If[r, (
      Scan[Channel@Channel$Object[#]@SetProperty[prop->v]&, {ids}];
      )];

    w[State] = "withdraw"; cf =.; w[Close] := None; w[Close]; r];

  Interface["Dialog:Color", {ids__Real}, prop_String, opt___Rule] := Module[{
    mid = First[{ids}], title, frame, v0, v, tab,
    wHSV, vHSV, wRGB, vRGB},
    {title} = SwitchCases[Override[opt, Title->prop],
      {Rule[Title, _String]}];
    If[Length[title] < 1, Return[$Failed], title = title[[1,2]]];

    v0 = Channel@Channel$Object[mid]@ExtractProperty[prop];
    If[v0 === Undefined,
      v0 = Channel@Channel$Object[mid]@ExtractProperty["DefaultColor"]];
    v0 = Convert@X11Color2RGB[v0]; v = v0;

    vHSV = Channel@Channel$Object[mid]@ExtractProperty[prop//":HSV"];
    vRGB = Channel@Channel$Object[mid]@ExtractProperty[prop//":RGB"];

    If[Not[KBFOptionDialog[Title->"Edit "//title, Add->{
      KBFFrame[Add->{KBFFrameTabed[InitialTab->"HSV", Add->{
	KBFTab[TabName->"HSV", DeselectCommand:>(v = Convert@HSV2RGB[vHSV]),
	  Command:>(tab = "HSV";
	    If[Convert@HSV2RGB[vHSV] <=> v, vHSV = Convert@RGB2HSV[v]]),
	  Add->{KBFComponent[ComponentName:>HSVColorChooser,
	    WidgetVariable:>wHSV,
	    WidgetOption->{Variable:>vHSV, Fill->"x"}]}],

	KBFTab[TabName->"RGB", DeselectCommand:>(v = vRGB),
	  Command:>(tab = "RGB";
	    If[vRGB <=> v, vRGB = v]),
	  Add->{KBFComponent[ComponentName:>RGBColorChooser,
	    WidgetVariable:>wRGB,
	    WidgetOption->{Variable:>vRGB, Fill->"x"}]}],

	Null[]}]}, WidgetVariable:>frame],

      Null[]}]], Return[False]];

    v = Switch[tab,
      "RGB", vRGB,
      "HSV", Convert@HSV2RGB[vHSV],
      _,     Convert@HSV2RGB[vHSV]];

    If[Length[{ids}] == 1 && v0 === v, Return[False]];
    Scan[Channel@Channel$Object[#]@SetProperty[
      Null@@Map[If[#[[2]] === Undefined, Null[], prop//":"//#[[1]]->#[[2]]]&,
	{{"HSV", vHSV}, {"RGB", vRGB}}],
      prop->Convert@RGB2X11Color[v]]&, {ids}]; True];

  ];
! >>> LogBrowser Channel class <<<

LogBrowser@RegisterModule["System", Channel];

! End of File
