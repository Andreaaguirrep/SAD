!
! LogBrowser TimeRange Class
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: TimeRange.n,v 1.6 2005/08/31 04:08:18 amorita Exp $
! Style:      Class Library
! Require:    Prog/UniqID.n
!             Misc/Convert.n
!
Library@Require["Prog/UniqID", "Misc/Convert"];

! <<< LogBrowser TimeRange class >>>
TimeRange=Class[{},
  { ModuleFile = "LogBrowser/TimeRange.n",
    ModuleClassName = "TimeRange",
    RevisionID = "$Revision: 1.6 $"[12, -3],
    TimeRange$Object, TimeRange$IDs, now
    },
  { trID, type, begin, end, period
    },

  Create[type$_String, op:((_Rule|_RuleDelayed)...)] := Module[{temp, id},
    If[temp = TimeRange[type$, op], id = temp@trID; Clear[temp]; id,
      temp =.; $Failed]];

  Clone[] := Create[Type[], Literal[Range]->Range[Update->False]];

  Initialize[] := (now = FromDate[];
    TimeRange$IDs = UniqID[True];
    TimeRange$Object[_] := Undefined);

  Destructor[] := (TimeRange$IDs@Release[trID]);

  Constructor[type$_String] := (type = begin = end = period = Undefined;
    If[Not[Config$[Literal[Type]->type$,
      Null@@Options]], trID = Undefined; False,
      trID = TimeRange$IDs@Allocate[]; TimeRange$Object[trID] = This; True]);

  Config$[opt___Rule] := Module[{
    },
    Scan[With[{tag = #[[1]], val = #[[2]]},
      Switch[tag,
	Literal[Range], Switch[type,
	  "Moving", (period = Abs[val[[2]] - val[[1]]];
	    end = now; begin = end - period),
	  "Expand", begin = val[[1]]; end = now; period = Abs[end - begin],
	  _, {begin, end} = val; period = Abs[end - begin]],

	Literal[Begin], Switch[{type, Null@@RealQ/@{begin, end, period}},
	  {"Expand", __}, begin = val; end = now; period = Abs[end - begin],
	  {_,     _, False, False}, begin = val,
	  {_, False,  True,     _}, begin = val; period = Abs[end - begin],
	  {_, False,     _,  True}, begin = val; end = begin + period,
	  {_,  True,  True,  True}, begin = val; period = Abs[end - begin],
	   _, (* Nothing TODO *)],

	Literal[End], Switch[{type, Null@@RealQ/@{begin, end, period}},
	  {_, False,     _, False}, end = val,
	  {_,  True, False,     _}, end = val; period = Abs[end - begin],
	  {_,     _, False,  True}, end = val; begin = end - period,
	  {"Expand"|"Moving", True, True, True}, (* Nothing TODO *),
	  {_,  True,  True,  True}, end = val; period = Abs[end - begin],
	   _, (* Nothing TODO *)],

	Literal[Period], Switch[{type, Null@@RealQ/@{begin, end, period}},
	  {"Moving", __}, period = Abs[val]; end = now; begin = end - period,
	  {"Expand", __}, period = Abs[val]; end = now; begin = end - period,
	  {_, False, False,     _}, period = Abs[val],
	  {_,  True,     _, False}, period = Abs[val]; end = begin + period,
	  {_,     _,  True, False}, period = Abs[val]; begin = end - period,
	  {_,  True,  True,  True}, period = Abs[val]; end = begin + period,
	   _, (* Nothing TODO *)],

	Literal[Type], Switch[{val, And@@RealQ/@{begin, end, period}},
	  {"Fixed"|"Expand"|"Moving", False}, type = val,
	  {"Fixed",  True}, type = val,
	  {"Expand", True}, type = val; end = now; period = Abs[end - begin],
	  {"Moving", True}, type = val; end = now; begin = end - period,
	   _, (* Nothing TODO *)],

	_, (* Nothing TODO *)]]&, {opt}];

    And[StringQ[type], Null@@RealQ/@{begin, end, period}]];

  CheckClock[] := If[FromDate[] - now > 30, now = FromDate[]];

  TimeDateString[t_Real] := With[{d = ToDate[t]},
    StringJoin[
      Convert@Dec2Str[d[[1]], 4], "/",
      Convert@Dec2Str[d[[2]], 2], "/",
      Convert@Dec2Str[d[[3]], 2], " ",
      Convert@Dec2Str[d[[4]], 2], ":",
      Convert@Dec2Str[d[[5]], 2], ":",
      Convert@Dec2Str[d[[6]], 2]]];

  PeriodString[dt_Real] := Module[{days, hour, min, sec = dt},
    days = Floor[sec / 3600 / 24]; sec -= days * 3600 * 24;
    hour = Floor[sec / 3600];      sec -= hour * 3600;
    min  = Floor[sec / 60];        sec -= min  * 60;
    StringJoin[
      If[days > 0, Null[Convert@Dec2Str[days], "days "], Null[]],
      Convert@Dec2Str[hour, 2], ":",
      Convert@Dec2Str[min,  2], ":",
      Convert@Dec2Str[sec,  2]]];

  (* Query API *)
  UpdateClock[] := (now = FromDate[]);

  Active[] := TimeRange$IDs@Active[];

  Type[] := type;

  Begin[opt___Rule]  := First[Range[opt]];

  End[opt___Rule]    := Second[Range[opt]];

  Period[opt___Rule] := (#2 - #1)&@@Range[opt];

  Range[opt___Rule]  := (
    If[Update/.Override[opt, Update->False], CheckClock[]];
    Switch[type,
      "Fixed",  {begin, end},
      "Expand", {begin, now},
      "Moving", {now - period, now},
      _, Undefined]);

  Label[opt___Rule] := StandardForm[With[{range = Range[opt]}, Switch[type,
    "Fixed", StringJoin["Time Range: ",
      TimeDateString[range[[1]]], " - ", TimeDateString[range[[2]]]],

    "Expand", StringJoin["Time Range: ",
      TimeDateString[range[[1]]], " - Now"],

    "Moving", StringJoin["Trend Range: ",
      PeriodString[range[[2]] - range[[1]]]],

    _, "Undefined"]]];

  (* Configuration API *)
  Config[opt___Rule] := Config$[opt];

  ];

TimeRange@Initialize[];
! >>> LogBrowser TimeRange class <<<

LogBrowser@RegisterModule["System", TimeRange];

! End of File
