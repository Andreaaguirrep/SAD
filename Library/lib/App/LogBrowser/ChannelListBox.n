!
! LogBrowser ChannelListBox Class
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: ChannelListBox.n,v 1.32 2007/03/27 02:27:08 amorita Exp $
! Style:      Class Library
! Require:    Misc/Convert.n
!             Prog/QFunctions.n
!
Library@Require["Misc/Convert", "Prog/QFunctions"];

! <<< LogBrowser ChannelListBox class <<<
ChannelListBox=Class[{},
  { ModuleFile = "LogBrowser/ChannelListBox.n",
    ModuleClassName = "ChannelListBox",
    RevisionID = "$Revision: 1.32 $"[12, -3],
    ChSelLen = 8, ChInfoLen = 3
    },
  { clObj, clist, active,
    bChBoxMenu, ChBoxMenu,
    bChMenu, ChMenu, ChMenuVar,
    tabf, cf, chSel, chInfo, lBox, sb, cbAutoRepeat, bDraw,
    popupMenu, popupMenuVar, panelState,
    ChannelBoxVisible = True,
    RenderingCost = 0, RepeatWait = 20, RepeatAfter = Null,
    FontSize = 14,
    ListBoxWidth = 47, ListBoxHeight = 19,
    ListBoxBorderWidth = 2, ListBoxSelectBorderWidth = 1
    },

  Destructor[] := (
    clObj@UnregisterNotifyCallback[Command:>ReceiveNotify]; Clear[clObj];
    cf =.);

  Constructor[f_, clObj$_] := Modules[{rem, fvopt, tabopt},
    clObj = clObj$; clObj@RegisterNotifyCallback[Command:>ReceiveNotify];
    {fvopt, tabopt, rem} = SwitchCases[Options,
      {RuleDelayed[FrameVariable, _], RuleDelayed[TabFrameVariable, _], _}];

    panelState[_] := {},
    Do[chInfo[i] = "", {i, ChInfoLen}];
    active = Null; clist = {};
    cbAutoRepeat = False;

    cf = KBFComponentFrame[f, Add->{
      KBFGroup[Text->"Channel Selector", Height->0],
      KBFFrame[Add->Flatten[Table[With[{clObj, i, new = Mod[i, 4] === 1,
	dummy = i > Length[Channel@Channel$Selectors]},
	{If[new, KBFGroup[Frame->False, Height->0], Null[]],
	  KBFButton[WidgetVariable:>chSel[i], NextColumn->Not[new],
	    Command:>(panelState[i] = Channel@Channel$Selectors[[i,2]]@
	      Interface["Channel:Create:Panel", clObj, panelState[i]]),
	    WidgetOption->{If[dummy, State->"disabled", Null[]],
	      Width->8},
	    If[Not[dummy], Text->Channel@Channel$Selectors[[i,1]], Null[]],
	    Null[]]}], {i, ChSelLen}]]],
      KBFGroup[Text->"Channel Information", Height->0],
      Null@@Table[With[{i},
	KBFText[Variable:>chInfo[i], WidgetOption->{Width->ListBoxWidth}]],
	{i, ChInfoLen}],
      KBFGroup[Frame->False, Height->0],
      KBFComponent[ComponentName:>ScrollBar, WidgetVariable:>sb,
	WidgetOption->{
	  Orient->"vertical", Fill->"y", Side->"right",
	  Null[]}],
      KBFComponent[ComponentName:>ListBox, WidgetVariable:>lBox,
	WidgetOption->{YScrollCommand:>sb[Set],
	  SelectMode->"extended",
	  Items->{}, Font->TextFont["fixed", FontSize],
	  Width->ListBoxWidth, Height->ListBoxHeight,
	  BorderWidth->ListBoxBorderWidth,
	  SelectBorderWidth->ListBoxSelectBorderWidth,
	  Side->"left",
	  Null[]}],
!      KBFGroup[Frame->False, Height->0], KBFSeparator[],
      KBFGroup[Frame->True, Height->0],
      KBFFrame[Frame->False, Height->0, Add->{
	KBFCheckButton[Text->"Auto Repeat", Variable:>cbAutoRepeat,
	  Command:>If[Not[cbAutoRepeat] && RepeatAfter <=> Null,
	    AfterCancel[RepeatAfter]; RepeatAfter = Null]],
	}],
      KBFButton[WidgetVariable:>bDraw, Command:>Action$Draw[],
	NextColumn->True, WidgetOption->{State->"disabled", Width->8}],
      Null[]}];

    (* Bind active channel selection event reader *)
    Bind[lBox, "<Button-1>", Action$Select[]];
    Bind[lBox, "<Control-Button-1>", Action$Select[]];
    Bind[lBox, "<Shift-Button-1>", Null];

    (* Bind GUI event handler *)
    Bind[lBox, "<Double-Button-1>", Action$Toggle[]];
    Bind[lBox, "<Button-3>", Action$PopupMenu[]];

    (* Create ChannelBox Menu Button *)
    If[Length[fvopt] > 0, With[{fv = Extract[fvopt,{1,2},Unevaluated$]},
      fv[AddMenuButton] = {bChBoxMenu, Text->"Browser"};
      (* Initialize Menu *)
      ChBoxMenu = Menu[bChBoxMenu, PostCommand:>Module[{},
	ChBoxMenu[Delete] = {1, "end"};
	ChBoxMenu[Add] = {
	  If[ChannelBoxVisible,
	    Button[Text->"Hide ChannelBox",
	      Command:>clObj@Notify["ChannelBox:Withdraw"]],
	    Button[Text->"Show ChannelBox",
	      Command:>clObj@Notify["ChannelBox:Show"]]],
	  Separator[],
	  Button[Text->"Auto Repeat Interval",
	    Command:>Interface["Dialog:AutoRepeatInterval"]],
	  Null[]};
	]];
      ]];

    (* Create Channel Menu Button *)
    If[Length[fvopt] > 0, With[{fv = Extract[fvopt,{1,2},Unevaluated$]},
      fv[AddMenuButton] = {bChMenu, Text->"Channel"};
      (* Initialize Menu *)
      ChMenu[List] = {"/"}; ChMenu["/"] = Menu[bChMenu,
	PostCommand:>With[{sel = SelectedChannelID[]},
	  Channel@GUI$PulldownMenu[sel, clObj@CL$Channel/@sel,
	    MenuVariable:>ChMenu, Variable:>ChMenuVar]]];
      ]];

    (* Store TabFrameVariable *)
    If[Length[tabopt] > 0, With[{fv = Extract[tabopt,{1,2},Unevaluated$]},
      tabf = fv], tabf = f];

    UpdateListBox["Refresh", Clear->True];
    UpdateChannelInfo[]];

  UpdateChannelInfo[] := If[RealQ[active], StandardForm[Module[{l = 1},
    With[{ch = Channel@Channel$Object[clObj@CL$Channel[active]]},
      chInfo[l] = StringJoin["Channel #",
	StringFill[ToString[active], " ", 3], ch@Information["Type"]]; l += 1;
      chInfo[l] = With[{src = ch@Information["Source"]},
	If[StringLength[src] > ListBoxWidth,
	  src[1,ListBoxWidth-3]//"...", src]]; l += 1;
      Scan[With[{text = ch@Information[#]}, If[l > ChInfoLen, Break[],
	chInfo[l] = text; l += 1]]&, Select[ch@Information["Provide"],
	  Position[{"Type", "Source"}, #] === {}&]];
      Do[chInfo[i] = "", {i, l, ChInfoLen}]]]],
    chInfo[1] = "Unselected"; Do[chInfo[i] = "", {i, 2, ChInfoLen}]];

  UpdateListBox[mode_String, argv$___] := Module[{opt, argv,
    id, pos, entry, sel},
    {opt, argv} = SwitchCases[{argv$}, {_Rule|_RuleDelayed, _}];
Print["UpdateListBox: ", mode];
    Switch[mode,
      "Append", If[Length[argv] > 0 && (id = First[argv]; RealQ[id])
	&& Position[clist[[,1]], id] === {},
	pos = Position[Sort[Append[clist[[,1]], id]], id][[1,1]];
	entry = ListBoxEntry[id];
	If[ListQ[entry],
	  lBox[Insert] = {pos - 1, Second[entry]};
	  clist = Insert[clist, entry, pos]]],

      "Remove", If[Length[argv] > 0 && (id = First[argv]; RealQ[id])
	&& (pos = Position[clist[[,1]], id]; pos <=> {}),
	If[active === id, active = Null; UpdateChannelInfo[]];
	pos = pos[[1,1]];
	lBox[Delete] = pos;
	clist = Delete[clist, pos]],

      "Modify", If[Length[argv] > 0 && (id = First[argv]; RealQ[id])
	&& (pos = Position[clist[[,1]], id]; pos <=> {}),
	entry = ListBoxEntry[id]; pos = pos[[1,1]];
	If[ListQ[entry],
	  sel = lBox[Selection];
	  lBox[Insert] = {pos, Second[entry]}; lBox[Delete] = pos;
	  If[Position[sel, pos] <=> {}, lBox[Select$Set] = pos];
 	  If[active === id, AnchorByChannelID[active]];
	  clist = ReplacePart[clist, entry, pos]]],

      "Refresh", With[{newlist = Map[ListBoxEntry, clObj@Active[]],
	yview = TopOfListBox[], selection = SelectedChannelID[],
	clist0 = clist},
	lBox[Delete] = {1, "end"};
	lBox[Insert] = {0, newlist[[,2]]}; clist = newlist;
	If[(Clear /.Override[opt, Clear->True]) === True,
	  If[active <=> Null, active = Null; UpdateChannelInfo[]],
	  SelectByChannelID[selection];
	  If[Position[Intersection[selection clist[[,1]]], active] <=> {},
	    AnchorByChannelID[active], active = Null; UpdateChannelInfo[]]];
	id = If[Length[clist0] < 1, 0,
	  clist0[[Restrict[yview, 1, Length[clist0]], 1]]];
	lBox[YView] = Length[Select[clist, #[[1]] =< id&]]],

      _, (* Nothing TODO *)]];

  ListBoxEntry[id_Real] := With[{cid = clObj@CL$Channel[id],
    ch = Channel@Channel$Object},
    If[Not[RealQ[cid]], Undefined, {id, StringJoin[
      With[{type = ch[cid]@ChannelCategory},
	If[ch[cid]@ActiveQ[], ToUpperCase[type[1]], ToLowerCase[type[1]]]],
      Convert@Dec2Str[id, 4, " "], " ",
      StringReplace[ch[cid]@ExtractProperty["SystemLabel"],
	{"`d"->"_", "`n"->""}]]}]];

  Interface["Dialog:AutoRepeatInterval"] := Module[{w, f, cf, entry, r,
    i0, i},
    i0 = RepeatWait; i = i0;

    w = KBDialogFrame["Dialog:AutoRepeatInterval", f, 
      Title->"Edit Auto Repeat Interval"];
    w[State] = "withdraw"; (* Hide dialog window under construction... *)
    cf = KBFComponentFrame[f, Add->{
      KBFNumber[Text->"Auto Repeat Interval: ",
	Variable:>i, WidgetVariable:>entry],
      KBFHook[Command:>(
        BindWidget[entry, "<Key-Escape>", TkReturn[False]];
        BindWidget[entry, "<Key-Return>", TkReturn[True]];
        entry[Focus$Set])],
      KBFFrame[Add->{
	KBFButton[Text->"Reset", WidgetOption->{Width->8}, NextColumn->True,
	  Command:>(i = i0)],
	KBFButton[Text->"OK",    WidgetOption->{Width->8}, NextColumn->True,
	  Command:>(TkReturn[True])],
	KBFButton[Text->"Close", WidgetOption->{Width->8}, NextColumn->True,
	  Command:>(TkReturn[False])],
	}],
      }];
    w[Close] := TkReturn[False]; (* Bind Close event as Cancel Button *)

    (* Waiting construction of complex widget: KBFTabFrame *)
    Do[(Pause[0.01]; Update[TimerTasks]; (* Invoke After[] events *)
      Update[IdleTasks]), {loop, 5}];
    w[State] = "normal"; (* Show dialog window *)

    While[True,
      If[r = TkWait[]; Not[r], Break[]];

      If[r = RealQ[i] && i > 0; r, Break[],
	Switch[KBFMessageBox["Interval MUST be positive number",
	  Items->{"ReEdit", "Cancel"}, Bitmap->"error",
	  Title->"Parameter Error"],
	  2, Break[], (* Cancel Editing *)
	  _, (* Nothing TODO *)]];
      ];

    If[r, RepeatWait = i];

    w[State] = "withdraw"; cf =.; w[Close] := None; w[Close]; r];

  (* Local Channel ID interface API *)
  SelectedChannelID[] := With[{cid = clist[[,1]], len = Length[clist]},
    Map[With[{index = #}, If[index < 1 || index > len, Null[], cid[[index]]]]&,
      lBox[Selection]]];

  SelectByChannelID[{id___Real}, op___Rule] := SelectByChannelID[id, op];
  SelectByChannelID[id___Real, op___Rule] := Module[{
    rem, clear, toggle, def = {Clear->False, Toggle->False}},
    {clear, toggle, rem} = SwitchCases[Override[op, def],
      {Rule[Clear, _], Rule[Toggle, _], _}];

    If[clear[[1,2]] === True, lBox[Select$Clear] = {1, "end"}];
    With[{pos = Flatten[Position[clist[[,1]], #]&/@{id}],
      sel = lBox[Selection]},
      If[toggle[[1,2]] === True,
	Scan[(lBox[Select$Clear] = #)&, Intersection[pos, sel]];
	Scan[(lBox[Select$Set] = #)&, Complement[pos, sel]],
	Scan[(lBox[Select$Set] = #)&, pos]]];
    ];

  AnchorByChannelID[id_Real] := Scan[(lBox[Select$Anchor] = #)&,
    Flatten[Position[clist[[,1]], id]]];

  (* GUI actions *)
  Action$Select[] := With[{id = ChannelIDatPointer[]},
    If[id <=> active, active = id; UpdateChannelInfo[]]];

  Action$Toggle[] := Scan[With[{
    ch = Channel@Channel$Object[clObj@CL$Channel[#]]},
    ch@SetProperty["Active"->Not[ch@ExtractProperty["Active"]]]]&,
    SelectedChannelID[]];

  Action$PopupMenu[] := Module[{pointer = ChannelIDatPointer[],
    sel = SelectedChannelID[]},

    If[RealQ[pointer] && Position[sel, pointer] === {},
      SelectByChannelID[pointer, Clear->True];
      active = pointer; AnchorByChannelID[active]; UpdateChannelInfo[];
      sel = SelectedChannelID[]];

    Channel@GUI$PopupMenu[sel, clObj@CL$Channel/@sel,
      MenuVariable:>popupMenu, Variable:>popupMenuVar]];

  Action$Draw[] := With[{cmd = bDraw[Text]}, Switch[cmd,
    "Draw"|"Stop", (bDraw[State] = "disabled";
      If[cmd === "Draw" && RepeatAfter <=> Null,
	AfterCancel[RepeatAfter]; RepeatAfter = Null];
      If[cmd === "Stop", cbAutoRepeat = False];
      (* For request discard case *)
      After[3, clObj@Notify["Screen:Request:Status"]];
      clObj@Notify["Screen:Request:"//cmd]; Update[IdleTasks]),
    "Waiting", (* Nothing TODO *),
    _, (* Nothing TODO *)]];

  Action$AutoDraw[] := If[RepeatAfter = Null; cbAutoRepeat,
    bDraw[State] = "disabled";
    After[3, clObj@Notify["Screen:Request:Status"]];
    clObj@Notify["Screen:Request:Draw"]; Update[IdleTasks]];

  (* GUI event decoder *)
  ReceiveNotify[event_, src_, argv___] := Module[{},
Print["Receive: ", event, "[", src,
  Null@@If[Length[{argv}] < 1, {}, Join@@Thread[{",", {argv}}]], "]"];
    Switch[event,
      (* Screen status events *)
      "Screen:State:Dormant", (If[cbAutoRepeat && RepeatAfter === Null,
	RepeatAfter = After[Max[RepeatWait, RenderingCost / 2],
	  Action$AutoDraw[]]];
	bDraw[Text] = "Draw"; bDraw[State] = "normal"),
      "Screen:State:Drawing", bDraw[Text] = "Stop"; bDraw[State] = "normal",
      "Screen:State:Stoping", bDraw[Text] = "Waiting",

      "Screen:TimeUsed:Show", RenderingCost = Max[0, With[{damping = 0.9,
	cost = If[{argv} <=> {}, First[{argv}], 0]}, If[RenderingCost < 0.001,
	  cost, damping * RenderingCost + (1 - damping) * cost]]],

      (* ChannelBox update events *)
      "ChannelBox:Show",     (ChannelBoxVisible = True;  tabf[Pack]),
      "ChannelBox:Withdraw", (ChannelBoxVisible = False; tabf[Forget]),

      (* ChannelList update events *)
      "Channel:Append"|"Channel:Remove", UpdateListBox[event[9,-1], src[[1]]],
      "Channel:Update:List", UpdateListBox["Modify", src[[1]]],
      "Channel:Update:Information", If[active === src[[1]],
	UpdateChannelInfo[]],

      (* Channel selection events *)
      "Channel:Anchor", (SelectByChannelID[src[[1]], Clear->True];
	AnchorByChannelID[src[[1]]];
	active = src[[1]]; UpdateChannelInfo[]),
      "Channel:Select", SelectByChannelID[src[[1]]],
      "Channel:SelectToggle", SelectByChannelID[src[[1]], Toggle->True],
      "Channel:PopupMenu", Channel@GUI$PopupMenu[{src[[1]]}, {src[[2]]},
	MenuVariable:>popupMenu, Variable:>popupMenuVar],

      (* Channel Plugin event *)
      "ChannelPlugin:Register:Selector", Do[With[{i},
	If[i > Length[Channel@Channel$Selectors],
	  chSel[i][Text] = "";
	  chSel[i][State] = "disabled",
	  chSel[i][Text] = Channel$Channel$Selectors[[i,1]];
	  chSel[i][State] = "normal"]], {i, ChSelLen}],

      _, ];
    ];

  TopOfListBox[] := Module[{height = lBox[Height], yview = lBox[YView]},
    If[StringQ[yview],
      yview = ToExpression["{"//StringReplace[yview, " "->","]//"}"]];
    Ceiling[height * yview[[1]] / (yview[[2]] - yview[[1]]) + 0.5]];

  ChannelIDatPointer[] := Module[{yview, line},
    yview = TopOfListBox[];
    line = Floor[((Y/.$Event) - ListBoxBorderWidth - 1)
      / ((FontSize + 1) + 2 * ListBoxSelectBorderWidth)];

    If[Length[clist] < 1, Undefined,
      clist[[Restrict[yview + line, 1, Length[clist]], 1]]]];

  ];
! >>> LogBrowser ChannelListBox class <<<

LogBrowser@RegisterModule["System", ChannelListBox];

! End of File
