!
! LogBrowser ChannelRender Mix-In Class
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: ChannelRender.n,v 1.30 2007/04/17 04:55:26 amorita Exp $
! Style:      Mix-In Class Library
! Require:    Prog/QFunctions.n
!             App/LogBrowser/ChannelEngine.n
!
Library@Require["Prog/QFunctions"];
Library@Require["App/LogBrowser/ChannelEngine"];

! <<< LogBrowser ChannelRender class >>>
ChannelRender=Class[{},
  { ModuleFile = "LogBrowser/ChannelRender.n",
    ModuleClassName = "ChannelRender",
    RevisionID = "$Revision: 1.30 $"[12, -3],
    defProperty = {
      "XAxis"->1, "YAxis"->1,
      "Layer"->0,
      "ShowLegend"->False, "DefaultColor"->"black",
      "PlotStyle"->"Steps", "PointSize"->0, "LineWidth"->0, "StepRatio"->1,
      Null[]},
    ChannelRender$DefaultPlotStyleNumber = 4,
    ChannelRender$PlotStyles = {
      "Dots"->         {Plot->True,  PlotJoined->False, PointSize->0},
      "Points"->       {Plot->True,  PlotJoined->False},
      "Lines"->        {Plot->False, PlotJoined->True},
      "Steps"->        {Plot->False, PlotJoined->Step},
      "Lines&Points"-> {Plot->True,  PlotJoined->True},
      "Steps&Points"-> {Plot->True,  PlotJoined->Step},
      "Steps&Dots"->   {Plot->True,  PlotJoined->Step, PointSize->0},
      Null[]},
    ChannelRender$Options = {
      "TimeRange",
      "UseLabel", "Label", "SystemLabel",
      "ShowLegend", "PlotStyle",
      "PointColor", "PointSize", "LineColor", "LineWidth", "StepRatio",
      Null[]},
    ChannelRender$defProperty = {
      "UseLabel"->False, "Label"->"", "SystemLabel"->"",
      Null[]},
    (* ChannelRender Axis framework*)
    ChannelRender$Axis
    },
  {
    },

  Destructor[] := Module[{},
    ];

  Constructor[] := Module[{},
    ];

  (* Initialize ChannelRender$Axis object for Axis Option *)
  CR$Initialize[] := If[Not[BoundQ[ChannelRender$Axis]],
    ChannelRender$Axis["XAxis"] = UniqID[]; (* Create X1 *)
    ChannelRender$Axis["XAxis"]@Allocate[];
    ChannelRender$Axis["YAxis"] = UniqID[]; (* Create Y1/Y2 *)
    ChannelRender$Axis["YAxis"]@Allocate[];
    ChannelRender$Axis["YAxis"]@Allocate[];
    ];

  (* Provide Axis object id list *)
  Active["XAxis"] := ChannelRender$Axis["XAxis"]@Active[];
  Active["YAxis"] := ChannelRender$Axis["YAxis"]@Active[];

  (* SetProperty hook *)
  SetProperty$[prop:((_Rule|_RuleDelayed)...)] := Module[{axOpt},
    {axOpt} = SwitchCases[{prop},
      {Rule["XAxis"|"YAxis", _]|RuleDelayed["XAxis"|"YAxis", _]}];
    Scan[With[{axis = #[[1]], val = #[[2]]}, If[val > Max[Active[axis]],
      While[val > ChannelRender$Axis[axis]@Allocate[], (* Nop *)]]]&, axOpt]];

  (* Expand rendering properties *)
  RenderProperties[] := Module[{opt, label},
    {label, opt} = SwitchCases[Override[Property[ChannelRender$Options],
      ChannelRender$defProperty],
      {Rule["UseLabel"|"Label"|"SystemLabel", _], _}];
    label = {"UseLabel", "Label", "SystemLabel"}/.label;
    label = If[label[[1]] === True, label[[2]], label[[3]]];
    If[Not[StringQ[label]],
      label = If[label <=> Undefined, ToString[label], ""]];

    With[{defColor = ExtractProperty["DefaultColor"]},
      opt = Override["Label"->label, opt,
	"PointColor"->defColor, "LineColor"->defColor]];

    opt];

  RenderTimeRange[cbuf_, scale_] := "TimeRange"/.cbuf@renderoption[cID];

  RenderDataRange[cbuf_, scale_] := With[{
    minmax = Switch[scale,
      Log, If[RuleQ[#] && Length[#[[2]]] > 0,
	MinMax[Select[#[[2,,2]], # > 0&]], {INF, -INF}]&,
      _,   If[RuleQ[#] && Length[#[[2]]] > 0,
	MinMax[Select[#[[2,,2]], RealQ]], {INF, -INF}]&]},
    If[With[{l = {##}}, Length[l] < 2], {INF, -INF},
      {Min[#1], Max[#2]}]&@@Thread[Map[minmax, cbuf@buffer[cID]]]];

  RenderHorzRange[cbuf_, scale_] := RenderTimeRange[cbuf, scale];

  RenderVertRange[cbuf_, scale_] := RenderDataRange[cbuf, scale];

  RenderGraphics[cbuf_, op___Rule] := Module[{gobj,
    lastrange, lastdata, useline, usepriv,
    bID, opt, source, rem, scOpt, legendOpt,
    style, legend, tag},
    {source, opt} = SwitchCases[Override[op, Source->Date],
      {Rule[Source, _], _}];
    bID = cID; source = source[[1,2]]; Switch[source,
      Math[Correlation, _Real], (bID = -cID;
	ChannelEngine@Correlation[cbuf, bID, {source[[2]], cID}]),

      _, (* Nothing TODO *)];

    {scOpt, legendOpt, rem} = SwitchCases[cbuf@renderoption[cID],
      { Rule["PointSize"|"LineWidth"|"StepRatio"|"PointColor"|"LineColor", _],
	Rule["ShowLegend"|"Label", _],
	_}];

    style = PlotStyle[rem];
    useline = (PlotJoined/.style) <=> False;

    style = Join[style, scOpt/.{
      "PointSize"->PointSize, "LineWidth"->Thickness, "StepRatio"->StepRatio,
      "PointColor"->PointColor, "LineColor"->PlotColor}];

    (* Extract last value *)
    With[{buf = Take[cbuf@buffer[bID], -1]},
      lastdata = If[buf <=> {} && RuleQ[buf[[-1]]] && buf[[-1,2]] <=> {},
	buf[[-1,2,-1,2]], Null]];

    legend = If[("ShowLegend"/.legendOpt) <=> True, {},
      {Legend->StandardForm[StringJoin["CH", "LegendChanelID"/.opt, ": ",
	FormatLegend["Label"/.legendOpt, lastdata]]]}];

    tag = StandardForm[StringJoin["CH:", cID]];

    lastrange = {-INF, -INF};
    lastdata = {};
    gobj = Map[With[{range = If[RuleQ[#], #[[1]], #],
      d = If[RuleQ[#], Select[#[[2]], RealQ[#[[2]]]&], Undefined]},
      usepriv = And[useline,
	Length[lastdata] > 0, Not[lastrange[[2]] < range[[1]]]];
      Which[d === Undefined, Null[],
	Length[d] < 1, lastrange = range; Null[],
	True, ListPlot[If[usepriv, Join[lastdata, d], d],
	  lastrange = range; lastdata = Take[d, -1]; DisplayFunction->Null,
	  Null@@style,
	  Null@@legend, legend = {};
	  LineTags->tag, PointTags->Table[tag, {i, Length[d] + usepriv}],
	  Null@@opt, Null[]]]]&, cbuf@buffer[bID]];

    gobj];

  FormatLegend[format_String, value_] := Module[{i, j, state,
    out, len = StringLength[format]},

    i = 1; out = "";
    While[StringQ[out] && i =< len,
      j = i; While[j =< len && format[j] <=> "%", j += 1]; (* Skip to % *)
      If[i < j, out = out//format[i, j - 1]; i = j; Continue[]];

      state = 0;
      While[0 =< state, j += 1; Switch[{state, j - i, format[j]},
	{0, 1, "%"}, state = -1;
	out = out//"%",

	{0, 1, "v"}, state = -1;
	out = out//StandardForm[$FORM = "";
	  If[RealQ[value], ToString[value], "---"]],

	{0, _, "1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"},     state = 1,
	{1, _, "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"}, state = 1,
	{1, _, "."},                                     state = 2,
	{2, _, "1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"},     state = 3,
	{3, _, "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"}, state = 3,
	{3, _, "v"}, state = -1;
	out = out//StandardForm[$FORM = format[i+1, j-1];
	  If[RealQ[value], ToString[value], "---"]],
	_, state = -2;
	out = $Failed]];
      i = j + 1];
    out];

  PlotStyle[opt:((_Rule|_RuleDelayed)...)] := PlotStyle[{opt}];
  PlotStyle[opt_List] := Switch@@{"PlotStyle"/.opt,
    Null@@(Null@@#&/@ChannelRender$PlotStyles),
    _, ChannelRender$PlotStyles[[ChannelRender$DefaultPlotStyleNumber, 2]]};

  (* Interface botton half API family *)
  (* Interface[PopupMenu] *)
  Interface["PopupMenu:Provide"] := {"Axis", "Layer", "PlotStyle"};

  Interface["PopupMenu:Template:Axis", {cid__}, Variable:>v_] := With[{
    ids = {cid}, ch = Channel$Object, mch = Channel$Object[First[{cid}]]},
    Module[{i = v[0]},
      {200, (* Preference *)
	v[i] = mch@ExtractProperty["XAxis"];
	Cascade[Text->"X-Axis: "//v[i],
	  Add->Append[Map[With[{i, j = #, text = "X"//#,
	    update = Length[ids] > 1 || # <=> v[i]},
	    RadioButton[Text->text, Value->j, Variable:>v[i],
	      Command:>If[update, Scan[ch[#]@SetProperty[
		"XAxis"->j]&, ids]]]]&, Active["XAxis"]],
	    Button[Text->"New X-Axis",
	      Command:>Module[{j = ChannelRender$Axis["XAxis"]@Allocate[]},
		Scan[ch[#]@SetProperty["XAxis"->j]&, ids]]]],
	  i += 1; Null[]],

	v[i] = mch@ExtractProperty["YAxis"];
	Cascade[Text->"Y-Axis: "//v[i],
	  Add->Append[Map[With[{i, j = #, text = "Y"//#,
	    update = Length[ids] > 1 || # <=> v[i]},
	    RadioButton[Text->text, Value->j, Variable:>v[i],
	      Command:>If[update, Scan[ch[#]@SetProperty[
		"YAxis"->j]&, ids]]]]&, Active["YAxis"]],
	    Button[Text->"New Y-Axis",
	      Command:>Module[{j = ChannelRender$Axis["YAxis"]@Allocate[]},
		Scan[ch[#]@SetProperty["YAxis"->j]&, ids]]]],
	  i += 1; Null[]],

	v[0] = i; Separator[]}]];

  Interface["PopupMenu:Template:Layer", {cid__}, Variable:>v_] := With[{
    ids = {cid}, ch = Channel$Object, mch = Channel$Object[First[{cid}]]},
    Module[{i = v[0]},
      {400, (* Preference *)
	v[i] = mch@ExtractProperty["Layer"];
	Cascade[Text->"Layer: "//v[i],
	  Add->Append[Table[With[{i, j, text = ToString[j],
	    update = Length[ids] > 1 || j <=> v[i]},
	    RadioButton[Text->text, Value->j, Variable:>v[i],
	      Command:>If[update, Scan[ch[#]@SetProperty[
		"Layer"->j]&, ids]]]], {j, -5, 5}],
	    Button[Text->"any",
	      Command:>Interface["Dialog:Layer", ids]]],
	  i += 1; Null[]],

	v[0] = i; Separator[]}]];

  Interface["PopupMenu:Template:PlotStyle", {cid__}, Variable:>v_] := With[{
    ids = {cid}, ch = Channel$Object, mch = Channel$Object[First[{cid}]]},
    Module[{i = v[0]}, With[{
      style = mch@PlotStyle[mch@Property["PlotStyle"]]},
      {500, (* Preference *)
	v[i] = mch@ExtractProperty["ShowLegend"];
	With[{i, newvalue = Not[v[i]]},
	  CheckButton[Text->"Show Legend", Variable:>v[i],
	    Command:>Scan[ch[#]@SetProperty["ShowLegend"->newvalue]&, ids],
	    Null[]]], i += 1;

	v[i] = Position[ChannelRender$PlotStyles[[,1]],
	  mch@ExtractProperty["PlotStyle"]];
	v[i] = If[v[i] <=> {}, v[i][[1,1]],
	  ChannelRender$DefaultPlotStyleNumber];
	Cascade[Text->"Plot Style", Add->Table[With[{i, j,
	  text = ChannelRender$PlotStyles[[j, 1]],
	  update = (Length[ids] > 1 || j <=> v[i])},
	  RadioButton[Text->text, Value->j, Variable:>v[i],
	    Command:>If[update, Scan[ch[#]@SetProperty[
	      "PlotStyle"->ChannelRender$PlotStyles[[j, 1]]]&, ids]]]],
	  {j, Length[ChannelRender$PlotStyles]}]], i += 1;

	If[(Plot/.style) <=> True, Null[], Null[
	  Button[Text->"Point Color",
	    Command:>Interface["Dialog:PointColor", ids]],
	  If[(PointSize/.style) === 0, Null[],
	    v[i] = mch@ExtractProperty["PointSize"];
	    Cascade[Text->"Point Size: "//v[i],
	      Add->Append[Table[With[{i, j, text = ToString[j],
		update = Length[ids] > 1 || j <=> v[i]},
		RadioButton[Text->text, Value->j, Variable:>v[i],
		  Command:>If[update, Scan[ch[#]@SetProperty[
		    "PointSize"->j]&, ids]]]], {j, 0, 5, 0.5}],
		Button[Text->"any",
		  Command:>Interface["Dialog:PointSize", ids]]],
	      i += 1; Null[]]]]],

	If[(PlotJoined/.style) === False, Null[], Null[
	  Button[Text->"Line Color",
	    Command:>Interface["Dialog:LineColor", ids]],
	  v[i] = mch@ExtractProperty["LineWidth"];
	  Cascade[Text->"Line Width: "//v[i],
	    Add->Append[Table[With[{i, j, text = ToString[j],
	      update = Length[ids] > 1 || j <=> v[i]},
	      RadioButton[Text->text, Value->j, Variable:>v[i],
		Command:>If[update, Scan[ch[#]@SetProperty[
		  "LineWidth"->j]&, ids]]]], {j, 0, 5, 0.5}],
	      Button[Text->"any",
		Command:>Interface["Dialog:LineWidth", ids]]],
	      i += 1; Null[]]]],

	If[(PlotJoined/.style) <=> Step, Null[],
	  v[i] = mch@ExtractProperty["StepRatio"];
	  Cascade[Text->"Step Ratio: "//v[i],
	    Add->Append[Table[With[{i, j, text = ToString[j],
	      update = Length[ids] > 1 || j <=> v[i]},
	      RadioButton[Text->text, Value->j, Variable:>v[i],
		Command:>If[update, Scan[ch[#]@SetProperty[
		  "StepRatio"->j]&, ids]]]], {j, 0, 1, 0.1}],
	      Button[Text->"any",
		Command:>Interface["Dialog:StepRatio", ids]]],
	      i += 1; Null[]]],

	v[0] = i; Separator[]}]]];

  (* Interface[Dialog] *)
  Interface["Dialog:Layer", {ids__Real}] := Interface["Dialog:Number",
    {ids}, "Layer", Resolution->1];

  Interface["Dialog:PointColor", {ids__Real}] := Interface["Dialog:Color",
    {ids}, "PointColor", Title->"Point Color"];

  Interface["Dialog:PointSize", {ids__Real}] := Interface["Dialog:Number",
    {ids}, "PointSize", Title->"Point Size", Range->{0, INF}, Resolution->0.1];

  Interface["Dialog:LineColor", {ids__Real}] := Interface["Dialog:Color",
    {ids}, "LineColor", Title->"Line Color"];

  Interface["Dialog:LineWidth", {ids__Real}] := Interface["Dialog:Number",
    {ids}, "LineWidth", Title->"Line Width", Range->{0, INF}, Resolution->0.1];

  Interface["Dialog:StepRatio", {ids__Real}] := Interface["Dialog:Number",
    {ids}, "StepRatio", Title->"Step Ratio", Range->{0, 1}, Resolution->0.01];

  ];
ChannelRender@CR$Initialize[];
! >>> LogBrowser ChannelRender class <<<

LogBrowser@RegisterModule["System", ChannelRender];

! End of File
