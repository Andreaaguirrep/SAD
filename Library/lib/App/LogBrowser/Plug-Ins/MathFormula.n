!
! Reversed Poland Math Formula Parser Class Library for LogBrowser
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: MathFormula.n,v 1.20 2005/08/11 02:38:57 amorita Exp $
! Style:      Class Library
! Require:    Prog/Stack.n
!             Prog/QFunctions.n
!
Library@Require["Prog/Stack", "Prog/QFunctions"];

! <<< MathFormula class >>>
MathFormula=Class[{},
  { ModuleFile = "LogBrowser/Plug-Ins/MathFormula.n",
    ModuleClassName = "MathFormula",
    RevisionID = "$Revision: 1.20 $"[12, -3],

    numericOperators = {
      {"add", {"Real","Real"}, "Real", #1 + #2&, "("//#1//"+"//#2//")"&},
      {"sub", {"Real","Real"}, "Real", #1 - #2&, "("//#1//"-"//#2//")"&},
      {"mul", {"Real","Real"}, "Real", #1 * #2&,      #1//"*"//#2&},
      {"div", {"Real","Real"}, "Real", #1 / #2&,      #1//"/"//#2&},
      {"mod", {"Real","Real"}, "Real", Mod[#1,#2]&, "Mod["//#1//","//#2//"]"&},

      {"not", {"Bool"},        "Bool",  Not[#1]&, "Not["//#1//"]"&},
      {"and", {"Bool","Bool"}, "Bool", #1 && #2&,      #1//"&&"//#2&},
      {"or",  {"Bool","Bool"}, "Bool", #1 || #2&, "("//#1//"||"//#2//")"&},

      {"pow", {"Real","Real"}, "Real", #1^#2&, "("//#1//"^"//#2//")"&},

      {"re",  {"Real"}, "Real",  Re[#1]&,  "Re["//#1//"]"&},
      {"im",  {"Real"}, "Real",  Im[#1]&,  "Im["//#1//"]"&},
      {"arg", {"Real"}, "Real",	Arg[#1]&, "Arg["//#1//"]"&},

      {"isnan", {"Real"}, "Bool", #1 === NaN&, "("//#1//"===NaN)"&},

      {"sign",    {"Real"}, "Real",    Sign[#1]&,    "Sign["//#1//"]"&},
      {"abs",     {"Real"}, "Real",     Abs[#1]&,     "Abs["//#1//"]"&},
      {"floor",   {"Real"}, "Real",   Floor[#1]&,   "Floor["//#1//"]"&},
      {"ceiling", {"Real"}, "Real", Ceiling[#1]&, "Ceiling["//#1//"]"&},
      {"round",   {"Real"}, "Real",   Round[#1]&,   "Round["//#1//"]"&},

      {"sqrt",  {"Real"}, "Real", Sqrt[#1]&,   "Sqrt["//#1//"]"&},

      {"exp",   {"Real"} ,"Real",  Exp[#1]&,    "Exp["//#1//"]"&},
      {"log",   {"Real"} ,"Real",  Log[#1]&,    "Log["//#1//"]"&},
      {"log10", {"Real"} ,"Real",  Log[10,#1]&, "Log[10,"//#1//"]"&},

      {"sin",  {"Real"} ,"Real", Sin[ #1]&, "Sin[ "//#1//"]"&},
      {"cos",  {"Real"} ,"Real", Cos[ #1]&, "Cos[ "//#1//"]"&},
      {"tan",  {"Real"} ,"Real", Tan[ #1]&, "Tan[ "//#1//"]"&},
      {"sinh", {"Real"} ,"Real", Sinh[#1]&, "Sinh["//#1//"]"&},
      {"cosh", {"Real"} ,"Real", Cosh[#1]&, "Cosh["//#1//"]"&},
      {"tanh", {"Real"} ,"Real", Tanh[#1]&, "Tanh["//#1//"]"&},

      {"arcsin",  {"Real"} ,"Real", ArcSin[ #1]&, "ArcSin[ "//#1//"]"&},
      {"arccos",  {"Real"} ,"Real", ArcCos[ #1]&, "ArcCos[ "//#1//"]"&},
      {"arctan",  {"Real"} ,"Real", ArcTan[ #1]&, "ArcTan[ "//#1//"]"&},
      {"arcsinh", {"Real"} ,"Real", ArcSinh[#1]&, "ArcSinh["//#1//"]"&},
      {"arccosh", {"Real"} ,"Real", ArcCosh[#1]&, "ArcCosh["//#1//"]"&},
      {"arctanh", {"Real"} ,"Real", ArcTanh[#1]&, "ArcTanh["//#1//"]"&},

      {"eq", {"Real","Real"}, "Bool", #1 === #2&, #1//"==="//#2&},
      {"ne", {"Real","Real"}, "Bool", #1 <=> #2&, #1//"<=>"//#2&},
      {"gt", {"Real","Real"}, "Bool", #1 >   #2&, #1//">  "//#2&},
      {"ge", {"Real","Real"}, "Bool", #1 >=  #2&, #1//">= "//#2&},
      {"lt", {"Real","Real"}, "Bool", #1 <   #2&, #1//"<  "//#2&},
      {"le", {"Real","Real"}, "Bool", #1 <=  #2&, #1//"<= "//#2&},

      {"fromdate", {"Real", "Real", "Real", "Real", "Real", "Real"}, "Real",
	FromDate[{#1, #2, #3, #4, #5, #6}]&,
	"FromDate[{"#1//","//#2//","//#3//","//#4//","//#5//","//#6//"}]"&}
      }
    },
  {
    },

  LexicalAnalyze[formula_String] := Module[{lex, len, error, i, c, res},
    lex = {};
    len = StringLength[formula];
    error = Null;

    i = 1;
    While[i =< len,
      c = formula[i];
      res = Null;
      Which[
	isWhiteSpace[c], (* White Space *),

	isAlphabet[c],   (* Symbol *)
	{i, res} = getSymbol[formula, i],

	Or[isDigit[c],   (* Numeric *)
	  c === ".",
	  c === "-" && (isDigit[formula[i+1]] || formula[i+1] === ".")],
	{i, res} = getNumeric[formula, i],

	c === "#",       (* Channel *)
	{i, res} = getChannel[formula, i],

	isOperator[c],   (* Operator *)
	{i, res} = getOperator[formula, i],

	True, res = $Failed];

      If[res === $Failed, error = {i, formula[i]}; Break[]];

      If[Length[res] > 1, Switch[First[res],
	"Symbol", res = decodeSymbol[res[[2]]],
	"Operator", res[[1]] = If[
	  Position[numericOperators[[,1]], res[[2]]] <=> {},
	  "NumericOperator", "Operator"],
	_, (* Nothing TODO *)];
	AppendTo[lex, res]];

      i += 1];

    If[error === Null,
      If[Length[lex] == 0, error = "Lexical Error: formula is empty"],
      error = "Lexical error at letter '"//error[[2]]//"' in context\""//
	formula[Max[1,error[[1]]-2],error[[1]]+2]//"\""];

    If[error <=> Null, {$Failed, error}, {True, lex}]];

  SyntaxAnalyze[lex$_List, macro$_List:{}] := Module[{lex, stack, chList,
    op, or, dump},
    With[{dim = Dimensions[lex$]}, If[Length[dim] <> 2 || dim[[2]] <> 2,
      Return[{$Failed, "Receive broken lexical"}]]];

    lex   = Stack[]; Scan[lex@Push[#]&, Reverse[lex$]];
    stack = Stack[]; chList = {};
    While[lex@Height[] > 0, Module[{{type, val} = lex@Pop[]}, Switch[type,
      "MacroMark", (* Macro Marker *),

      "Symbol", (* Macro Symbol Expansion *)
	With[{macro = Select[macro$, #[[1]] === val&, 1]},
	  If[macro === {}, Return[{$Failed, "Unkown symbol: "//val}]];
	  With[{lmacro = LexicalAnalyze[macro[[1,2]]]},
	    If[Not[ListQ[lmacro]], Return[{$Failed,
	      "Broken macro definition["//val//"]: "//macro[[1,2]]}]];
	    If[lmacro[[1]] === $Failed, Return[{$Failed,
	      "Macro Expansion Error["//val//"]: "//lmacro[[2]]}]];
	    lex@Push[{"MacroMark", val}];
	    Scan[lex@Push[#]&, Reverse[lmacro[[2]]]]]],

      "Bool",    stack@Push[{"Bool", val}],
      "Numeric", stack@Push[{"Real", val}],

      "Channel", StandardForm[
	If[Position[chList, val] === {}, AppendTo[chList,val]];
	stack@Push[{"RealTerm", "#"//(1 + Position[chList, val][[1,1]])}]],

      "Time", stack@Push[{"RealTerm", val}],

      "Operator", Switch[val,
	"disc", (
	  If[stack@Height[] < 2, Return[{$Failed, "Stack Exception: "//val}]];
	  or = Reverse[{stack@Pop[], stack@Pop[]}];
	  If[typeOperand[or[[1]]] <=> "Bool",
	    Return[{$Failed, "Operand type missmatch: "//or[[1]]}]];
	  If[typeOperand[or[[2]]]<=>"Real",
	    Return[{$Failed, "Operand type missmatch: "//or[[2]]}]];
	  stack@Push[If[isLiterals[{or[[1]]}],
	    If[or[[1,2]], or[[2]], {"Null",}], {"Term", StringJoin[
	      "If[", #1, ",", #2, ",]"]&@@evalOperands[or]}]]),

	"cond", (
	  If[stack@Height[] < 3, Return[{$Failed, "Stack Exception: "//val}]];
	  or = Reverse[{stack@Pop[], stack@Pop[], stack@Pop[]}];
	  If[typeOperand[or[[1]]] <=> "Bool",
	    Return[{$Failed, "Operand type missmatch: "//or[[1]]}]];
	  If[typeOperand[or[[2]]] <=> typeOperand[or[[3]]],
	    Return[{$Failed, "Operand type missmatch: "
	      //or[[2]]//"<=>"//or[[3]]}]];
	  stack@Push[If[isLiterals[{or[[1]]}], If[or[[1,2]], or[[2]], or[[3]]],
	    {typeOperand[or[[2]]]//"Term", StringJoin[
	      "If[", #1, ",", #2, ",", #3, "]"]&@@evalOperands[or]}]]),

	_, Return[{$Failed, "Unkwon operator: "//val}]],

      "StackOperator", Switch[val,
	"pop", (
	  If[stack@Height[] < 1, Return[{$Failed, "Stack Exception: "//val}]];
	  stack@Pop[]),

	"dup", (
	  If[stack@Height[] < 1, Return[{$Failed, "Stack Exception: "//val}]];
	  With[{op = stack@Pop[]}, stack@Push[op]; stack@Push[op]]),

	"swap", (
	  If[stack@Height[] < 2, Return[{$Failed, "Stack Exception: "//val}]];
	  Scan[stack@Push[#]&, {stack@Pop[], stack@Pop[]}]),

	"reverse", (
	  If[stack@Height[] < 1, Return[{$Failed, "Stack Exception: "//val}]];
	  Scan[stack@Push[#]&, Map[stack@Pop[]&, Range[stack@Height[]]]]),

	"rotateup", (
	  If[stack@Height[] < 1, Return[{$Failed, "Stack Exception: "//val}]];
	  Scan[stack@Push[#]&, With[{top = stack@Pop[]},
	    Join[{top}, Reverse[Map[stack@Pop[]&, Range[stack@Height[]]]]]]]),

	"rotatedown", (
	  If[stack@Height[] < 1, Return[{$Failed, "Stack Exception: "//val}]];
	  Scan[stack@Push[#]&, With[{top = Reverse[Map[stack@Pop[]&,
	    Range[stack@Height[]-1]]]}, Join[top, {stack@Pop[]}]]]),

	_, Return[{$Failed, "Unkwon operator: "//val}]],

      "NumericOperator", (
	op = Select[numericOperators, #[[1]] === val&, 1];
	If[Length[op] < 1, Return[{$Failed, "Unkwon operator: "//val}]];
	op = First[op]; With[{orList = op[[2]], rType = op[[3]],
	  litOp = op[[4]], termOp = op[[5]]},
	  If[stack@Height[] < Length[orList],
	    Return[{$Failed, "Stack exception: "//val}]];
	  or = Reverse[Map[stack@Pop[]&, orList]];
	  Scan[If[#[[1]] <=> typeOperand[#[[2]]],
	    Return[{$Failed, "Operand type missmatch: "//#[[2]]}]]&,
	    Thread[{orList, or}]];
	  stack@Push[If[isLiterals[or], {rType, litOp@@or[[,2]]},
	    {rType//"Term", "("//termOp@@evalOperands[or]//")"}]]]),

      _, Return[{$Failed, "Unkown symbol: "//type//"["//val//"]"}]];
      ]];

    dump = Map[With[{type = #[[1]], val = #[[2]]},
      Switch[type,
	"Bool",     {"Literal",   val},
	"Real",     {"Literal",   val},
	"RealTerm", {"Function", ToExpression[val//"&"]},
	"BoolTerm", {"Function", ToExpression[val//"&"]},
	"Term",     {"Function", ToExpression[val//"&"]},
	"Null",     {"Literal", (* *)},
	     _,     {"Literal", (* *)}]]&, stack@Dump[]];

    {True, chList, dump}];

  evalOperands[operands_] := Map[With[{type = #[[1]], val = #[[2]]},
    Switch[type,
      "Real"|"Bool", StandardForm[ToString[val]],
      _, val]]&, operands];

  isLiterals[operands_List] := Complement[operands[[,1]],
    {"Real", "Bool"}] === {};

  typeOperand[operand_] := Switch[First[operand],
    "Bool",     "Bool",
    "BoolTerm", "Bool",
    "Real",     "Real",
    "RealTerm", "Real",
    _, "UNKOWN"];

  decodeSymbol[sym_String] := Module[{type="Symbol", val=ToLowerCase[sym]},
    Switch[val,
      "disc",  type = "Operator",
      "cond",  type = "Operator",
      "if",    type = "Operator"; val = "cond",
      "pop",   type = "StackOperator",
      "dup",   type = "StackOperator",
      "swap",  type = "StackOperator",
      "reverse",     type = "StackOperator",
      "rotateup",    type = "StackOperator",
      "rotatedown",  type = "StackOperator",
      "asin",  val = "arcsin",
      "acos",  val = "arccos",
      "atan",  val = "arctan",
      "asinh", val = "arcsinh",
      "acosh", val = "arccosh",
      "atanh", val = "arctanh",
      "pi",    type = "Numeric"; val = PI,
      "i",     type = "Numeric"; val = I,
      "nan",   type = "Numeric"; val = NaN,
      "true",  type = "Bool";    val = True,
      "false", type = "Bool";    val = False,
      "t",     type = "Bool";    val = True,
      "nil",   type = "Bool";    val = False,
      _, (* Nothing TODO *)];

    If[type === "Symbol" && Position[numericOperators[[,1]], val] <=> {},
      type = "NumericOperator"];

    {type, If[type === "Symbol", sym, val]}];

  (* get term *)
  getSymbol[formula_String, sp_Real] := Module[{i = sp},
    While[isAlphabet[formula[i]] || isDigit[formula[i]], i += 1];
    {i-1, {"Symbol", formula[sp,i-1]}}];

  getChannel[formula_String, sp_Real] := Module[{ch = 0, i = sp + 1},
    Which[
      isDigit[formula[i]], (ch = 0;
	While[isDigit[formula[i]],
	  ch = ch * 10 + StringPosition["0123456789", formula[i]][[1,1]] - 1;
	  i += 1];
	{i-1, {"Channel", ch}}),

      isAlphabet[formula[i]], (
	While[isAlphabet[formula[i]] || isDigit[formula[i]], i += 1];
	Switch[ToLowerCase[formula[sp+1,i-1]],
	  "t",  {i-1, {"Time", "#"}},
	  "tp", {i-1, {"Time", "(# - \"Begin\") / (\"End\" - \"Begin\")"}},
	  "tb", {i-1, {"Time", "(\"Begin\")"}},
	  "te", {i-1, {"Time", "(\"End\")"}},
	  "tw", {i-1, {"Time", "(\"End\" - \"Begin\")"}},
	  _,    {i-1, $Failed}]),

      True, {i-1, $Failed}]];

  getNumeric[formula_String, sp_Real] := Module[{i0, i1, i2, i = sp},
    If[formula[i] === "-", i += 1]; (* Skip sign *)

    i0 = i; While[isDigit[formula[i]], i += 1];

    i1 = i; If[formula[i] === ".",
      If[i1 == i0 && Not[isDigit[formula[i+1]]], Return[{i, $Failed}]];
      i += 1; While[isDigit[formula[i]], i += 1]];

    i2 = i; If[i2 == i0, Return[{i, $Failed}]];
    If[StringPosition["eEdD", formula[i]] <=> {},
      Which[
	formula[i+1] === "+" || formula[i+1] === "-", If[isDigit[formula[i+2]],
	  i += 2, Return[{i+1, $Failed}]],
	isDigit[formula[i+1]], i += 1,
	True, Return[{i, $Failed}]];
      While[isDigit[formula[i]], i += 1]];

    {i-1, {"Numeric", Check[ToExpression[formula[sp,i-1]], NaN]}}];

  getOperator[formula_String, sp_Real] := Module[{op, i = sp},
    Switch[formula[i],
      "+", op = "add",
      "-", op = "sub",
      "*", op = "mul",
      "/", op = "div",

      "~", op = "not",
      "&", op = "and",
      "|", op = "or",

      "^", op = "pow",

      "!", Switch[formula[++i],
	"=", op = "ne",
	  _, Return[{i-1, $Failed}]],

      "=", Switch[formula[++i],
	"=", op = "eq",
	"<", op = "le",
	">", op = "ge",
	  _, op = "eq"; --i],

      "<", Switch[formula[++i],
	">", op = "ne",
	"=", op = "le",
	  _, op = "lt"; --i],

      ">", Switch[formula[++i],
	"<", op = "ne",
	"=", op = "ge",
	  _, op = "gt"; --i],

        _, Return[{i, $Failed}]];

    {i, {"Operator", op}}];

  (* isctype *)
  isWhiteSpace[c_String] := Switch[ToCharacterCode[c[1]],
    { 9}, True, (* lf *)
    {10}, True, (* ht *)
    {13}, True, (* cr *)
    {32}, True, (* space *)
    _, False];

  isAlphabet[c_String] := StringPosition[
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", c[1]] <=> {};

  isDigit[c_String] := StringPosition["0123456789", c[1]] <=> {};

  isOperator[c_String] := StringPosition["+-*/~&|^!=<>", c[1]] <=> {};

  ];
! >>> MathFormula class <<<

LogBrowser@RegisterModule["Extension", MathFormula];

! End of File
