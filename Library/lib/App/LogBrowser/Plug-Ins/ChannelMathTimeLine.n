!
! LogBrowser Channel$MathTimeLine Plugin Class
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: ChannelMathTimeLine.n,v 1.4 2006/06/27 01:06:00 amorita Exp $
! Style:      Plugin Class Library
! Require:    Prog/QFunctions.n
!
Library@Require["Prog/QFunctions"];

! <<< LogBrowser Channel$MathTimeLine plugin class >>>
Channel$MathTimeLine=Class[{Channel},
  { ModuleFile = "LogBrowser/Plug-Ins/ChannelMathTimeLine.n",
    ModuleClassName = "Channel$MathTimeLine",
    RevisionID = "$Revision: 1.4 $"[12, -3],
    ChannelCategory = "Mathematical Record", ChannelType = "TimeLine",
    defProperty,
    TimeLineFunctions = {
      {"Integral0", "Integral by rectangle"},
      {"Integral1", "Integral by trapezoid"},
      Null[]}
    },
  { TimeLineMethod, TimeLineSource, TimeLineSourceObject
    },

  Destructor[] := (Channel`Destructor[]);

  Constructor[path_String] := Module[{decode},
    Channel`Constructor[];

    If[Not[BoundQ[defProperty]], defProperty = Override[
      "Scale:Numerator"->1, "Scale:Denominator"->1,
      Channel`defProperty]];

    decode = DecodePath[path];
    If[decode === $Failed, Debug[PANIC, "Constructor",
      "Time line function decode error"]];

    {TimeLineMethod, TimeLineSource, TimeLineSourceObject} = decode;
    ReplaceCite[TimeLineSourceObject];

    SetInstDefProperty["URL":>DefaultURL[],
      "SystemLabel":>DefaultLabel[],
      "TimeRange":>DefaultTimeRange[],
      "Discriminator":>DefaultDiscriminator[],
      "Scale":>Check[Divide@@ExtractProperty[
	"Scale:Numerator", "Scale:Denominator"], 1],
      Null[]];
    RegisterNotifyProperty["List", {"URL"}];
    RegisterNotifyProperty["Information", {"URL",
      "Scale:Numerator", "Scale:Denominator"}];

    Notify["Channel:Construct", "URL"->DefaultURL[]];
    SetProperty@@Select[Options, StringQ[#[[1]]]&]];

  DecodePath[path_String, opt___Rule] := Module[{pos, len,
    method, argv, id, cid},
    If[pos = StringPosition[path, "/#"]; pos === {}, Return[$Failed]];
    If[Length[pos] <> 1, Return[$Failed]];

    method = path[1,pos[[1,1]]-1];
    argv = path[pos[[1,2]]+1,-1];

    (* Check TimeLine function type *)
    Switch[method,
      "Integral0"|"Integral1", (* Valid methods *),
      _, Return[$Failed]];

    (* Decode channel number argument *)
    len = StringLength[argv]; id = 0; Do[(
      pos = StringPosition["0123456789", argv[i]];
      If[pos === {}, Return[$Failed]];
      id = 10 * id + pos[[1,1]] - 1), {i, len}];

    (* Mapping channel object ID *)
    With[{cmap = Mapping/.Override[opt, Mapping->Channel$Map]},
      cid = cmap[id]];
    If[Not[RealQ[cid] && ValidCiteQ[cid]], Return[$Failed]];

    {method, id, cid}];

  (* Local default functions... *)
  DefaultURL[] := StandardForm[StringJoin[
    ChannelType, "://", TimeLineMethod, "/#", TimeLineSource]];

  DefaultLabel[] := StandardForm[StringJoin[Switch[TimeLineMethod,
    "Integral0", "Integral`d0`n",
    "Integral1", "Integral`d1`n",
    _, TimeLineMethod], "[", TimeLineSource, "]"]];

  DefaultTimeRange[] := With[{ch = Channel$Object},
    {Max[#1], Min[#2]}&@@Thread[Append[
      Map[ch[#]@ExtractProperty["TimeRange"]&, Channel$Cite], {-INF, INF}]]];

  (* Channel Plugin API functions *)
  (* Override Property functions *)
  SetProperty[prop:((Rule[_String, _]|RuleDelayed[_String, _])...)] := Module[{
    rem, scale, url, path, decode},
    {url, scale, rem} = SwitchCases[{prop}, {
      Rule["URL", _]|RuleDelayed["URL", _],
      Rule["Scale", _]|RuleDelayed["Scale", _],
      _}];

    If[Length[url] > 0, url = url[[1,2]]; If[ValidURLMethodQ[url],
      path = StripURLMethod[url];
      If[decode = DecodePath[path]; decode <=> $Failed,
	{TimeLineMethod, TimeLineSource, TimeLineSourceObject} = decode;
	ReplaceCite[TimeLineSourceObject];
	Notify["Channel:Property:Set", "URL"->DefaultURL[]],
	Debug[ERROR, "SetProperty",
	  "Invalid math time line function[", path, "] is requested"]],
      AppendTo[rem, "URL"->url]]];

    If[Length[scale] > 0, scale = scale[[1,2]]; If[RealQ[scale],
      rem = Override["Scale:Numerator"->scale, "Scale:Denominator"->1, rem],
      Debug[ERROR, "SetProperty",
	"Invalid Scale property[", scale, "] is requested"]]];

    Channel`SetProperty@@rem];

  (* Information API family *)
  Information["Provide"] := {"Type", "Source", "Scaling"};

  Information["Source"] := DefaultURL[];

  Information["Scaling"] := Module[{scale}, StandardForm[StringJoin[
    scale = ExtractProperty["Scale:Numerator", "Scale:Denominator"];
    If[scale[[2]] < 0, scale = scale * -1];
    "Scaling Factor: ", scale[[1]], "/", scale[[2]]]]];

  (* Retrieve* API family *)
  RetrieveQueue[cbuf_] := With[{ch = Channel$Object},
    Scan[ch[#]@RetrieveQueue[cbuf]&, Channel$Cite];
    cbuf@retrieveoption[cID] = Property["Scale", "Discriminator"];
    cbuf@request[cID] = {Channel$Cite,
      TimeLineMethod, TimeLineSourceObject};
    cbuf@Activate[cID]];

  RetrievePoll[cbuf_] := With[{ch = Channel$Object},
    Min[1, Map[ch[#]@RetrievePoll[cbuf]&, First[cbuf@request[cID]]]]];

  RetrieveUpdate[cbuf_, timestamp_Real] := Module[{msec}, With[{
    ch = Channel$Object,
    func = cbuf@request[cID][[2]], srcID = cbuf@request[cID][[3]],
    disc = "Discriminator"/.cbuf@retrieveoption[cID],
    scale = "Scale"/.cbuf@retrieveoption[cID]},
    Scan[ch[#]@RetrieveUpdate[cbuf, timestamp]&, First[cbuf@request[cID]]];

    msec = TimeUsed[];
    ChannelEngine@FilterFunction[func, cbuf, cID, srcID, scale];
    Debug[DEBUG, "RetrieveUpdate", "Accumulated CPU time of ",
      "FilterFunction[", func, "]: ", 1e3 * (TimeUsed[] - msec), "msec"];

    If[FunctionQ[disc],
      msec = TimeUsed[];
      cbuf@Copy[-cID, cID]; ChannelEngine@ApplyFilter1[cbuf, cID, -cID, disc];
      Debug[DEBUG, "RetrieveUpdate", "Accumulated CPU time of ",
	"Discrimination: ", 1e3 * (TimeUsed[] - msec), "msec"]];
    ]];

  (* Interface bottom half API family *)
  Interface["Provide"] := Join[{
    "Channel:Create", "Channel:Create:Panel",
    Null[]}, Channel`Interface["Provide"]];

  Interface["PopupMenu:Provide"] := Join[{
    "Edit/Discriminator", "Edit/MathTimeLineScale",
    Null[]}, Channel`Interface["PopupMenu:Provide"]];

  Interface["Channel:Create", opt:((_Rule|_RuleDelayed)...)] := Module[{rem,
    url, path},
    {url, rem} = SwitchCases[Override[opt],
      {Rule["URL", _]|RuleDelayed["URL", _], _}];

    If[Length[url] > 0, url = url[[1, 2]];
      If[ValidURLMethodQ[url]
        && (path = StripURLMethod[url]; DecodePath[path,
	  Null@@({opt}/.Literal[Channel$Map]->Mapping)] <=> $Failed),
        Channel$MathTimeLine[path, Null@@rem],
        Debug[ERROR, "Interface[Channel:Create]",
          "Invalid time line function[", path, "] is requested"]; $Failed],
      Debug[ERROR, "Interface[Channel:Create]",
        "\"URL\" property MUST be specified for creating Channel"];
      $Failed]];

  Interface["Channel:Create:Panel", clObj_, stat$_:{}] := Module[{stat,
    func, id, def = {"Function"->"Integral0"},
    w, f, cf},
    active = clObj@Active[];
    If[Length[active] < 1, KBFMessageBox[
      "Math TimeLine channel requires sourece channels!",
      Font->TextFont["fixed", 14],
      Title->"No Channel Error"]; Return[stat$]];


    stat = Override[Select[stat$, RuleQ], def];

    func = Position[TimeLineFunctions[[,1]], "Function"/.stat];
    func = If[func === {}, 1, func[[1,1]]];
    id = Position[active, "Channel"/.stat];
    id = If[id === {}, 1, id[[1,1]]];

    w = KBDialogFrame["Channel:Create:Panel", f,
      Title->"Math TimeLine Function Channel Creator"];
    w[State] = "withdraw"; (* Hide dialog window under construction... *)
    cf = KBFComponentFrame[f, Add->{
      KBFText[Text->"Function: ", WidgetOption->{PadY->4}],
      KBFText[Text->"Source:   ", WidgetOption->{PadY->4}],
      KBFOptionMenu[Variable:>func, WidgetOption->{TextAnchor->"w", Width->30},
	Items->TimeLineFunctions[[,2]], NextColumn->True],
      KBFOptionMenu[Variable:>id,   WidgetOption->{TextAnchor->"e", Width->3},
	Items->StandardForm[ToString/@active]],
      KBFFrame[Add->{
	KBFButton[Text->"Add", WidgetOption->{Width->8}, NextColumn->True,
	  Command:>StandardForm[
	    clObj@AddChannel["URL"->StringJoin[ChannelType, "://",
	      TimeLineFunctions[[func,1]], "/#", active[[id]]],
	      "ShowLegend"->True]]],
	KBFButton[Text->"Close", WidgetOption->{Width->8}, NextColumn->True,
	  Command:>(TkReturn[0])],
	}],
      }];
    w[Close] := TkReturn[0]; (* Bind Close event as Cancel Button *)

    (* Waiting construction of complex widget: KBFTabFrame *)
    Do[(Pause[0.01]; Update[TimerTasks]; (* Invoke After[] events *)
      Update[IdleTasks]), {loop, 5}];
    w[State] = "normal"; (* Show dialog window *)

    r = TkWait[]; w[State] = "withdraw";

    stat = {"Function"->TimeLineFunctions[[func,1]], "Channel"->active[[id]]};

    cf =.; w[Close] := None; w[Close];

    stat];

  (* Interface[PopupMenu] *)
  Interface["PopupMenu:Template:Edit/MathTimeLineScale", {cid__}, Variable:>v_] := With[{
    ids = {cid}, ch = Channel$Object, mch = Channel$Object[First[{cid}]]},
    {1200, (* Preference *)
      If[Length[{cid}] > 1, Null[], Null[
	Cascade[Text->"Edit", Add->{
	  Button[Text->"Scaling Factor",
	    Command:>Interface["Dialog:MathTimeLineScale", ids]],
	  Separator[]}],
	Separator[]]]}];

  (* Interface[Dialog] *)
  Interface["Dialog:MathTimeLineScale", {ids__Real}] := Module[{w, f, cf,
    entry, r, p0, q0, p, q,
    cid = First[{ids}]},

    {p0, q0} = Channel@Channel$Object[cid]@ExtractProperty[
      "Scale:Numerator", "Scale:Denominator"]; {p, q} = {p0, q0};

    w = KBDialogFrame["Dialog:MathTimeLineScale", f,
      Title->"Edit Math TimeLine Scaling Factor"];
    w[State] = "withdraw"; (* Hide dialog window under construction... *)
    cf = KBFComponentFrame[f, Add->{
      KBFFrame[Add->{
	KBFGroup[Frame->False],
	KBFText[Text->"Scaling Factor: ", WidgetOption->{PadY->18}],
	KBFGroup[NextColumn->True, Frame->False],
	KBFNumber[Variable:>p, WidgetVariable:>entry[1],
	  WidgetOption->{PadY->2}],
	KBFSeparator[],
	KBFNumber[Variable:>q, WidgetVariable:>entry[2],
	  WidgetOption->{PadY->2}],
	}],
      KBFHook[Command:>(
	Bind[entry[1], "<Key-Return>", entry[2][Focus$Set]];
	Bind[entry[2], "<Key-Return>", TkReturn[True]];
	entry[1][Focus$Set])],
      KBFFrame[Add->{
	KBFButton[Text->"Reset", WidgetOption->{Width->8}, NextColumn->True,
	  Command:>(p = p0; q = q0)],
	KBFButton[Text->"OK", WidgetOption->{Width->8}, NextColumn->True,
	  Command:>(TkReturn[True])],
	KBFButton[Text->"Close", WidgetOption->{Width->8}, NextColumn->True,
	  Command:>(TkReturn[False])],
	}],
      }];
    w[Close] := TkReturn[False]; (* Bind Close event as Cancel Button *)

    (* Waiting construction of complex widget: KBFTabFrame *)
    Do[(Pause[0.01]; Update[TimerTasks]; (* Invoke After[] events *)
      Update[IdleTasks]), {loop, 5}];
    w[State] = "normal"; (* Show dialog window *)

    While[True,
      If[r = TkWait[]; Not[r], Break[]];
      If[RealQ[p] && RealQ[q] && q <=> 0, Break[],
	Switch[KBFMessageBox[Switch[{RealQ[p], RealQ[q], q === 0},
	  {_, _, True}, "Denominator MUST be non-zero",
	  _, "Scaling factor MUST be Real"],
	  Title->"Scaling Factor Error",
	  Items->{"ReEdit", "Cancel"}, Bitmap->"error"],
	  2, r = False; Break[], (* Cancel Editing *)
	  _, (* Nothing TODO *)]];
      ];
    If[Length[{ids}] == 1 && {p0, q0} === {p, q}, r = False];

    If[r, (
      Scan[Channel@Channel$Object[#]@SetProperty[
	"Scale:Numerator"->p, "Scale:Denominator"->q]&, {ids}];
      )];

    w[State] = "withdraw"; cf =.; w[Close] := None; w[Close]; r];

  ];
! >>> LogBrowser Channel$MathTimeLine plugin class <<<

LogBrowser@RegisterModule["Plugin", Channel$MathTimeLine];

! End of File
