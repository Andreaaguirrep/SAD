!
! Numeric/String Convert Mix-in Library
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: Convert.n,v 1.8 2006/04/05 05:49:30 amorita Exp $
! Style:      Mix-in Class Library
! Require:    Local File Access to X11 Color DataBase
!

! <<< Convert Mix-in class >>>
Convert=Class[{},
  { Convert$Dec2Hex, Convert$Hex2Dec,
    Convert$X11ColorDB,
    Convert$X11ColorFiles = {"/usr/X11R6/lib/X11/rgb.txt",
      "/usr/lib/X11/rgb.txt"}
    },
  {
    },

  Convert$Initialize[] := (
    Convert$Dec2Hex = "0123456789abcdef";
    Convert$Hex2Dec[_] := 0;
    Do[With[{i}, Convert$Hex2Dec[Convert$Dec2Hex[i]] := i-1],
      {i, StringLength[Convert$Dec2Hex]}];
    Convert$X11ColorDB[str_] := (
      Convert$InitializeX11ColorDB[]; Convert$X11ColorDB[str]);
    );

  Convert$InitializeX11ColorDB[] := Module[{fp = $Failed, db = {},
    line, i, space},
    Scan[If[FileQ[#] && (fp = OpenRead[#]; fp <=> $Failed), Break[]]&,
      Convert$X11ColorFiles];

    If[fp <=> $Failed, While[line = Read[fp, String]; line <=> EndOfFile,
      (* Remove '!' comment *)
      line = line[1, StringPosition[line//"!", "!", 1][[1,1]]-1];

      (* Replace `\t' by ` ' *)
      line = StringJoin@@(Characters[line]/.{"\t"->" "});

      (* Remove tail ` ' *)
      i = 1; While[line[-i] == " ", i++]; line = line[1, -i];

      (* Parse X11 Color Database *)
      space = With[{pos = StringPosition[" "//line, " "][[,1]]},
	Select[Thread[{pos, Append[Drop[pos,1], Last[pos]+2] - pos}],
	  (#[[2]]>1)&, 4][[,1]]];

      If[Length[space]<=>4, Continue[]];
      With[{entry={line[space[[4]], -1],
	ToExpression/@{line[space[[1]], space[[2]]-1],
	  line[space[[2]], space[[3]]-1],
	  line[space[[3]], space[[4]]-1]}}},
	If[And@@((RealQ[#] && 0=<# && #=<255)&/@Second[entry]),
	  AppendTo[db, entry]];
	];
      ]; Close[fp]];

    Clear[Convert$X11ColorDB];
    Convert$X11ColorDB[_] := {0, 0, 0};
    Scan[With[{color=#[[1]], rgb=#[[2]]},
      Convert$X11ColorDB[color] = rgb]&, db]];

  (* Hex <-> Decimal *)
  Dec2Hex[dec_Real] := Module[{str, i},
    If[dec < 0, Return[""]];
    If[dec == 0, "0", For[str = ""; i = dec, i > 0, i = Floor[i / 16],
      str = Convert$Dec2Hex[Mod[i, 16] + 1]//str]; str]];

  Dec2Hex[dec_Real, digit_Real] := StringDrop[StringFill["", "0", digit]//#,
    StringLength[#]]&[Dec2Hex[dec]];

  Hex2Dec[hex_String] := With[{len = StringLength[hex]},
    Plus@@(Convert$Hex2Dec/@Characters[hex] * Table[16^(len - i), {i, len}])];

  (* Decimal -> String *)
  Dec2Str[dec_Real] := StandardForm[ToString[dec]];

  Dec2Str[dec_Real, digit_Real, fill$_String:"0"] := With[{str = Dec2Str[dec],
    fill = (fill$//"0")[1]},
    (StringFill["", fill, digit]//str)[-digit,-1]];

  (* Color Converter Subfunction *)
  Convert$HSVhat[x_Real] := With[{y = Abs[Mod[6 * x, 6] - 3]},
    Restrict[y - 1, 0, 1]];

  (* HSV <-> RGB *)
  HSV2RGB[_] := $Failed;
  HSV2RGB[color_List] := HSV2RGB@@color;
  HSV2RGB[h_Real, s_Real, v_Real] :=
    v * (1 - s * (1 - Convert$HSVhat/@{h, h - 1/3, h + 1/3}));

  RGB2HSV[_] := $Failed;
  RGB2HSV[color_List] := RGB2HSV@@color;
  RGB2HSV[r$_Real, g$_Real, b$_Real] := Module[{eps = 1/4096, scale = 4095,
    r, g, b, h, s, v},
    {r, g, b} = Restrict[Round[{r$, g$, b$} * scale], 0, scale] / scale;
    If[v = Max[r, g, b]; v < eps, {0, 1, 0} (* Pure Black *),
      If[s = 1 - Min[{r, g, b} / v]; s < eps, {0, 0, v} (* Pure Gray *),
	h = Sort[Thread[{Range[3], 1 - (1 - {r, g, b} / v) / s}],
	  (#1[[2]] > #2[[2]])&];
	{Mod[Switch[h[[{1,2},1]],
	  {1, 2}, (* R/G Region *)     h[[2,2]],
	  {2, 1}, (* G/R Region *) 2 - h[[2,2]],
	  {2, 3}, (* G/B Region *) 2 + h[[2,2]],
	  {3, 2}, (* B/G Region *) 4 - h[[2,2]],
	  {3, 1}, (* B/R Region *) 4 + h[[2,2]],
	  {1, 3}, (* R/B Region *) 6 - h[[2,2]]]/6, 1], s, v}]]];

  (* HSV <-> X11Color *)
  HSV2X11Color[_] := $Failed;
  HSV2X11Color[color_List] := HSV2X11Color@@color;
  HSV2X11Color[h_Real, s_Real, v_Real] := StringJoin@@Prepend[
    Dec2Hex[#, 2]&/@Round[255 * HSV2RGB[h, s, v]], "#"];

  X11Color2HSV[_] := $Failed;
  X11Color2HSV[str_String] := RGB2HSV@@X11Color2RGB[str];

  (* RGB <-> X11Color *)
  RGB2X11Color[_] := $Failed;
  RGB2X11Color[color_List] := RGB2X11Color@@color;
  RGB2X11Color[r_Real, g_Real, b_Real] := StringJoin@@Prepend[
    Dec2Hex[#, 2]&/@Round[255 * Restrict[{r, g, b}, 0, 1]], "#"];

  X11Color2RGB[_] := $Failed;
  X11Color2RGB[str_String] := (If[str[1] <=> "#", Convert$X11ColorDB[str],
    Hex2Dec/@{str[2,3],str[4,5],str[6,7]}] / 255);

  (* SAD Time <-> Kaleida Time mm/dd/CCYY HH:MM:SS`' *)
  Time2Kaleida[time_Real] := With[{eps = 0.01,
    date = ToDate[time, Tick->0.01]},
    StringJoin[Dec2Str[date[[2]], 2], "/", Dec2Str[date[[3]], 2], "/",
      Dec2Str[date[[1]], 4], " ", Dec2Str[date[[4]], 2], ":",
      Dec2Str[date[[5]], 2], ":", Dec2Str[Floor[date[[6]]], 2],
      If[date[[6]] - Floor[date[[6]]] < eps, "",
	Null[".", Dec2Str[100 * (date[[6]] - Floor[date[[6]]]), 2]]]]];

  Kaleida2Time[time_String] := If[Not[time[3] == "/" && time[6] == "/"
    && time[11] == " " && time[14] == ":" && time[17] == ":"], $Failed,
    Check[FromDate[ToExpression[StringJoin["{",
      time[7,10], ",", time[1,2], ",", time[4,5], ",",
      time[12,13], ",", time[15,16], ",", time[18, -1], "}"]]], $Failed]];

  (* SAD Time <-> JST Time CCYY-mm-dd HH:MM:SS`' *)
  Time2JST[time_Real] := With[{eps = 0.01,
    date = ToDate[time, Tick->0.01]},
    StringJoin[Dec2Str[date[[1]], 4], "-", Dec2Str[date[[2]], 2], "-",
      Dec2Str[date[[3]], 2], " ", Dec2Str[date[[4]], 2], ":",
      Dec2Str[date[[5]], 2], ":", Dec2Str[Floor[date[[6]]], 2],
      If[date[[6]] - Floor[date[[6]]] < eps, "",
	Null[".", Dec2Str[100 * (date[[6]] - Floor[date[[6]]]), 2]]]]];

  JST2Time[time_String] := If[Not[Or[(time[5] == "-" && time[8] == "-"),
    (time[5] == "/" && time[8] == "/")]
    && time[11] == " " && time[14] == ":" && time[17] == ":"], $Failed,
    Check[FromDate[ToExpression[StringJoin["{",
      time[7,10], ",", time[1,2], ",", time[4,5], ",",
      time[12,13], ",", time[15,16], ",", time[18, -1], "}"]]], $Failed]];

  ];
! >>> Convert Mix-in class <<<
Convert@Convert$Initialize[];

! End of File
