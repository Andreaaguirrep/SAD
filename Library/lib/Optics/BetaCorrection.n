!
! Global Beta Correction Tool for KEKB
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: BetaCorrection.n,v 1.63 2007/10/03 13:14:53 amorita Exp $
! Style:      Class Library
! Require:    LEROptics/HEROptics@KEKBOptics.n
!             KEKBOrbitUtil.n
!             Prog/QFunctions.n
!
Library@Require["KEKBOrbitUtil", "Prog/QFunctions"];

! <<< BetaCorrection class >>>
BetaCorrection=Class[{KEKBOrbitUtil}, (* Global Beta Correction Library *)
  { Driver$def={Restore->False, MaximumIteration->10, Damping->1,
    InitialFudge->{}, StopRequest:>False,
    CODTolerance->1e-6,
    TuneTolerance->0.001, BetaTolerance->0.1, PhaseTolerance->0.1,
    Literal[Steerings]->Undefined, BPM:>Take[LINE["NAME", "M*"], {2,-2}],
    Method->Compatible, Algorism->"",
    CalcCommand->"CELL; CALC NOEXPAND", Output->0
      },
    InitialFudge$def={QuadFudge->{}, SextBumpFudge->{}, SextMoverFudge->{},
      FudgeOption->{}, BumpShape->{}
      },
    def={Tolerance->0.01, Division->2, HeuristicWeight->False,
    (* Vartual Fudge Variables for Input Data Arbitrary *)
    UseBetaFudge->True,  WeightBetaFudge->1,
    UsePhaseFudge->True, WeightPhaseFudge->1,
    UseDifferentialPhase->False,
    (* Fudge Variables *)
    UseQuadFudge->True,  WeightQuadFudge->1,
    UseSextBump->False,  WeightSextBump->0.1,
    UseSextMover->False, WeightSextMover->0.1,
    (* Correction Confitions *)
    CorrectTune->True,   WeightTune->{1, 1},
    CorrectBeta->True,   WeightBeta->{1, 1},
    CorrectPhase->False, WeightPhase->{1, 1},
    KeepWaist->False,    WeightWaist->{1, 1},
    CouplingBalance->1,
    WeightMonitor->{1, 1},
    CorrectOffMomentum->True, WeightOffMomentum->1,
    (* Calc command for momentum change *)
    CalcCommand->"CELL; CALC NOEXPAND"
      },
    AddFudge$def={Tolerance->1e-6,
      BPM:>Take[LINE["NAME", "M*"], {2,-2}], Literal[Steerings]->Undefined,
      Damping->1, CalcCommand->"CELL; CALC NOEXPAND", Output->0
      },
    DriverFlags=(Rule[Restore|MaximumIteration|Damping
      |TuneTolerance|BetaTolerance|PhaseTolerance, _Real]
      |Rule[InitialFudge, _List]|RuleDelayed[StopRequest, _]
      |Rule[CODTolerance, _Real]|Rule[CODTolerance, _List]
      |Rule[Literal[Steerings], _List]|Rule[Literal[Steerings], Undefined]
      |Rule[BPM, _List]|RuleDelayed[BPM, _]
      |Rule[Method, _]|Rule[Algorism, _]
      |Rule[CalcCommand, _String]|Rule[Output, _Real]),
    QuadCorrectorFlags=(
      Rule[UseQCS|UseQC1|UseQC2|UseQInjection|UseQD3|UseQF4|KeepMinusI, _Real]
      |Rule[CorrQuadrupoles|ExCorrQuadrupoles, _List]),
    SextMoverCorrectorFlags=(Rule[CorrSextMovers, _List]),
    BumpCorrectorFlags=(Rule[CorrSextBumps, _List]),
    },
  { Ring, (* Instance Variable for Options *)
    SXBumpSteering, (* Sextupole bump steerings *)

    (* State Variable for Correction Strategy Engines *)
    quadFudge, bumpFudge, moverFudge, fudgeOpt, (* Correction Fudges *)
    codBPM, codBase, cod, codSteering, (* COD & Steering *)
    dP0, chicaneLER, (* LER Chicane *)
    },

  Destructor[] := Module[{},
    ];

  Constructor[] := Module[{},
    (* Generate Steering list for SEXT bump *)
    (* This implementation will be replaced more general version *)
    SXBumpSteering=Switch[Ring@RingID,
      "LER", (* Steering Set for LER SEXT set {SD, SF, SF, SD} *)
      { {"ZHQSATLP","ZHQS2TLP", "ZHQF6P1",  "ZHQF4P1",  "ZHQF2P1"},
	{"ZHQF2P2", "ZHQF4P2",  "ZHQF6P2",  "ZHQF4P3",  "ZHQF2P3"},
	{"ZHQF2P4", "ZHQF4P4",  "ZHQF6P3",  "ZHQF4P5",  "ZHQF2P5"},
	{"ZHQF2P6", "ZHQT2TNP1","ZHQT4TNP1","ZHQT4TNP2","ZHQT2TNP2","ZHQF2P7"},
	{"ZHQF2P8", "ZHQF4P6",  "ZHQF6P4",  "ZHQF4P7",  "ZHQF2P9"},
	{"ZHQF2P10","ZHQF4P8",  "ZHQF6P5",  "ZHQF4P9",  "ZHQF2P11"},
	{"ZHQF2P12","ZHQF4P10", "ZHQF6P6",  "ZHQS2NP1", "ZHQW8NP1"},
	{"ZHQW8NP2","ZHQS2NP2", "ZHQF6P7",  "ZHQF4P11", "ZHQF2P13"},
	{"ZHQF2P14","ZHQF4P12", "ZHQF6P8",  "ZHQF4P13", "ZHQF2P15"},
	{"ZHQF2P16","ZHQF4P14", "ZHQF6P9",  "ZHQF4P15", "ZHQF2P17"},
	{"ZHQF2P18","ZHQT2NFP1","ZHQT4NFP1","ZHQT4NFP2","ZHQT2NFP2","ZHQF2P19"},
	{"ZHQF2P20","ZHQF4P16", "ZHQF6P10", "ZHQF4P17", "ZHQF2P21"},
	{"ZHQF2P22","ZHQF4P18", "ZHQF6P11", "ZHQF4P19", "ZHQF2P23"},
	{"ZHQF2P24","ZHQF4P20", "ZHQF6P12", "ZHQS2FRP", "ZHQR6P"},
	{"ZHQI8P",  "ZHQS2FLP", "ZHQF6P13", "ZHQF4P21", "ZHQF2P25"},
	{"ZHQF2P26","ZHQF4P22", "ZHQF6P14", "ZHQF4P23", "ZHQF2P27"},
	{"ZHQF2P28","ZHQF4P24", "ZHQF6P15", "ZHQF4P25", "ZHQF2P29"},
	{"ZHQF2P30","ZHQT2FOP1","ZHQT4FOP1","ZHQT4FOP2","ZHQT2FOP2","ZHQF2P31"},
	{"ZHQF2P32","ZHQF4P26", "ZHQF6P16","ZHQF4P27","ZHQF2P33"},
	{"ZHQF2P34","ZHQF4P28", "ZHQF6P17","ZHQF4P29","ZHQF2P35"},
	{"ZHQF2P36","ZHQF4P30", "ZHQF6P18","ZHQS2OP1","ZHQW8OP1"},
(* Commentout LER Energy Analyzer Section[SF2OLP.1, SF2OLP.2] 22/28 *)
!!	{"ZHQW8OP2","ZHQS2OP2", "ZHQF6P19","ZHQF4P31","ZHQF2P37"},
	{"ZHQF2P38","ZHQF4P32", "ZHQF6P20","ZHQF4P33","ZHQF2P39"},
	{"ZHQF2P40","ZHQF4P34", "ZHQF6P21","ZHQF4P35","ZHQF2P41"},
	{"ZHQF2P42","ZHQT2OTP1","ZHQT4OTP1","ZHQT4OTP2","ZHQT2OTP2","ZHQF2P43"},
	{"ZHQF2P44","ZHQF4P36", "ZHQF6P22","ZHQF4P37","ZHQF2P45"},
	{"ZHQF2P46","ZHQF4P38", "ZHQF6P23","ZHQF4P39","ZHQF2P47"},
	{"ZHQF2P48","ZHQF4P40", "ZHQF6P24","ZHQS2TRP","ZHQSATRP"},
(* LER Local correction SL0TLP/SL0TRP *)
	{(*"ZHQC3LP","ZHQC4LP",*) "ZHQC5LP1", (*"SL0TLP.1",*)
	 "ZHQC5LP2","ZHQL2LP1","ZHQL2LP2","ZHQL1LP1",
	 "ZHQL1LP2","ZHQL2LP3","ZHQL2LP4","ZHQB1LP",
	 (*"SL0TLP.2",*) "ZHQB2LP" (*,"ZHQB3LP1","ZHQB3LP2"*)},
	{(*"ZHQB3RP1","ZHQB3RP2",*) "ZHQB2RP", (*"SL0TRP.1",*)
	 "ZHQB1RP","ZHQL2RP1","ZHQL2RP2","ZHQL1RP1",
	 "ZHQL1RP2","ZHQL2RP3","ZHQL2RP4","ZHQC5RP1",
	 (*"SL0TRP.2",*) "ZHQC5RP2" (*,"ZHQC4RP","ZHQC3RP"*)}
	},

      "HER", (* Steering Set for HER SEXT set {SD, SF, SF, SD} *)
      { {"ZHQSATLE","ZHQS4TLE","ZHQF6E1","ZHQF4E1","ZHQF2E1"},
        {"ZHQF2E2","ZHQF4E2","ZHQF6E2","ZHQF4E3","ZHQF2E3"},
        {"ZHQF2E4","ZHQF4E4","ZHQF6E3","ZHQF4E5","ZHQF2E5"},
        {"ZHQF2E6","ZHQT2TNE1","ZHQT4TNE1","ZHQT4TNE2","ZHQT2TNE2","ZHQF2E7"},
        {"ZHQF2E8","ZHQF4E6","ZHQF6E4","ZHQF4E7","ZHQF2E9"},
        {"ZHQF2E10","ZHQF4E8","ZHQF6E5","ZHQF4E9","ZHQF2E11"},
        {"ZHQF2E12","ZHQF4E10","ZHQF6E6","ZHQS4NE1","ZHQS3NE1"},
(* Commentout HER Energy Analyzer Section[SF2NLE.1, SF2NLE.2] 8/28 *)
!!        {"ZHQS3NE2","ZHQS4NE2","ZHQF6E7","ZHQF4E11","ZHQF2E13"},
        {"ZHQF2E14","ZHQF4E12","ZHQF6E8","ZHQF4E13","ZHQF2E15"},
        {"ZHQF2E16","ZHQF4E14","ZHQF6E9","ZHQF4E15","ZHQF2E17"},
        {"ZHQF2E18","ZHQT2NFE1","ZHQT4NFE1","ZHQT4NFE2","ZHQT2NFE2","ZHQF2E19"},
        {"ZHQF2E20","ZHQF4E16","ZHQF6E10","ZHQF4E17","ZHQF2E21"},
        {"ZHQF2E22","ZHQF4E18","ZHQF6E11","ZHQF4E19","ZHQF2E23"},
        {"ZHQF2E24","ZHQF4E20","ZHQF6E12","ZHQS4FRE","ZHQS2FRE"},
        {"ZHQS2FLE","ZHQS4FLE","ZHQF6E13","ZHQF4E21","ZHQF2E25"},
        {"ZHQF2E26","ZHQF4E22","ZHQF6E14","ZHQF4E23","ZHQF2E27"},
        {"ZHQF2E28","ZHQF4E24","ZHQF6E15","ZHQF4E25","ZHQF2E29"},
        {"ZHQF2E30","ZHQT2FOE1","ZHQT4FOE1","ZHQT4FOE2","ZHQT2FOE2","ZHQF2E31"},
        {"ZHQF2E32","ZHQF4E26","ZHQF6E16","ZHQF4E27","ZHQF2E33"},
        {"ZHQF2E34","ZHQF4E28","ZHQF6E17","ZHQF4E29","ZHQF2E35"},
        {"ZHQF2E36","ZHQF4E30","ZHQF6E18","ZHQS4OE1","ZHQS3OE1"},
        {"ZHQS3OE2","ZHQS4OE2","ZHQF6E19","ZHQF4E31","ZHQF2E37"},
        {"ZHQF2E38","ZHQF4E32","ZHQF6E20","ZHQF4E33","ZHQF2E39"},
        {"ZHQF2E40","ZHQF4E34","ZHQF6E21","ZHQF4E35","ZHQF2E41"},
        {"ZHQF2E42","ZHQT2OTE1","ZHQT4OTE1","ZHQT4OTE2","ZHQT2OTE2","ZHQF2E43"},
        {"ZHQF2E44","ZHQF4E36","ZHQF6E22","ZHQF4E37","ZHQF2E45"},
        {"ZHQF2E46","ZHQF4E38","ZHQF6E23","ZHQF4E39","ZHQF2E47"},
        {"ZHQF2E48","ZHQF4E40","ZHQF6E24","ZHQS4TRE","ZHQSATRE"}},

      _, {}];
    ];

  (* List generator *)
  (* List-up quadrupole corrector *)
  With[{def={UseQCS->True, UseQC1->True, UseQC2->True,
    UseQInjection->False, UseQD3->True, UseQF4->False,
    KeepMinusI->True, CorrQuadrupoles->Null, ExCorrQuadrupoles->{}}},
    CorrectorQuad[opt:((_Rule|_RuleDelayed)...)] := Module[{qlist,
      {qcs, qc1, qc2, qinj, qd3, qf4, kmi} = Map[(#===True)&,
	{UseQCS, UseQC1, UseQC2, UseQInjection, UseQD3, UseQF4,
	  KeepMinusI}/.Override[opt, def]],
      qcorr=CorrQuadrupoles/.Override[opt, def],
      exqcorr=ExCorrQuadrupoles/.Override[opt, def]},

      qlist=If[ListQ[qcorr], qcorr, Map[With[{q=#}, Switch[q[1,3],
	"QCS", If[qcs   && Ring@RingID==="LER", q, Null[]],
	"QC1", If[qc1   && Ring@RingID==="HER", q, Null[]],
	"QC2", If[qc2, q, Null[]],
	"QI4", If[~qinj && Ring@RingID==="HER", Null[], q],
	"QI6", If[~qinj && Ring@RingID==="LER", Null[], q],
	"QD3", If[qd3, q, Null[]],
	"QF4", If[qf4, q, Null[]],
	"QD1"|"QF2"|"QD5"|"QF6"|"QL1"|"QL2"
	  |"QEA"|"QT3"|"QT4"|"QT5"|"QTA", If[kmi, Null[], q],
	_,     q]]&, Element["NAME", Ring@ElementPattern$NormalQuad]]];

      (* Normalize quadpole element name *)
      qlist=Ring@NormalizeElementName[Join[qlist, exqcorr]];

      (* Mask special element *)
      qlist=Map[With[{q=#}, Switch[q,
	"QCSL"|"QCSR",		If[Ring@RingID==="HER", Null[], q],
	_,     q]]&, qlist];

      qlist];
    ];

  (* List-up sextupole mover corrector *)
  With[{def={CorrSextMovers->Null}},
    CorrectorSextMover[opt:((_Rule|_RuleDelayed)...)] := With[{
      sxmcorr=CorrSextMovers/.Override[opt, def]},
      If[ListQ[sxmcorr], sxmcorr,
	LINE["NAME", Ring@ElementPattern$NormalSext]]];
      ];

  (* List-up sextupole bump corrector *)
  (* Result: List of {steerings, dK0, Sextupoles, bump, residual} *)
  With[{def={CorrSextBumps->Null}},
    CorrectorBump[opt:((_Rule|_RuleDelayed)...)] := Module[{
      bumplist,
      bumpcorr=CorrSextBumps/.Override[opt, def],
      sxList=LINE["NAME", "S*"]},

      bumplist=Map[With[{steers=#,
	begin=Last[PowerSupply2Element[First[#]]],
	end=First[PowerSupply2Element[Last[#]]]},
	{steers, Select[sxList, (begin<LINE["POSITION", #]<end)&]}]&,
	If[ListQ[bumpcorr], bumpcorr, SXBumpSteering]];

      Return[Map[With[{steers=#[[1]], slist=#[[2]], shape=Map[
	With[{elm=#[1,2]}, If[elm[1,2]==="SF" || elm[1,2]==="SL", 1, Null]]&,
	#[[2]]]},
	({steers, -#[[1]], slist, #[[2]], #[[3]]
	  }&)[ClosedBump[steers, slist, shape, "X"]]]&, bumplist]];
      ];
    ];

  (* Response matrix generator *)
  (*
    --- Back Ground Analytic Formula ---
    dMu = 1/2 * Integral[ds' Beta(s') dK1(s')]

    dBeta(s) = - Beta(s) / (2 * Sin[2 Pi Nu])
      * Integral[ds' dK1(s') Beta(s') Cos[2 (Abs[Phi(s) - Phi(s')] - Pi Nu)]]

    dPhi(s) = Integral[ds' (1 / (Beta(s') + dBeta(s')) - 1 / Beta(s')), {0, s}]
            = 1 / (2 * Sin[2 Pi Nu])
      * Integral[ds' dK1(s') Beta(s') / 2
	* (Sign[Phi(s) - Phi(s')]
	  * (Sin[2 Abs[Phi(s) - Phi(s')] - 2 Pi Nu] + Sin[2 Pi Nu])
	 - Sign[0      -Phi(s')]
	  * (Sin[2 Abs[0      - Phi(s')] - 2 Pi Nu] + Sin[2 Pi Nu]))]

            = 1 / (2 * Sin[2 Pi Nu])
      * Integral[ds' dK1(s') Beta(s')
        * (2 Sin[2 Pi Nu] * Sin^2[Min[Phi(s) - Phi(s'), 0]]
          + Sin[Phi(s)] * Cos[2 Phi(s') - Phi(s) - 2 Pi Nu])]
    Note: dPhi(0) = 0, dPhi(C) = dMu

    *)

  (* Generater response matrix: dK1 -> dBeta *)
  BetaMatrix[qb_,qn_,qk_,mb_,mn_,mu_]:=Module[{bk=qb*qk},
    -mb*(Plus@@[(bk*#)&/@Cos[2*Abs[Outer[(#-#2)&,mn,qn]]-mu],{2}])/
      (2*Sin[mu])];

  (* Generater response matrix: dK1 -> dPhi *)
  PhiMatrix[qb_,qn_,qk_,mb_,mn_,mu_]:=Module[{bk=qb*qk,
    dpsi=Restrict[#,0,1e100]&/@Outer[(#-#2)&,mn,qn],
    dpsi1=Outer[(2*#2-#)&,mn,qn]},
    (Plus@@[
      (bk*#)&/@(Cos[dpsi1-mu]*Sin[mn]+2*Sin[mu]*Sin[dpsi]^2),
      {2}])/2/Sin[mu]];

  PhiMatrixSTD[qb_,qn_,qk_,mb_,mn_,mu_]:=Module[{bk=qb*qk},
    Plus@@[(bk*#)&/@Outer[((
      Sign[# - #2] * (Sin[mu] + Sin[2 * Abs[# - #2] - mu])
      - Sign[0 - #2] * (Sin[mu] + Sin[2 * Abs[0 - #2] - mu]))/2)&,
      mn,qn],{2}]/(2*Sin[mu])];

  (* Dump quadrupole parameter *)
  Engine$QuadDump[] := Map[With[{q = #},
    If[LINE["POSITION", q//".2"] <=> {},
      Null@@Thread[{LINE["NAME", q//".*"], LINE["K1", q//".*"]}],
      {q, Ring@GetElementValue[q, "K1"]}]]&,
    Ring@NormalizeElementName[Element["NAME", Ring@ElementPattern$NormalQuad]]];

  (* Restore quadrupole parameter *)
  Engine$QuadRestore[param_List] := Scan[With[{q = #[[1]], val = #[[2]]},
    If[StringPosition[q, "."] <=> {},
      LINE["K1", q] = val,
      Ring@SetElementValue[q, "K1"->val]]]&, param];

  (* Initialize strategy engine *)
  Engine$Initialize[codBPM$_List, codSteerings$_List, initialFudge$_List,
    op:((_Rule|_RuleDelayed)...)] := Module[{dxc, dpbase, update,
      fvQuad, fvBump, fvMover, fvOpt, bumpShape,
      {tol, calcCmd, stdout} =
	{Tolerance, CalcCommand, Output}/.Override[op, AddFudge$def],
      initOpt=Override[initialFudge$, InitialFudge$def]},

      (* Cleanup instance variable *)
      quadFudge = {}; bumpFudge = {}; moverFudge = {}; fudgeOpt = {};
      codBPM = codBPM$; cod = Thread[Table[{0, 0}, {Length[codBPM]}]];
      codSteering = Map[{#, 0}&, codSteerings$];
      dP0 = 0; chicaneLER = {};

      (* Decode InitialFudge option *)
      {fvQuad, fvBump, fvMover, fvOpt, bumpShape} =
	{QuadFudge, SextBumpFudge, SextMoverFudge, FudgeOption, BumpShape}/.initOpt;

      (* Merge into correction fudge table *)
      quadFudge  = MergeDAF[quadFudge, fvQuad];
      bumpFudge  = MergeBF[bumpFudge,  fvBump];
      moverFudge = MergeBF[moverFudge, fvMover];

      codBase = Twiss[{"DX", "DY"}, codBPM];

      (* Escape if fudge is null *)
      If[fvQuad === {} && fvBump === {} && fvMover === {} && fvOpt === {},
	Return[]];

      update = False;
      dxc = codBase;

      (* Generate bumped orbit & Add sextupole bump *)
      If[Length[bumpShape] > 0,
	dxc  = Twiss[{"DX", "DY"}, bumpShape[[,1]]];
	dxc += Take[Thread[bumpShape], {2,3}];
	dxc  = Thread[Prepend[dxc, bumpShape[[,1]]]];
	];

      If[Length[fvBump] > 0 && Max[Abs[fvBump[[,2]]]] > 0,
	update = True;
	AddSteering[fvBump, 1]];

      If[update && Length[bumpShape] < 1,
	FFS[calcCmd]; update = False;
	dxc  = Thread[Prepend[Twiss[{"DX", "DY"}, codBPM], codBPM]];
   	];

      (* Add sextupole mover *)
      If[Length[fvMover] > 0 && Max[Abs[fvMover[[,2]]]] > 0,
	update = True;
	Scan[(LINE["DX", #[[1]]]=LINE["DX", #[[1]]]+#[[2]])&, fvMover]];

      (* Add Quadrupole fudge *)
      If[Length[fvQuad] > 0 && Max[Abs[fvQuad[[,2]]]] > 0, Module[{qt, p, aql},
	update = True;
	(* Virtual quadrupole *)
	Scan[With[{qv=#[[1]], daf=#[[2]], pos = StringPosition[#[[1]], "_"]},
	  qt = qv[3, If[pos <=> {}, pos[[1,1]]-1, -1]];
	  If[RealQ[Ring@GetElementValue[qt, "K1"]],
	    Ring@SetElementValue[qv, "K1"->Ring@GetElementValue[qv, "K1"]
	      + daf * Ring@GetElementValue[q, "K1"]]]]&,
	  Select[fvQuad, #[[1]][1,2] === "Qv"&]];
	(* Real quadrupole correction winding[setup] *)
	aql = Map[With[{q=#[[1]], daf=#[[2]]},
	  p = -1; While[StringPosition["0123456789", q[p]] <=> {}, p -= 1];
	  qt = StringReplace[If[p < -1,
	    q[2,p]//"_"//q[p+1,-1], q[2,-1]], "_"->"."];
	  {qt, daf * If[StringPosition[qt, "."] === {},
	    Ring@GetElementValue[qt, "K1"], LINE["K1", qt]]}]&,
	  Select[fvQuad, #[[1]][1,2] === "AQ"&]];
	(* Real quadrupole *)
	Scan[With[{q=#[[1]], daf=#[[2]]}, If[LINE["POSITION", q//".2"] <=> {},
	  Scan[(LINE["K1", #] =
	    (1 + daf) * LINE["K1", #])&, LINE["NAME", q//".*"]],
	  Ring@SetElementValue[q,
	    "K1"->(1 + daf) * Ring@GetElementValue[q, "K1"]]]]&,
	  Select[fvQuad, (#[[1]][1] === "Q" && #[[1]][2] <=> "v")&]];
	(* Real quadrupole correction winding[apply] *)
	Scan[With[{q=#[[1]], delta=#[[2]]},
	  If[StringPosition[q, "."] === {},
	    Ring@SetElementValue[q,
	      "K1"->Ring@GetElementValue[q, "K1"] + delta],
	    LINE["K1", q] = LINE["K1", q] + delta]]&, aql];
	]];

      If[Length[CODSteerings/.fvOpt] > 0,
	update = True;
	codSteering = MergeBF[codSteering, CODSteerings/.fvOpt];
	AddSteering[CODSteerings/.fvOpt, 1];
	];

      If[update,
	FFS[calcCmd]];

      (* Correct COD *)
      If[ring@RingID === "LER",
	chicaneLER = MergeBF[chicaneLER, First[CorrectMomentumLER[0]]]];
      dpbase = DP0;
      DP0 = (OrbitAtExit/.Emittance[ExpandElementValues->False])[[6]];
      FFS[calcCmd]; dP0 += DP0 - dpbase;

      codSteering = MergeBF[codSteering, First[CorrectModelCOD[
	dxc, Literal[Steerings]->codSteering[[,1]],
	Null@@Switch[tol,
	  _Real, {Tolerance->tol},
	  {_Real, _Real},
	  {HorizontalTolerance->tol[[1]], VerticalTolerance->tol[[2]]},
	  _, {}],
	Output->stdout]]];

      (* Update COD *)
      If[Length[bumpShape] > 0 && bumpShape[[,1]] === codBPM,
	cod = Take[Thread[bumpShape], {2,3}],
	If[Length[fvBump] > 0, cod = (Twiss[{"DX", "DY"}, codBPM] - codBase)]];
    ];

  (* Add correction fudge into model *)
  Engine$AddFudge[fv_, op:((_Rule|_RuleDelayed)...)] := Module[{qt, p, aql,
    {fvQuad, fvBump, fvMover} = Take[fv, 3],
    {tol, damping, calcCmd, stdout} =
      {Tolerance, Damping, CalcCommand, Output}/.Override[op, AddFudge$def]},

    (* Apply damping factor *)
    fvQuad  = Map[{#[[1]], Power[1 + #[[2]], damping] - 1}&, fvQuad];
    fvBump  = Map[{#[[1]], damping * #[[2]]}&, fvBump];
    fvMover = Map[{#[[1]], damping * #[[2]]}&, fvMover];

    (* Merge into correction fudge table *)
    quadFudge  = MergeDAF[quadFudge, fvQuad];
    bumpFudge  = MergeBF[bumpFudge,  fvBump];
    moverFudge = MergeBF[moverFudge, fvMover];
    fudgeOpt   = Drop[fv, 3];

    (* Add sextupole bump *)
    With[{dx0 = Twiss[{"DX", "DY"}, codBPM]},
      AddSteering[fvBump, 1]; FFS[calcCmd];
      cod += (Twiss[{"DX", "DY"}, codBPM] - dx0)];

    (* Add sextupolr mover *)
    Scan[(LINE["DX", #[[1]]]=LINE["DX", #[[1]]]+#[[2]])&, fvMover];

    (* Add Quadrupole fudge *)
    (* Virtual quadrupole *)
    Scan[With[{qv=#[[1]], daf=#[[2]],
      pos = StringPosition[#[[1]], "_"]},
      qt = qv[3, If[pos <=> {}, pos[[1,1]]-1, -1]];
      If[RealQ[Ring@GetElementValue[qt, "K1"]],
	Ring@SetElementValue[qv, "K1"->Ring@GetElementValue[qv, "K1"]
	  + daf * Ring@GetElementValue[q, "K1"]]]]&,
      Select[fvQuad, #[[1]][1,2] === "Qv"&]];
    (* Real quadrupole correction winding[setup] *)
    aql = Map[With[{q=#[[1]], daf=#[[2]]},
      p = -1; While[StringPosition["0123456789", q[p]] <=> {}, p -= 1];
      qt = StringReplace[If[p < -1,
	q[2,p]//"_"//q[p+1,-1], q[2,-1]], "_"->"."];
      {qt, daf * If[StringPosition[qt, "."] === {},
	Ring@GetElementValue[qt, "K1"], LINE["K1", qt]]}]&,
      Select[fvQuad, #[[1]][1,2] === "AQ"&]];
    (* Real quadrupole *)
    Scan[With[{q=#[[1]], daf=#[[2]]}, If[LINE["POSITION", q//".2"] <=> {},
      Scan[(LINE["K1", #] =
	(1 + daf) * LINE["K1", #])&, LINE["NAME", q//".*"]],
      Ring@SetElementValue[q,
	"K1"->(1 + daf) * Ring@GetElementValue[q, "K1"]]]]&,
      Select[fvQuad, (#[[1]][1] === "Q" && #[[1]][2] <=> "v")&]];
    (* Real quadrupole correction winding[apply] *)
    Scan[With[{q=#[[1]], delta=#[[2]]},
      If[StringPosition[q, "."] === {},
	Ring@SetElementValue[q,
	  "K1"->Ring@GetElementValue[q, "K1"] + delta],
	LINE["K1", q] = LINE["K1", q] + delta]]&, aql];
    FFS[calcCmd];

    (* Correct COD *)
    If[ring@RingID === "LER",
      chicaneLER = MergeBF[chicaneLER, First[CorrectMomentumLER[0]]]];
    dpbase = DP0;
    DP0 = (OrbitAtExit/.Emittance[ExpandElementValues->False])[[6]];
    FFS[calcCmd]; dP0 += DP0 - dpbase;

    codSteering = MergeBF[codSteering, First[CorrectModelCOD[
      Thread[Prepend[codBase + cod, codBPM]],
      Literal[Steerings]->codSteering[[,1]],
      Null@@Switch[tol,
	_Real, {Tolerance->tol},
	{_Real, _Real},
	{HorizontalTolerance->tol[[1]], VerticalTolerance->tol[[2]]},
	_, {}],
      Output->stdout]]];
    ];

  (* Check convergence *)
  Engine$CheckConvergence[db0_, nu0_, op:((_Rule|_RuleDelayed)...)] := Module[{
    {epsTune, epsBeta, epsPhase, calcCmd, stdout} =
      {TuneTolerance, BetaTolerance, PhaseTolerance,
	CalcCommand, Output}/.Override[op, Driver$def],
    ret, beta0, phase0, beta, phase},
    With[{mon = db0[[,1]], db = Drop[Thread[db0], 1],
      nu = Twiss[{"NX", "NY"}, "$$$"] / (2*Pi),
      elBakM = Engine$QuadDump[]},

!      Ring@AdjustTune[nu0, False]; (* Adjust to measured tune *)

      beta  = Twiss[{"BX", "BY"}, mon]; beta0  = Take[db, {1,2}];
      phase = Twiss[{"NX", "NY"}, mon]; phase0 = Take[db, {3,4}];

      (* Beta function gain normalization *)
      beta  *= (Average/@beta0 / Average/@beta);

      (* Phase offset normalization *)
      phase -= (Average/@(phase - phase0));

      ret = (Max[Abs[nu - nu0]] < epsTune
	&& Max[Abs[beta0 / beta - 1]] < epsBeta
	&& Max[Abs[phase0 - phase]] < epsPhase);

      Engine$QuadRestore[elBakM];
      FFS[calcCmd]];
    ret];

  (* Calculate correction fudge
    SAD Optics: base optics for fudge calculation
		CAUTION: Base optics don't have individual quadrupole error
    Argument:
      db0:   List of measured optics function {monitor, BX, BY, MX, MY}
      nu:    Measured tune {NX, NY}
      db:    List of measured optics function dp->{nu, db0}
      dpref: Reference momentum; dp
      Options:
	Corrector/Solver Options
    Result:
      {List of Quadrupole Fudge,
       List of Sextupole Bump Fudge,
       List of Sextupole Mover Fudge,
       Options}
      Quadrupole Fudge: {Quadrupole PS, AF-1}
      Sextupole Bump Fudge: {Steering, dK0}
      Sextupole Mover Fudge: {Sextupole Mover, dX}
	Note: Correction fudges describe a correction
	      from base optics to target optics(given by db0 and nu).
      Options:
	BetaFudge:  Prediction value of absolute Beta function
		    `1 - Real Beta / Given Beta'
	PhaseFudge: Prediction value of phase measurement offset
		    `Given Phase - Real Phase'
   *)
  Correction[db0_, nu0_List, op:((_Rule|_RuleDelayed)...)]:=
    Correction[{0->{nu0, db0}}, 0, op];

  Correction[db_, dpref_Real, op:((_Rule|_RuleDelayed)...)]:=Module[{
    dp0bak, db0, nu0, Nu := Twiss[{"NX", "NY"}, "$$$"] / (2*Pi),
    elQuad, elSteer, elMover,
    tmp, fvQuad, fvBump, fvMover,
    iteration, convergence, restored, stopRequest,
    maxIteration, damping, epsCOD, epsTune, epsBeta, epsPhase,
    steering, bpm, method, algorism, calcCmd, stdout,
    {opt, rem} = SwitchCases[{op}, {DriverFlags, _}]},

    (* Extract driver options *)
    opt = Override[opt, Driver$def];
    {maxIteration, damping} = {MaximumIteration, Damping}/.opt;
    {epsCOD} = {CODTolerance}/.opt;
    {epsTune, epsBeta, epsPhase} =
      {TuneTolerance, BetaTolerance, PhaseTolerance}/.opt;
    {steering, bpm} = {Literal[Steerings], BPM}/.opt;
    If[steering === Undefined, steering = CCCSteerings[]];
    {method, algorism} = {Method, Algorism}/.opt;
    {calcCmd, stdout} = {CalcCommand, Output}/.opt;
    With[{stopReq = First[SwitchCases[opt, {RuleDelayed[StopRequest, _], _}]]},
      If[stopReq <=> {},
	stopRequest = Extract[stopReq, {1,2}, Unevaluated$],
	stopRequest = False]];

   (* Append CalcCommand option for Correction0 *)
    AppendTo[rem, CalcCommand->calcCmd];
 
    {nu0, db0} = dpref/.db;

    (* Backup optics [Quadrupole/Steering/Sextupole Mover] *)
    dp0bak = DP0;
    elQuad  =  Engine$QuadDump[];
    elSteer = Map[{#, Ring@GetElementValue[#, "K0"]}&, Steerings[]];
    elMover = Thread[LINE[{"NAME", "DX"}, Ring@ElementPattern$NormalSext]];

    (* Initialize strategy engine *)
    Engine$Initialize[bpm, steering, InitialFudge/.opt,
       Tolerance->epsCOD, CalcCommand->calcCmd, Output->stdout];

    iteration = 1; convergence = False; restored = False;

    Switch[method,
      (* Interleave mode *)
      Interleave, While[Not[stopRequest] && Not[convergence]
	&& iteration =< maxIteration,
	If[stdout > 0, Write[stdout,
	  "Iteration[", iteration, "/", maxIteration, "] dNu=", Nu - nu0]];
	tmp = Correction0[db, dpref, Null@@If[Max[Abs[Nu - nu0]] > epsTune
	  || (maxIteration - iteration) < 1,
	  {UseQuadFudge->True, CorrectBeta->False, CorrectPhase->False}, {}],
	  Null@@rem];

	Engine$AddFudge[tmp, Tolerance->epsCOD,
	  Damping->damping, CalcCommand->calcCmd, Output->stdout];
	
	If[Max[Abs[Nu - nu0]] > epsTune,
	  tmp = Correction0[db, dpref, UseQuadFudge->True,
	    CorrectBeta->False, CorrectPhase->False, Null@@rem];

	  Engine$AddFudge[tmp, Tolerance->epsCOD,
	    Damping->damping, CalcCommand->calcCmd, Output->stdout]];

	convergence = Engine$CheckConvergence[db0, nu0,
	  TuneTolerance->epsTune,
	  BetaTolerance->epsBeta, PhaseTolerance->epsPhase,
	  CalcCommand->calcCmd, Output->stdout];

	iteration += 1],

      (* Single correction mode *)
      Single, (
	tmp = Correction0[db, dpref, Null@@rem];

	Engine$AddFudge[tmp, Tolerance->epsCOD,
	  Damping->damping, CalcCommand->calcCmd, Output->stdout];

	convergence = Engine$CheckConvergence[db0, nu0,
	  TuneTolerance->epsTune,
	  BetaTolerance->epsBeta, PhaseTolerance->epsPhase,
	  CalcCommand->calcCmd, Output->stdout];
	),

      (* Compatible correction mode *)
      Compatible|_, (method = Compatible; restored = True;
	tmp = Correction0[db, dpref, Null@@rem];
	{quadFudge, bumpFudge, moverFudge} = Take[tmp, 3];
	fudgeOpt = Drop[tmp, 3];
	)];

    stopRequest = Evaluate[stopRequest];

    (* Restore optics *)
    If[Restore/.opt, restored = True;
      Scan[(LINE["DX", #[[1]]] = #[[2]])&, elMover];
      Scan[Ring@SetElementValue[#[[1]], "K0"->#[[2]]]&, elSteer];
      Engine$QuadRestore[elQuad];
      DP0 = dp0bak;
      FFS[calcCmd];
      ];

    Return[{quadFudge, bumpFudge, moverFudge, Null@@Override[
      {Restored->restored, Method->method},
      If[methd <=> Compatible, {Convergence->convergence,
	CODSteerings->codSteering,
	TotalSteerings->MergeBF[bumpFudge, codSteering],
	BumpShape->Thread[Prepend[cod, codBPM]],
	If[Ring@RingID === "LER", Chicane->chicaneLER, Null[]],
	MomentumShift->dP0,
	Break->If[stopRequest === True, True, False]}, {}],
      fudgeOpt]}];
    ];

  Correction0[db$_, dpref_Real, op:((_Rule|_RuleDelayed)...)]:=Module[{
    opt, dpbak = DP0, db, np,
    wTune, wBeta, wPhase,
    dmu, mon, dbx, dby, dnx, dny,
    mpos, bxm, bym, nxm, nym, mu,
    quadList, sxMoList, bumpList,
    apos, dK1, bxa, bya, nxa, nya,
    matMX, matMY, matAXip, matAXip, matBX,matBY,matPhiX,matPhiY,
    s, sBeta, sPhase, sQuad, sBump, sMover,

    m, b, wCond, wVar, mArray,

    ufHeuristicWeight,
    ufBetaFudge, ufPhaseFudge, ufDiffPhase,
    wBetaFudge,  wPhaseFudge,
    ufQuadFudge, ufSextBump, ufSextMover,
    wQuadFudge,  wSextBump,  wSextMover,
    cfTune, cfBeta, cfPhase, keepWaist,
    wTune0,  wBeta0, wPhase0,   wWaist,
    wMonitor, xyBalance,
    cfOffMomentum, wOffMomentum, calcCmd,

    {quadCorrOpt, sxMoCorrOpt, bumpCorrOpt,
      rem}=SwitchCases[{op}, {
	QuadCorrectorFlags, SextMoverCorrectorFlags, BumpCorrectorFlags,
	_}]},

    (* Parse generic options *)
    opt=Override[rem, def];

    {ufHeuristicWeight}={HeuristicWeight}/.opt;
    {ufBetaFudge, ufPhaseFudge}={UseBetaFudge, UsePhaseFudge}/.opt;
    {wBetaFudge, wPhaseFudge}={WeightBetaFudge, WeightPhaseFudge}/.opt;
    wBetaFudge = Switch[wBetaFudge,
      _Real, {wBetaFudge, wBetaFudge},
      {_Real, _Real}, wBetaFudge,
      _, {1, 1}];
    wPhaseFudge = Switch[wPhaseFudge,
      _Real, {wPhaseFudge, wPhaseFudge},
      {_Real, _Real}, wPhaseFudge,
      _, {1, 1}];
    If[Max[Abs[wBetaFudge]]  < 1E-10, ufBetaFudge = False];
    If[Max[Abs[wPhaseFudge]] < 1E-10, ufPhaseFudge = False];

    ufDiffPhase=UseDifferentialPhase/.opt;
    If[ufDiffPhase, ufPhaseFudge = False];

    {ufQuadFudge, ufSextBump, ufSextMover}=
      {UseQuadFudge, UseSextBump, UseSextMover}/.opt;
    {wQuadFudge, wSextBump, wSextMover}=
      {WeightQuadFudge, WeightSextBump, WeightSextMover}/.opt;

    If[FunctionQ[wQuadFudge],
      wQuadFudge=Map[wQuadFudge, CorrectorQuad@@quadCorrOpt]];

    If[Max[Abs[wQuadFudge]] < 1E-10, ufQuadFudge = False];
    If[Max[Abs[wSextBump]]  < 1E-10, ufSextBump  = False];
    If[Max[Abs[wSextMover]] < 1E-10, ufSextMover = False];

    {cfTune, cfBeta, cfPhase, keepWaist}=
      {CorrectTune, CorrectBeta, CorrectPhase, KeepWaist}/.opt;
    {wTune0, wBeta0, wPhase0, wWaist}=
      {WeightTune, WeightBeta, WeightPhase, WeightWaist}/.opt;
    wMonitor=WeightMonitor/.opt;
    xyBalance=CouplingBalance/.opt;
    {cfOffMomentum, wOffMomentum}={CorrectOffMomentum, WeightOffMomentum}/.opt;
    calcCmd=CalcCommand/.opt;

    (* Extract weight *)
    If[RealQ[wTune0], wTune0={wTune0, wTune0}];
    If[RealQ[wWaist], wWaist={wWaist, wWaist}];

    (* Trim XY coupling balance *)
    xyBalance={1/Sqrt[xyBalance], Sqrt[xyBalance]};

    (* Initialize optics for CorrectorBump *)
    If[DP0 <=> dpref, DP0 = dpref; FFS[calcCmd]];

    (* Extract corrector list *)
    quadList=If[ufQuadFudge, CorrectorQuad@@quadCorrOpt, {}];
    bumpList=If[ufSextBump,  CorrectorBump@@bumpCorrOpt, {}];
    sxMoList=If[ufSextMover, CorrectorSextMover@@sxMoCorrOpt, {}];

    (* Extract wOffMomentum *)
    wOffMomentum=Switch[wOffMomentum,
      _Function, wOffMomentum[#, dpref]&/@db$[[,1]],
      _Real, Table[wOffMomentum, {Length[db$]}],
      {__Real}, Take[Join[wOffMomentum, Table[1, {Length[db$]}]], Length[db$]],
      _, Table[1, {Length[db$]}]];
    db = MapThread[With[{dpnow = #[[1]], body = #[[2]], wOff = #2},
      dpnow->Prepend[body, wOff]]&, {db$, wOffMomentum}];

    If[Not[cfOffMomentum], With[{dpmain = First[Sort[db$[[,1]],
      Abs[#1 - dpref] < Abs[#2 - dpref]&]]},
      db = Select[db, #[[1]] === dpmain&]]];

    np = Length[db]; (* Number of fitting points *)
    mArray = Thread[MapThread[
      With[{id = #2, dpnow = #[[1]],
	wOff = #[[2,1]], nu0 = #[[2,2]], db0 = #[[2,3]]},

    (* Construct response matrix at DP0 = dpnow *)
    If[DP0 <=> dpnow, DP0 = dpnow; FFS[calcCmd]];

    mon=db0[[,1]];
    mpos=LINE["POSITION", mon];

    mu=Twiss[{"NX","NY"},"$$$"]; dmu = 2*Pi * nu0 - mu;
    {bxm, bym, nxm, nym}=Twiss[{"BX", "BY", "NX", "NY"}, mpos];
    {dbx, dby, dnx, dny}=Drop[Thread[db0], 1] - {bxm, bym, nxm, nym};

    wTune  = wTune0;
    wBeta  = Switch[wBeta0,
      _Function,      wBeta0/@mon,
      _Real,          Table[{wBeta0, wBeta0}, {Length[mon]}],
      {_Real, _Real}, Table[wBeta0, {Length[mon]}],
      _, wBeta0];

    wPhase = Switch[wPhase0,
      _Function,      wPhase0/@mon,
      _Real,          Table[{wPhase0, wPhase0}, {Length[mon]}],
      {_Real, _Real}, Table[wPhase0, {Length[mon]}],
      _, wPhase0];

    (* Extract monitor weight *)
    Switch[wMonitor,
      _Function, (
	wBeta  *= Map[wMonitor[#, 0, "Beta"]&,  mon];
	wPhase *= Map[wMonitor[#, 0, "Phase"]&, mon]),

      _Real, With[{wMon = Table[{wMonitor, wMonitor}, {Length[mon]}]},
	wBeta  *= wMon;
	wPhase *= wMon],

      {_Real, _Real}, With[{wMon = Table[wMonitor, {Length[mon]}]},
	wBeta  *= wMon;
	wPhase *= wMon],

      _, If[Dimensions[wMonitor] === {Length[mon], 2}
	&& RealListQ[Flatten[wMonitor]],
	wBeta  *= wMonitor;
	wPhase *= wMonitor]];

    apos={};
    dK1={};
    (* dK1 source list-up: Quadrupole *)
    Module[{wInt=GaussLegendreTable[Division/.opt],qt,p,
      qpos=Map[With[{q = Corrector2Element[#]}, Flatten[{LINE["POSITION",
	If[StringPosition[q, "."]<=>{}, q, q//"*"]]}]]&, quadList]},
     apos=Join[apos, Map[With[{qp=#},
	Flatten[Map[(# + wInt[[,1]])&, qp]]]&, qpos]];
      dK1=Join[dK1, Map[With[{qp=#},
	Flatten[Map[With[{q = #},
	  qt = LINE["NAME", q];
	  p = StringPosition[qt, "_"]; p = If[p <=> {}, p[[1,1]]-1, -1];
	  If[qt[1,2] === "Qv" && LINE["NAME", qt[3,p]] <=> {}, qt = qt[3,p]];
	  wInt[[,2]] * LINE["K1", qt]]&, qp]]]&, qpos]];
      ];

    (* dK1 source list-up: Sextupole bump *)
    With[{},
      apos=Join[apos, Map[LINE["POSITION", #[[3]]]&, bumpList]];
      dK1=Join[dK1, Map[With[{sxelm=#[[3]], sxbump=#[[4]]},
	LINE["K2", sxelm] * sxbump]&, bumpList]];
      ];

    (* dK1 source list-up: Sextupole mover *)
    With[{spos=LINE["POSITION", sxMoList]},
      apos=Join[apos, spos];
      dK1=Join[dK1, -LINE["K2", spos]];
      ];

    (* Scaling dK1 by momentum shift *)
    dK1=dK1/(1 + dpnow);

    (* Extract BX,BY,NX,NY at dK1 fudge corrector *)
    bxa=Map[Twiss["BX",#+0.5]&, apos];
    bya=Map[Twiss["BY",#+0.5]&, apos];
    nxa=Map[Twiss["NX",#+0.5]&, apos];
    nya=Map[Twiss["NY",#+0.5]&, apos];

    (* Generate response matrix *)
    (* Response Matrix: total phase shift(delta mu) *)
    matMX=Plus@@[ dK1 * bxa, {1}] / 2;
    matMY=Plus@@[-dK1 * bya, {1}] / 2;

    (* Response Matrix: beta function *)
    matBX=BetaMatrix[bxa, nxa,  dK1, bxm, nxm, mu[[1]]] / bxm;
    matBY=BetaMatrix[bya, nya, -dK1, bym, nym, mu[[2]]] / bym;

    (* Response Matrix: phase advance *)
    matPhiX=PhiMatrix[bxa, nxa,  dK1, bxm, nxm, mu[[1]]];
    matPhiY=PhiMatrix[bya, nya, -dK1, bym, nym, mu[[2]]];

    (* Response Matrix: alpha function at IP *)
    (* Assumption: alpha@IP=0, Phi@IP=0*)
    matAXip=Plus@@[-dK1 * bxa * Sin[2*nxa - mu[[1]]], {1}] / (2*Sin[mu[[1]]]);
    matAYip=Plus@@[ dK1 * bya * Sin[2*nya - mu[[2]]], {1}] / (2*Sin[mu[[2]]]);

    (* Convert matPhi to delta-Phi form *)
    If[ufDiffPhase,
      wPhase=Thread[Map[((Drop[#, 1] + Drop[#, -1])/2)&, Thread[wPhase]]];
      {dnx, dny, matPhiX, matPhiY}=Map[(Drop[#, 1] - Drop[#, -1])&,
	{dnx, dny, matPhiX, matPhiY}]];

    (* Generate total response matrix *)
    m=Join[
      If[cfTune, {matMX, matMY}, {}],
      If[keepWaist, {matAXip, matAYip}, {}],
      Null@@If[cfBeta,  {matBX,   matBY},   {}],
      Null@@If[cfPhase, {matPhiX, matPhiY}, {}]];
    b=Join[
      If[cfTune, dmu, {}],
      If[keepWaist, {0, 0}, {}],
      Null@@If[cfBeta,  {dbx / bxm, dby / bym}, {}],
      Null@@If[cfPhase, {dnx, dny}, {}]];

    (* Generate condition weight vector *)
    With[{wtune=Restrict[1 / Abs[2 * Sin[mu]], 0, 1e3],
      wBase=Switch[Ring@RingID,
	"HER", {{1.000, 2.600}, {1.700, 3.200}},
	"LER", {{1.000, 1.250}, {1.500, 1.600}},
	_,     {{1.000, 1.000}, {1.000, 1.000}}]},

      (* Trim correction conditon weight by `Heuristic Algorism' *)
      If[ufHeuristicWeight, Module[{gTune, gBeta, gPhase,
	sMu = Abs[wtune * dmu],
	sBeta = Sqrt[{Plus@@(Restrict[dbx / bxm, -1e3, 1e3]^2) / Length[bxm],
	  Plus@@(Restrict[dby / bym, -1e3, 1e3]^2) / Length[bym]}],
	sPhi = Sqrt[{Plus@@(dnx^2) / Length[dnx], Plus@@(dny^2) / Length[dny]}]},

	{gTune, gBeta, gPhase} = {
	  wBase[[1]] * sMu   / 0.012,
	  wBase[[1]] * sBeta / 0.040,
	  wBase[[2]] * sPhi  / 0.060};

	{gTune, gBeta, gPhase} = {
	  Restrict[2 / (Power[1.1, 1-gTune]  + Power[gTune,  -1.1]), 1, 3e3],
	  Restrict[2 / (Power[1.1, 1-gBeta]  + Power[gBeta,  -1.1]), 1, 3e2],
	  Restrict[2 / (Power[1.1, 1-gPhase] + Power[gPhase, -1.1]), 1, 1e2]};

	wTune  = gTune * wTune;
	wBeta  = Thread[gBeta  * Thread[wBeta]];
	wPhase = Thread[gPhase * Thread[wPhase]];
	StandardForm[$FORM="8.3"; Print["Heuristic Weight Factor:"];
	  Print[" Tune: ", gTune, " Beta: ", gBeta, " Phase: ", gPhase]]]];

      wCond=Join[
	If[cfTune,         xyBalance * wtune * wBase[[1]] * wTune, {}],
	If[keepWaist,      xyBalance * wWaist, {}],
	Null@@If[cfBeta,   xyBalance * wBase[[1]] * Thread[wBeta],  {}],
	Null@@If[cfPhase,  xyBalance * wBase[[2]] * Thread[wPhase], {}]];
      ];

    (* Add beta function scale fudge *)
    If[ufBetaFudge && cfBeta, With[{len=Length[matBX],
      offset=2+If[keepWaist, 2, 0],
      table0 = Table[0, {2 * np}],
      tableX = Join@@Table[If[i == id, {1, 0}, {0, 0}], {i, np}],
      tableY = Join@@Table[If[i == id, {0, 1}, {0, 0}], {i, np}]}, m=Join[
	Join[table0, #]&/@Take[m,  offset],
	MapThread[Join[#1 * tableX, #2]&,
	  {1 + dbx / bxm, Take[m, {offset+1,     offset+  len}]}],
	MapThread[Join[#1 * tableY, #2]&,
	  {1 + dby / bym, Take[m, {offset+len+1, offset+2*len}]}],
	Join[table0, #]&/@Take[m, {offset+2*len+1, -1}]];
      ]];

    (* Add phase offset fudge *)
    If[ufPhaseFudge && cfPhase, With[{len=Length[matPhiX],
      offset=2+If[keepWaist, 2, 0]+If[cfBeta, 2*Length[matBX], 0],
      table0 = Table[0, {2 * np}],
      tableX = Join@@Table[If[i == id, {1, 0}, {0, 0}], {i, np}],
      tableY = Join@@Table[If[i == id, {0, 1}, {0, 0}], {i, np}]}, m=Join[
	Join[table0, #]&/@Take[m,  offset],
	Join[tableX, #]&/@Take[m, {offset+1,     offset+len}],
	Join[tableY, #]&/@Take[m, {offset+len+1, offset+2*len}],
	Join[table0, #]&/@Take[m, {offset+2*len+1, -1}]];
      ]];

    (* Generate fudge variable weight vector *)
    wVar={
      If[Not[ufPhaseFudge && cfPhase], {}, wPhaseFudge
	* (Sqrt[Plus@@(#^2) / Length[#]]&/@Flatten/@{matPhiX, matPhiY})],
      If[Not[ufBetaFudge && cfBeta], {}, wBetaFudge
	* (Sqrt[Plus@@(#^2) / Length[#]]&/@Flatten/@{matBX, matBY})],
      Join[Switch[wQuadFudge,
	_Real, Table[wQuadFudge, {Length[quadList]}],
	_, Take[Join[If[RealListQ[wQuadFudge], wQuadFudge, {}],
	  Table[1, {Length[quadList]}]], Length[quadList]]],
      Table[wSextBump,  {Length[bumpList]}],
      Table[wSextMover, {Length[sxMoList]}]]};

      {m, b, wOff * wCond, Null@@wVar}]&, {db, Range[Length[db]]}]];

    (* Merge off-momentum matrix *)
    m     = Join@@mArray[[1]];
    b     = Join@@mArray[[2]];
    wCond = Join@@mArray[[3]];
    wVar  = Join[Join@@mArray[[4]], Join@@mArray[[5]],
      Plus@@mArray[[6]] / Length[mArray[[6]]]];

    s=wVar * LinearSolve[Map[(wVar*#)&, wCond * m],
      wCond * b, Tolerance->(Tolerance/.opt)];

    sPhase= {0, 0}; sBeta= {0, 0};
    If[ufPhaseFudge && cfPhase, sPhase= Take[s, 2 * np]; s=Drop[s, 2 * np];
      sPhase= Thread[db[[,1]]->Partition[sPhase, 2]];
      sPhase= dpref/.Override[sPhase, dpref->{0, 0}]];
    If[ufBetaFudge  && cfBeta,  sBeta=  Take[s, 2 * np]; s=Drop[s, 2 * np];
      sBeta=  Thread[db[[,1]]->Partition[sBeta,  2]];
      sBeta=  dpref/.Override[sBeta,  dpref->{0, 0}]];
    sQuad=  Take[s, Length[quadList]]; s=Drop[s, Length[quadList]];
    sBump=  Take[s, Length[bumpList]]; s=Drop[s, Length[bumpList]];
    sMover= Take[s, Length[sxMoList]]; s=Drop[s, Length[sxMoList]];

    If[ufBetaFudge  && cfBeta,  Print["Beta Fudge: AF-1=",  sBeta]];
    If[ufPhaseFudge && cfPhase, Print["Phase Fudge: dPhi=", sPhase]];

    (* Restore DP0 *)
    If[DP0 <=> dpbak, DP0 = dpbak; FFS[calcCmd]];

    Return[{
      If[Length[quadList]>0, Thread[{quadList, sQuad}], {}],
      Flatten[Thread/@Thread[{bumpList[[,1]],  sBump * bumpList[[,2]]}], 1],
      If[Length[sxMoList]>0, Thread[{sxMoList, sMover}], {}],
      BetaFudge->sBeta, PhaseFudge->sPhase}];
    ];
  ];
! >>> BetaCorrection class <<<
! End of File