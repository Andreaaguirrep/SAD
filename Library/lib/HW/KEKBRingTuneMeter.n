!
! Ring Tune Meter Access Library for KEKB
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: KEKBRingTuneMeter.n,v 1.11 2005/06/28 10:35:20 amorita Exp $
! Style:      Class Library
! Require:    Initialized Tkinter
!

! <<< KEKBRingTuneMeter >>>
KEKBRingTuneMeter=Class[{},
  { DORMANT = 0, MEAS$HORI = 1, MEAS$VERT = 2, MEAS$BOTH = 3
    },
  { SimulationMode = False,
    RingID = "LER",
    optStopRequest, Measure$Timeout, Measure$After,
    caDCCT, threshold, dropCount,
    caStart, caNu, state, buffer, count
    },

  Constructor[] := Module[{TunePrefix},
    TunePrefix = Switch[RingID,
      "LER", "CGLOPT:TUNE",
      "HER", "CGHOPT:TUNE",
      _, Print["KEKBRingTuneMeter: Unkown RingID[", RingID, "]"]; Exit[]];
    {optStopRequest, threshold, dropCount} = SwitchCases[Override[Options,
      StopRequest:>False, Threshold->3, DropCount->2],
      { RuleDelayed[StopRequest, _], Rule[Threshold, _Real],
	Rule[DropCount, _Real]}];
    threshold = If[threshold <=> {}, threshold[[1, 2]], 0];
    dropCount = If[dropCount <=> {}, dropCount[[1, 2]], 2];

    state = DORMANT;
    Measure$Timeout = 0; Measure$After = Null;

    If[SimulationMode, Return[]];

    caDCCT = CaMonitor["BM_DCCT:"//RingID[1]//"CUR",
      ValueCommand:>If[state > DORMANT
	&& RealQ[caDCCT@Value[]] && caDCCT@Value[] < threshold,
	  state = DORMANT]];
    Do[With[{i, suffix = "HV"[i]},
      caNu[i] = CaMonitor[TunePrefix//":NU"//suffix,
	ValueCommand:>TuneValue[i]]], {i, 2}];
    caStart = CaMonitor[TunePrefix//":START"]];

  TuneValue[i_] := (If[Not[state > DORMANT], Return[]];
    If[StopRequest/.optStopRequest, state = DORMANT];

    If[count[i] > 0,
      Print[RingID, " Tune-" ,"HV"[i], ":", caNu[i]@Value[]];
      AppendTo[buffer[i], caNu[i]@Value[]]; count[i] -= 1];
    If[count[1] < 1 && count[2] < 1, state = -state]);

  WatchDog[] := If[Measure$Timeout > 0, Measure$Timeout -= 1;
    If[Measure$Timeout > 0, Measure$After = After[1, WatchDog[]],
      If[state > DORMANT, Measure$After = Null; state = DORMANT]]];

  StartWatchDog[timeout_Real] := (StopWatchDog[];
    If[timeout > 0,
      Measure$Timeout = timeout; Measure$After = After[1, WatchDog[]],
      Measure$Timeout = 0]);

  StopWatchDog[] := If[Measure$After <=> Null,
    AfterCancel[Measure$After]; Measure$After = Null];

  MeasureQ[] := If[SimulationMode, True, caStart@Value[] === True];

  FakeTune[1] := Switch[RingID,
    "HER", 44.510 + 0.003 * GaussRandom[],
    "LER", 45.508 + 0.003 * GaussRandom[],
    _, GaussRandom[]];

  FakeTune[2] := Switch[RingID,
    "HER", 41.580 + 0.003 * GaussRandom[],
    "LER", 43.550 + 0.003 * GaussRandom[],
    _, GaussRandom[]];

  Value[hv_Real:3] := Switch[hv,
    1, If[SimulationMode, FakeTune[1], caNu[1]@Value[]],
    2, If[SimulationMode, FakeTune[2], caNu[2]@Value[]],
    3, If[SimulationMode, {FakeTune[1], FakeTune[2]},
      {caNu[1]@Value[], caNu[2]@Value[]}],
    _, Null[]];

  Measure[hv_Real, n_Real, op___Rule] := If[StartMeasure[hv, n, op],
    WaitMeasure[op], Null];

  StartMeasure[hv_Real, n_Real, op___Rule] := Module[{timeout},
    timeout = Timeout/.Override[op, Timeout->(60 + 20 * n)];
    With[{drop = DropCount/.{op}},
      If[RealQ[drop] && drop > 0, dropCount = drop]];

    If[state > DORMANT,
      Print[RingID, " Tune Measurement is already started!"]; Return[False]];

    state = DORMANT; buffer[1] = {}; buffer[2] = {};
    If[n < 1, Return[False]];
    {state, count[1], count[2]} = Switch[hv,
      1, {MEAS$HORI, n + dropCount,             0},
      2, {MEAS$VERT,             0, n + dropCount},
      3, {MEAS$BOTH, n + dropCount, n + dropCount},
      _, Print[RingID, "TuneMeter: Unkown Axis[", hv, "]"]; Return[False]];

    If[SimulationMode,
      Do[(buffer[i] = Table[FakeTune[i], {count[i]}]; count[i] = 0), {i, 2}];
      state = -state; Return[True]];

    StartWatchDog[timeout];
    True];

  WaitMeasure[op___Rule] := Module[{hv, format, buf, avg, sigma},
    hv = Abs[state];
    format = Format/.Override[op, Format->Statistics];

    While[state > DORMANT, TkSense[1]]; (* Wait measurement stop *)
    StopWatchDog[timeout];
    If[state == DORMANT, Return[]];

    Do[(
      buf[i] = Drop[buffer[i], dropCount]; (* Drop first measurement data *)
      Switch[Length[buf[i]],
	0, avg[i] = 0; sigma[i] = Infinity,
	1, avg[i] = First[buf[i]]; sigma[i] = Infinity,
	_, avg[i] = Plug@@buf[i] / Length[buf[i]];
	sigma[i] = Sqrt[Plus@@((buf[i] - avg[i])^2) / (Length[buf[i]] - 1)]]),
      {i, 2}];

    Switch[format,
      Raw, Switch[hv,
	1|2, buf[hv],
	3,  {buf[1], buf[2]}],

      Average, Switch[hv,
	1|2, avg[hv],
	3, {avg[1], avg[2]}],

      Statistics, Switch[hv,
	1|2, {avg[hv], sigma[hv]},
	3, {{avg[1], sigma[1]}, {avg[2], sigma[2]}}],

      _, Print[RingID, "TuneMeter: Unkown Format [", format, "]"]; Null[]]];

  ];
! >>> KEKBRingTuneMeter <<<

! End of File
