!
! Skew Sextupole Access Library for KEKB
!
! Maintainor:	A.Morita(4794)
! Revision:	$Id: KEKBSkewSextupole.n,v 1.8 2009/05/14 09:02:54 amorita Exp $
! Style:	Library
! Require:	etc/KCGConfig.n
!		etc/SkewSextupoleConfig.n
!		TuneServerLib.n
!
Library@Require["etc/KCGConfig", "etc/SkewSextupoleConfig",
  "TuneServerLib"];

$SkewSextupole = Class[{},
  { EpicsChannel, Backleg, BacklegPS, MagnetID,
    Initialized = False},
  {},

  Initialize[] := If[Not[Initialized], With[{replace = {
    Literal[EpicsChannel] -> EpicsChannel,
    Literal[Backleg]->Backleg,
    Literal[BacklegPS]->BacklegPS,
    Literal[MagnetID]->MagnetID,
    Null[]}},
    ReleaseHold/@(Get[KCG$Config@Prefix//"/HER/EpicsChannel.sad"]/.replace);
    ReleaseHold/@(Get[KCG$Config@Prefix//"/LER/EpicsChannel.sad"]/.replace);
    Initialized = True;]];

  ];

$SkewSextupole@Initialize[];

! Test skew sextupole K2 limit
SkewSextupoleLimitQ[{}] := False;
SkewSextupoleLimitQ[sxl:{{_String, _Real}...}] := Or@@(SkewSextupoleLimitQ@@#&)/@sxl;

SkewSextupoleLimitQ[sx_String, v_Real] := With[{limit = SkewSextupoleLimit[sx]},
  Or[v < limit[[1]], limit[[2]] < v]];

! Read skew sextupole BF
ReadSkewSextupoleBF[sxl:{___String}:SkewSextupoles] := With[{
  prefix = $SkewSextupole@EpicsChannel[#, "K2"]},
  {#, If[Not[StringQ[prefix]], $Failed,
    Check[First[CaRead[prefix//":BF"]], $Failed]]}]&/@sxl;

! Write skew sextupole BF
WriteSkewSextupoleBF[sxl:{{_String, _Real}...}:{}] := With[{
  prefix = $SkewSextupole@EpicsChannel[#[[1]], "K2"]},
  If[Not[StringQ[prefix]], $Failed,
    Check[CaWrite[prefix//":BF", #[[2]]], $Failed]]]&/@sxl;

! Get skew sextupole K2
GetSkewSextupole[sxl:{___String}:SkewSextupoles] := {#[[1]],
  If[Not[RealQ[#[[2]]]], $Failed,
    SkewSextupoleBFtoK2[#[[1]]] * #[[2]]]}&/@ReadSkewSextupoleBF[sxl];

! Set skew sextupole K2
SetSkewSextupole[sxl:{{_String, _Real}...}:{},
  opt:((_Rule|_RuleDelayed)...)] := Module[{sxlH, sxlL},
    {sxlH, sxlL} = SelectCases[sxl,
      {First[#][-1] === "E"&, First[#][-1] === "P"&}];
    And[
      Or[Length[sxlH] < 1, SetSkewSextupole$["HER", sxlH, opt]],
      Or[Length[sxlL] < 1, SetSkewSextupole$["LER", sxlL, opt]],
      Null[]]];

SetSkewSextupole$[ringID_String, sxl:{{_String, _Real}...}:{},
  opt:((_Rule|_RuleDelayed)...)] := Module[{rem, clientID,
    replaceKBW, dummyKBW, tuneServer,
    error, bfl = {#[[1]], #[[2]] * SkewSextupoleK2toBF[#[[1]]]}&/@sxl},

    If[debug,
      Print["DEBUG[SetSkewSextupole]: sxl = ", sxl];
      Print["DEBUG[SetSkewSextupole]: bfl = ", bfl];
      Return[True]];

    If[Length[bfl] < 1, Return[True]];

    {clientID, rem} = Append[Part[#, 1, 2]&/@Drop[{##}, -1],
      Last[{##}]]&@@SwitchCases[Override[opt,
	TuneClientID->"SkewSext"],
	{Rule[TuneClientID, _String],
	  _}];

    tuneServer = TuneServerLib[Ring->ringID, ID->clientID, Null@@rem];

    replaceKBW = First[SwitchCases[Override[rem, KBWindow->dummyKBW],
      {(Rule|RuleDelayed)[KBWindow|ErrorHandler, _]}]];

    error = Unevaluated[Which[
      Not[			(* Try to enter critical section *)
	KBWindow[ProgressBar] = 0.1;
	tuneServer@Retain[]],
      "Can't retain "//ringID//" TuneServer!",

      Not[			(* Write skew sextupole BF fudge factor *)
	KBWindow[StatusLine] = "Setting "//ringID//" BF fudge factor";
	KBWindow[ProgressBar] = 0.3;
	And@@(# <=> $Failed&)/@WriteSkewSextupoleBF[bfl]],
      ringID//" skew sextupole BF write error!",

      Not[			(* Wait BF fudge propagation *)
	KBWindow[StatusLine] = "Waiting "//ringID//" BF fudge propagation";
	KBWindow[ProgressBar] = 0.5;
	TkSense[1.5];
	True],
      "Implement Error[PropagationWait for "//ringID//"]!",

      Not[			(* Send GetFudge&Set command *)
	KBWindow[ProgressBar] = 0.7;
	tuneServer@Command["GetFudge&Set",
	  "Setting "//ringID//" skew sextupole BF fudge", False]],
      ringID//" GetFudge&Set command is failed!",

      Not[			(* Wait KRBUpdateWait *)
	KBWindow[StatusLine] = "Waiting KRBUpdate";
	KBWindow[ProgressBar] = 0.8;
	TkSense[3.5];
	True],
      "Implement Error[PropagationWait for "//ringID"]!",

      Not[			(* Exit critical section *)
	KBWindow[ProgressBar] = 0.9;
	tuneServer@Release[]],
      "Can't release "//ringID//" TuneServer!",

      True, (
	KBWindow[StatusLine] = ringID//" Completed";
	KBWindow[ProgressBar] = 1.0;
	Null)]]/.replaceKBW;

    Unevaluated[KBWindow[ProgressBar] = Null]/.replaceKBW;

    If[StringQ[error], Unevaluated[
      KBWindow[StatusLine] = error;
      ErrorHandler[error];
      Bell[]; Return[False]]/.replaceKBW];

    True];

! Initialize support class
$SkewSextupole@Initialize[];

! End of File
