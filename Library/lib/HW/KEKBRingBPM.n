!
! Ring BPM Access Library for KEKB
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: KEKBRingBPM.n,v 1.18 2008/11/06 12:27:18 amorita Exp $
! Style:      Class Library
! Require:    LEROptics/HEROptics@KEKBOptics.n
!             Log/KEKBLog.n
!             Prog/QFunctions.n
!
Library@Require["Log/KEKBLog", "Prog/QFunctions"];

! <<< KEKBRingBPM class >>>
KEKBRingBPM=Class[{}, (* KEKB Ring BPM Access Wrapper Library *)
  {
    },
  {
    },
  ];
! >>> KEKBRingBPM class <<<

! <<< KEKBRingBPM$Common class >>>
KEKBRingBPM$Common=Class[{}, (* Common Class *)
  { BPMNameTable
    },
  { Ring, (* Instance Variable for Options *)
    BPMPrefix, LogPrefix
    },

  Destructor[] := ();

  Constructor[] := (
    {BPMPrefix, LogPrefix} = Switch[Ring@RingID,
      "HER", {"BMHBPM:", "BPMHER"},
      "LER", {"BMLBPM:", "BPMLER"},
      _,     {"", ""}];

    BPMNameTable[ringID_] := Module[{catalog, record, bpm},
      catalog = KEKBLog$Catalog[];
      record = With[{len = StringLength[BPMPrefix]},
	Map[#[len + 1, -6]&, Select[catalog@ls["BM/"//LogPrefix],
	  #[1, len] === BPMPrefix && #[-5, -1] === ":STAT"&]]];
      catalog =.;

      record = Map[With[{pos = StringPosition[#, "_"]},
	{Switch[Restrict[Length[pos], 0, 2],
	  2, #[pos[[1,2]] + 1, pos[[2,1]] - 1],
	  1, #[pos[[1,2]] + 1, -1],
	  0, #], #}]&, record];
      record = Map[{Switch[#, (* Fixup BPM record names *)
	{_, "TKB_SKQB_R"}, "QKBRE",
	{_, "TKB_SKQA_R"}, "QKARE",
	{"QC2LE1"|"QC2LE2", _}, "QC2LE",
	{"QC2LPH", _}, "QC2LP",
	{"QC2RPH", _}, "QC2RP",
	{_, "TKB_SKQA_L"}, "QKALE",
	{_, "TKB_SKQB_L"}, "QKBLE",
	_, First[#]], Second[#]}&, record];
      record = Map[With[{type = #}, {type,
	Select[record, type === First[#]&][[,2]]}]&, Union[record[[,1]]]];
      record = Map[With[{type = First[#], records = Second[#]},
	type->If[Length[records] < 2, records,
	  If[Min[Length[StringPosition[#, "_"]]&/@records] < 2, Sort[records],
	    Sort[records, ToExpression[
	      #1[StringPosition[#1, type//"_"][[1,2]] + 1, -1]//" < "
	        //#2[StringPosition[#2, type//"_"][[1,2]] + 1, -1]]&]]]]&,
	record];

      bpm = LINE["NAME", "M*"];
      bpm = Map[With[{type = First[#],
	bpmNames = Second[#], records = First[#]/.record},
	If[type === records || Length[bpmNames] <> Length[records], Null[],
	  MapThread[#1->#2&, {bpmNames, records}]]]&,
	Map[With[{type = #}, {type, Select[bpm, StripSuffixNumber[#[5, -1]] === type&]}]&,
	  Union[Map[StripSuffixNumber[#[5, -1]]&, bpm]]]];
      BPMNameTable[ringID] = Sort[Flatten[bpm],
	LINE["POSITION", First[#1]] < LINE["POSITION", First[#2]]&]];
    );

  BPMName2EPICSChannel[bpm$_String] := With[{bpm = bpm$
    /.BPMNameTable[Ring@RingID]},
    If[bpm$ <=> bpm, bpm, $Failed]];

  EPICSChannel2BPMName[ch$_String] := Module[{pos, prefix, ringID},
    pos = StringPosition[ch$, ":"];
    prefix = Switch[Length[pos],
      0, ch$,
      1, ch$[pos[[1,2]] + 1, -1],
      _, ch$[pos[[1,2]] + 1, pos[[2,1]] - 1]];
    ringID = Switch[Length[pos],
      0, Ring@RingID,
      _, Switch[ch$[1, pos[[1,1]] - 1],
	"BMHBPM", "HER",
	"BMLBPM", "LER",
	_, Ring@RingID]];

    pos = Position[BPMNameTable[ringID][[,2]], prefix];

    If[pos <=> {}, BPMNameTable[ringID][[pos[[1,1]], 1]], $Failed]];

  StripSuffixNumber[s$_String] := Module[{s = s$},
    While[DigitQ[s[-1]], s = s[1, -2]]; s];

  DigitQ[c_String] := Switch[c,
    "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9", True,
    _, False];

  ];
! >>> KEKBRingBPM$Common class <<<

! <<< KEKBRingBPM$CaCommon class >>>
KEKBRingBPM$CaCommon=Class[{}, (* Common Class for CaMonitor *)
  { EpochOffset = 2209021200 (* Epoch offset between Unix and SAD *)
    },
  { AutoStart = True, (* Instance Variable for Options *)
    caType, ca
    },

  Destructor[] := If[ListQ[caType], Scan[(ca[#] =.)&, caType], ca =.];

  Constructor[] := (caType = {});

  Start[] := If[ListQ[caType], Scan[ca[#]@Start[]&, caType], ca@Start[]];

  Stop[] := If[ListQ[caType], Scan[ca[#]@Stop[]&, caType], ca@Stop[]];

  ];
! >>> KEKBRingBPM$CaCommon class <<<

! <<< KEKBRingBPM$COD class >>>
KEKBRingBPM$COD=Class[{KEKBRingBPM$Common,
  KEKBLog$Config, KEKBLog$Common, Unix$Shell, DebugLog},
  { RevisionID = "$Revision: 1.18 $"[12, -3]
    },
  {
    },

  Destructor[] := (
    KEKBRingBPM$Common`Destructor[];
    DebugLog`Destructor[]);

  Constructor[] := (
    DebugLog`Constructor["KEKBLog$BPM"];
    KEKBRingBPM$Common`Constructor[];
    RshInitialize[]);

  (* Retrieve KBL-type COD data from KEKBLog archives *)
  (*
    Arguments:
      time	time to read KEKBLog archives

    Results:
      {{bpm name, s[m], x position[m], y position[m], bpm status},...}
      bpm status:	0(measurement is valid)
			non-zero(invalid: meaning is depend to BPM records)
    or
      $Failed(failed to retrieve)
    *)
  Retrieve[time_Real] := Module[{d, reason,
    scaling = 1e-3, (* Standard EPICS record logged by `mm' unit *)
    group, year = First[ToDate[time]], t = KEKBLogTime[time],
    cmd, isLocal, hostlist = First[KEKBLog$LogReadHosts],
    host = CheckQueryHost[KEKBLog$LogReadHosts]},
    isLocal = (host === HostName[]);

    group = If[year < 2002, "BM/BPM",
      Switch[Ring@RingID,
	"HER", "BM/BPMHER",
	"LER", "BM/BPMLER",
	_,     "BM/BPM"]];

    cmd = Shell[KEKBLog$LogReadCmd, "-f", "sad", "-t", t, group, Escape->True];
    cmd = Shell[cmd, "||", "echo", "\\\"@CmdFailed:$?@\\\""];

    cmd = If[Not[isLocal], Shell["{", Shell[Rsh, Null@@RshOpt, host,
      Shell["sh", "-c",  cmd, Escape->True], Escape->True],
      "||", "echo", "\\\"@RshFailed:$?@\\\"", ";", "}"],
      Shell["{", cmd, ";", "}"]];

    d = Check[Block[{nan = NaN}, Get["!"//cmd]], "@ReadFailed:Broken@"];
    Switch[{Depth[d], Dimensions[d]},
      {4, {_, 2}}, (* Raw Format without time-index *),

      {1, _}, Switch[Head[d],
        String, (* Script Handled Error Status *),
        Symbol, d = StandardForm[ToString[d]];
        Which[(* Unkown External Command Error *)
          StringMatchQ[d, "Segmentation"], d = "@ReadFailed:SEGV@",
          StringMatchQ[d, "Terminated"], d = "@ReadFailed:TERM@",
          True, (* Nothing to do *)],
        _, d = "@ReadFailed:Broken@"],

      _,  d = "@ReadFailed:Broken@"];

    Switch[Head[d],
      List, Module[{hash, pos, ch, name, prop, val},
	hash[_, "STAT"] := 0;
	hash[_, _] := 0;
	Scan[(ch = #[[1]]; val = #[[2]];
	  pos = StringPosition[ch, ":"];
	  prop = Switch[Length[pos],
	    0|1, Undefined,
	    _, ch[pos[[2,2]] + 1, -1]];
	  name = EPICSChannel2BPMName[ch];
	  hash[name, prop] = Switch[prop,
	    "XPOS"|"YPOS", First[val] * scaling, (* scaling unit to `m' *)
	    "STAT",        First[val],
	    _, val])&, d];

	Ring@Choose["All", False]; (* Reload lattice for getting geometry *)
	Return[MapThread[With[{bpm = #1, s = #2,
	  x = hash[#1, "XPOS"], y = hash[#1, "YPOS"], stat = hash[#1, "STAT"]},
	  Switch[bpm[1,4],
	    "M00A"|"M00D", Null[],
	    "M00B"|"M00C", Null[],
	    _, {bpm, s, x, y, stat}]]&, LINE[{"NAME", "S"}, "M*"]]];
	],

      String,
      reason = ""; Switch[d,
        "@ReadFailed:Broken@",
        reason = "Broken return value",

        "@ReadFailed:SEGV@",
        reason = "Segmentation fault in external command",

        "@RshFailed:143@",
        reason = "Remote shell terminated by TERM signal",

        "@CmdFailed:143@",
        reason = "Log Read terminated by TERM signal(probably Watch Dog)",

        "@ReadFailed:TERM@"|"@CmdFailed:137@"|"@CmdFailed:139@",
        reason = "External command terminated by signal",

        "@CmdFailed:1@",
        reason = "Log Read command failed",

        "@RshFailed:1@"|"@RshFailed:255@",
        reason = "Remote shell timed-out",

        _,  reason = "Unkown String["//d//"]"];

      Debug[ERROR, "Retrieve", "Retrieving data at ", Convert@Time2JST[time],
	" is failed by ", reason],

      _, Debug[PANIC, "Retrieve",
        "detect invalid completed I/O result: ", Head[d], "[", d, "]"]];

    $Failed];

  ];
! >>> KEKBRingBPM$COD class <<<

! <<< KEKBRingBPM$CODWF class >>>
KEKBRingBPM$CODWF=Class[{ (* COD Waveform Access Library *)
  KEKBRingBPM$Common, KEKBRingBPM$CaCommon},
  { BPMSuffix = ":CODWF", volLength = 512, wfLength = (4 * 512 + 8)
    },
  { bpm
    },

  Destructor[] := (
    KEKBRingBPM$CaCommon`Destructor[]);

  Constructor[{bpm$__String}] := Constructor[bpm$];

  Constructor[bpm$__String] := (
    KEKBRingBPM$Common`Constructor[];
    KEKBRingBPM$CaCommon`Constructor[];
    bpm = Map[With[{cn = BPMName2EPICSChannel[#]},
      If[StringQ[cn], {#, BPMPrefix//cn//BPMSuffix}, Null[]]]&, {bpm$}];
    ca = If[Length[bpm] < 1, Null, caType = Null;
      CaMonitor[bpm[[,2]], Literal[AutoStart]->AutoStart]];
    bpm = Thread[bpm]);

  DecodeWF[v$_List] := Module[{v, opt = Take[v$, -8]},
    v = With[{n = Last[opt]}, Map[Take[#, n]&,
      Partition[Take[v$, 4 * volLength], volLength]]];
    opt = {Literal[Start]->(EpochOffset + Plus@@Take[opt, 3]),
      Period->Plus@@(Take[opt, {4, 6}] - Take[opt, 3]),
      FFTPoint->opt[[7]], Average->Last[opt]};
    {v, opt}];

  BPMName[] := First[bpm];

  (* Read COD Waveform List: {bpmname, {volA, volB, volC, volD}, status} *)
  Value[] := MapThread[If[ListQ[#2] && Length[#2] == wfLength,
    Prepend[DecodeWF[#2], #1], Null[]]&, {First[bpm], ca@Value[]}];

  ];
! >>> KEKBRingBPM$CODWF class <<<

! <<< KEKBRingBPM$Consistency class >>>
KEKBRingBPM$Consistency=Class[{KEKBRingBPM$Common, KEKBRingBPM$CaCommon},
  {
    },
  { bpm, IndexTable, deltaX, deltaY
    },

  Destructor[] := (
    KEKBRingBPM$CaCommon`Destructor[]);

  Constructor[] := Module[{bpm$, room$},
    KEKBRingBPM$Common`Constructor[];
    KEKBRingBPM$CaCommon`Constructor[];
    bpm$ = Map[With[{cn = BPMName2EPICSChannel[#]}, If[StringQ[cn],
      {#, cn}, Null[]]]&, LINE["NAME", "M*"]]; bpm = bpm$[[,1]];
    bpm$ = MapThread[With[{id = #1, record = #2,
      pos = StringPosition[#2, "_"]},
      If[Length[pos] < 1, Null[], {id,
	record[1, pos[[1,1]] - 1]}]]&, {Range[Length[bpm$]], bpm$[[,2]]}];
    room$ = Union[bpm$[[,2]]];
    bpm$ = Map[With[{room = #}, {room,
      Select[bpm$, room === Second[#]&][[,1]]}]&, room$];
    Scan[With[{room = First[#], len = Length[Second[#]]},
      deltaX[room] = deltaY[room] = Table[0, {i, len}]]&, bpm$];
    bpm$ = Map[With[{room = First[#], id = Second[#], len = Length[Second[#]]},
      Module[{l = {}, i = 1, ioff, offset}, While[i =< len,
	ioff = i; offset = id[[ioff]];
	While[i =< len && id[[i]] - offset === i - ioff, i++];
	AppendTo[l, {offset, room, {ioff, i - 1}}]]; l]]&, bpm$];
    IndexTable = Sort[Flatten[bpm$, 1], First[#1] < First[#2]&];

    Scan[With[{room = #},
      ca[room//":DELTAX"] = CaMonitor[BPMPrefix//room//":DELTAX",
	Literal[AutoStart]->AutoStart,
	ValueCommand:>(deltaX[room] = ca[room//":DELTAX"]@Value[])];
      ca[room//":DELTAY"] = CaMonitor[BPMPrefix//room//":DELTAY",
	Literal[AutoStart]->AutoStart,
	ValueCommand:>(deltaY[room] = ca[room//":DELTAY"]@Value[])];
      caType = Join[caType, {room//":DELTAX", room//":DELTAY"}];
      ]&, room$];
    ];

  BPMName[] := bpm;

  (* Read Consistency List: {bpm list, X-consistency, Y-consistency} *)
  Value[] := {bpm,
    Flatten[Map[With[{room = Second[#], offset = #[[3]]},
      Take[deltaX[room], offset]]&, IndexTable]],
    Flatten[Map[With[{room = Second[#], offset = #[[3]]},
      Take[deltaY[room], offset]]&, IndexTable]]};

  ];
! >>> KEKBRingBPM$Consistency class <<<

! End of File
