!
! LogTrend Application Framework Library
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: LogTrend.n,v 1.79 2006/06/12 00:57:30 amorita Exp $
! Style:      Application Framework Library
! Require:    Widget/DateChooser.n
!             Prog/ProgressInfo.n
!             Prog/QFunctions.n
!             Prog/DebugLog.n
!             Misc/Convert.n
!             Log/KEKBLog.n
! Autoload:   Log/KBLogWarn.n (for invalid library include[KBLog API])
!
Library@Require["Widget/DateChooser",
  "Prog/ProgressInfo", "Prog/QFunctions", "Prog/DebugLog",
  "Misc/Convert", "Log/KEKBLog"];

Library@AutoLoad[KBLog, "Log/KBLogWarn"];

App$Name = "LogTrend";
App$Version = "1.1.0R";
App$BuildID = StringJoin["$Revision: 1.79 $"[12, -3],
  "(KEKBLog: ", KEKBLog$Common@RevisionID,")"];

Debug$Level = 0;
Debug$LogLevel = 0;

! <<< LogTrend class >>>
LogTrend = Class[{DebugLog},
  { StartDateOffset=60,
    DefaultHardCopyScale=0.8,
    {MinimumScreenWidth, MinimumScreenHeight}={170, 120},
    ScrXmin=-0.10, ScrXmax=1.11,
    ScrYmin=-0.15, ScrYmax=1.36, ScrYoff=0.05,

    DefaultOptions={ScreenWidth->640, ScreenHeight->480,
      Resolution->-1800, Period->3600, Wait->30,
      AutoRefill->True, RefillRatio->0.2},
    DefaultChartOptions={Index->1, Filter->(True&), Legend->"", YAxis->1,
      Style->LinesPoints, StepRatio->1, ScaleFactor->1,
      FrameBackGround->"white"},
    DefaultRecordOptions={Title->"", Scale->Linear, Range->Automatic},

    DefaultHistoryPeriods={
      {"30 minutes",   0.5 * 3600},
      {" 1 hour",        1 * 3600},
      {" 2 hours",       2 * 3600},
      {" 4 hours",       4 * 3600},
      {" 8 hours",       8 * 3600},
      {"16 hours",      16 * 3600},
      {" 1 day",        24 * 3600},
      {" 2 days",   2 * 24 * 3600},
      {" 4 days",   4 * 24 * 3600},
      {" 1 week",   7 * 24 * 3600},
      {" 2 weeks", 14 * 24 * 3600},
      {" 3 weeks", 21 * 24 * 3600},
      {"30 days", 30 * 24 * 3600}}
    },
  { TrendScreenWidth, TrendScreenHeight, TrendBackGround,
    TrendName, TrendWait,
    Config, logRetriever,
    TrendPeriod, TrendRefillRatio, TrendAutoRefill,
    StartDate, trendValue, trendDrawing, trendDrawEvents, trendTo,
    noTrendUpdate,
    mkbf,mf,
    bMenuLength, menuLength,
    bMenuHistory, menuHistory,
    progInfo,
    canvas,
    hScreenWidth, hScreenHeight, hBackGround,
    hId, hMkbf, hMf, hProgInfo, hCanvas,
    hFrame, hFrameD, hFrameT,
    hbClose, hbDraw, hrbBegin, hrbEnd,
    hDC, hbPeriod, hmPeriod, hstrPeriod,
    hDrawing, hCloseRequest,
    hType, hTime, hPeriod
    },

  Destructor[] := Module[{},
    Scan[With[{id=#},
      If[hCanvas[id]<=>Null, Closehistory[id]]]&, Range[0, hId-1]];
    LogRetriever =.;
    progInfo=.;
    ];

  (* Constructor interface *)
  Constructor[config_List] := Initialize[config, Null@@Options];

  Constructor[name_String, config_List] :=
    Initialize[config, Tag->name, Null@@Options];

  Constructor[name_String, config_List, tPeriod$_Real] :=
    Initialize[config, Tag->name, Period->tPeriod$, Null@@Options];

  Constructor[name_String, config_List, tPeriod$_Real, tResolution$_Real] :=
    Initialize[config, Tag->name, Period->tPeriod$, Resolution->tResolution$,
      Null@@Options];

  Constructor[name_String, config_List, tPeriod$_Real, tResolution$_Real,
    tWait$_Real] :=
      Initialize[config, Tag->name, Period->tPeriod$, Resolution->tResolution$,
	Wait->tWait$, Null@@Options];

  Initialize[config$_List,
  op:((_Rule|_RuleDelayed)...)] := Module[{i, pos, fHeight,
    config, opt, rem, x11opt, libopt, resolution},
    DebugLog@DebugLog$MaxCount=50;
    DebugLog`Constructor["LogTrend"];

    trendDrawEvents = 0;
    trendDrawing = False;

    hId = 0;
    hCloseList = {};
    StartDate = FromDate[Date[]] - StartDateOffset;

    (* Parse command line options *)
    Module[{argp, argv = $GetCommandLine[]},
      x11opt = {}; libopt = {};
      argp = -Length[argv]; While[argp < 0, Switch[argv[[argp]],
	"-g"|"-geometry", (* geometry option *)
	If[argp < -1, argp += 1;
	  AppendTo[x11opt, Geometry->argv[[argp]]]],

	"-noupdate", (* no update option *)
	AppendTo[libopt, NoUpdate->True],

	_, (* Skip unkown option *)];
	argp += 1]];

    {noTrendUpdate} = {NoUpdate}/.Override[libopt,
      {NoUpdate->False}];

    (* Parse configuration *)
    {config, opt, rem} = SwitchCases[config$,
      {_List, _Rule|_RuleDelayed, _}];

    (* Setup frame configuration *)
    With[{opt = Override[opt, op, DefaultOptions]},
      resolution = If[RealQ[#] && # >= #2, #, #2]&
	[Resolution/.opt, Resolution/.DefaultOptions];

      TrendName = If[StringQ[#], #, "PID:"//GetPID[]]&[Tag/.opt];
      App$Name = StringJoin["LogTrend(", TrendName, ")"];

      TrendPeriod = If[RealQ[#] && # >= 0, #, #2]&
	[Period/.opt, Period/.DefaultOptions];

      TrendWait = If[RealQ[#] && # >= 0, #, #2]&
	[Wait/.opt, Wait/.DefaultOptions];

      TrendRefillRatio = If[RealQ[#] && # >= 0 && 1 >= #, #, #2]&
	[RefillRatio/.opt, RefillRatio/.DefaultOptions];

      TrendAutoRefill = If[#, #, #, #2]&
	[AutoRefill/.opt, AutoRefill/.DefaultOptions];

      TrendScreenWidth = If[RealQ[#] && # >= #2, #, #2]&
	[ScreenWidth/.opt, MinimumScreenWidth];

      TrendScreenHeight = If[RealQ[#] && # >= #2, #, #2]&
	[ScreenHeight/.opt, MinimumScreenHeight];

      TrendBackGround = If[StringQ[#], #, #2]&[BackGround/.opt, "white"];

      hScreenWidth = If[SymbolQ[#], #3, If[RealQ[#] && # >= #2, #, #2]]&
	[HistoryScreenWidth/.opt,  MinimumScreenWidth,  TrendScreenWidth];

      hScreenHeight= If[SymbolQ[#], #3, If[RealQ[#] && # >= #2, #, #2]]&
	[HistoryScreenHeight/.opt, MinimumScreenHeight, TrendScreenHeight];

      hBackGround = If[StringQ[#], #, #2]&
	[HistoryBackGround/.opt, TrendBackGround];
      ];

    (* New parser *)
    (* Setup column configuration *)
    Config[Length] = Length[config]; pos = 0;
    ScanThread[With[{i = #,
      Column = First[#2], len = Length[First[#2]], opt = Override[Rest[#2],
	opt, DefaultRecordOptions, Resolution->resolution]},
      fHeight = If[RealQ[#] && 0 < #, #, If[RealListQ[#]
	&& i =< Length[#] && 0 < #[[i]], #[[i]], 1 / Config[Length]]]&
	  [FrameHeight/.opt];

      Config[i, Title] = If[ListQ[#], Append[#, ""], {#, ""}]&[Title/.opt];
      Config[i, Scale] = If[ListQ[#], Append[#, Linear], {#, #}]&[Scale/.opt];
      Config[i, Range] = If[Depth[#] > 2, #, {#, #}]&[Range/.opt];
      Config[i, DrawFirst] = If[RealQ[#], #, 2]&[DrawFirst/.opt];
      Config[i, Background] = If[StringQ[#], #, If[StringListQ[#]
	&& i =< Length[#], #[[i]], #2]]&
	  [FrameBackGround/.opt, FrameBackGround/.DefaultChartOptions];
      Config[i, DrawRectangle] = {
	{ScrXmin, ScrYmax - (ScrYmax - ScrYmin - ScrYoff) * (pos + fHeight)},
	{ScrXmax, ScrYmax - (ScrYmax - ScrYmin - ScrYoff) *  pos}};

      pos += fHeight + If[RealQ[#], #, 0]&[Spacing/.opt];

      Config[i, Length] = len;
      Config[i, Rule] = MapThread[With[{j = #1, path = First[#2],
	rest = 	SwitchCases[Rest[#2], {_String, _Rule|_RuleDelayed}]},
	{j, path, Override[
	  If[First[rest] <=> {}, Legend->rest[[1, 1]]], Null@@Second[rest],

	  If[RealQ[#] && 0 < #, Index->#, If[RealListQ[#]
	    && j =< Length[#] && 0 < #[[j]], Index->#[[j]]]]&[Index/.opt],

	  If[StringQ[#] && j == 1, Color->#, If[StringListQ[#]
	    && j =< Length[#], Color->#[[j]]]]&[Color/.opt],

	  If[FunctionQ[#], Filter->#, If[FunctionListQ[#]
	    && j =< Length[#], Filter->#[[j]]]]&[Filter/.opt],

	  If[FunctionQ[#], Function->#, If[FunctionListQ[#]
	    && j =< Length[#], Function->#[[j]]]]&[Function/.opt],

	  If[StringQ[#] && j == 1, Legend->#, If[StringListQ[#]
	    && j =< Length[#], Legend->#[[j]]]]&[Legend/.opt],

	  If[RealQ[#], YAxis->#, If[RealListQ[#]
	    && j =< Length[#], YAxis->#[[j]]]]&[YAxis/.opt],

	  If[RealQ[#], Resolution->#, If[RealListQ[#]
	    && j =< Length[#], Resolution->#[[j]]]]&[Resolution/.opt],

	  If[SymbolQ[#], Style->#, If[SymbolListQ[#]
	    && j =< Length[#], Style->#[[j]]]]&[Style/.opt],

	  If[RealQ[#], StepRatio->#, If[RealListQ[#]
	    && j =< Length[#], StepRatio->#[[j]]]]&[StepRatio/.opt],

	  If[RealQ[#], ScaleFactor->#, If[RealListQ[#]
	    && j =< Length[#], ScaleFactor->#[[j]]]]&[ScaleFactor/.opt],

	  Color->Convert@HSV2X11Color[(j - 1) / Config[i, Length], 1.0, 1.0]
	  ]}]&, {Range[Config[i, Length]], Column}];

      Scan[With[{j = First[#], path = Second[#],
	opt = Override[Drop[#, 2], DefaultChartOptions]},

	Config[i, j, Path] = Switch[Head[path],
	  String, path,
	  List, StringJoin@@Drop[Flatten[
	    Thread[{path, Table["/", {k, Length[path]}]}]], -1],
	  _, Debug[PANIC, "Initialize", "invalid path element[", path, "]"];
	  ];

	Config[i, j, Resolution] = If[RealQ[#] && #2 =< #, #, #2]&
	  [Resolution/.opt, Resolution/.DefaultOptions];

	Config[i, j, Index] = If[RealQ[#] && 0 < #, #, #2]&[Index/.opt, 1];

	Config[i, j, Filter] = If[FunctionQ[#], #, #2]&[Filter/.opt, (True&)];

	Config[i, j, Function] = If[FunctionQ[#], #, #2]&[Function/.opt, Identity];

	Config[i, j, Color] = If[StringQ[#], #, #2]&[Color/.opt, "black"];

	Config[i, j, Legend] = If[StringQ[#], #, #2]&
	  [Legend/.opt, Legend/.DefaultChartOptions];

	Config[i, j, YAxis] = If[(YAxis/.opt) === 2, 2, 1];

	Config[i, j, StepRatio] = If[RealQ[#], #, #2]&
	  [StepRatio/.opt, StepRatio/.DefaultChartOptions];

	Config[i, j, ScaleFactor] = If[RealQ[#], #, #2]&
	  [ScaleFactor/.opt, ScaleFactor/.DefaultChartOptions];

	Config[i, j, Style] = Style/.opt;

	Config[i, j, Range] = Config[i, Range][[Config[i, j, YAxis]]];

	Config[i, j, StyleOption] = {
	  FrameLabel->{If[i == Config[Length], "Time", ""],
	    If[Config[i, j, YAxis] == 1, Config[i, Title][[1]], ""], "",
	    If[Config[i, j, YAxis] == 2, Config[i, Title][[2]], ""]},
	  FrameTicks->If[Config[i, j, YAxis] <> 2,
	    {i == Config[Length], True,  False, False},
	    {i == Config[Length], False, False, True}],
	  GridLines->If[Config[i, j, YAxis] == 1,
	    {Automatic, Automatic}, {Automatic, None}],
	  StepRatio->Config[i, j, StepRatio],
	  PointColor->Config[i, j, Color], PlotColor->Config[i, j, Color]};

	]&, Config[i, Rule]];

      ]&, {Range[Config[Length]], config}];

    trendValue=Table[1E-6, {i, Config[Length]}];

    mkbf=KBMainFrame["LogTrend("//TrendName//")", mf,
      Title->"LogTrend("//TrendName//")"];
    mkbf[AboutMessage]=StringJoin[
      "LogTrend Library Version ", App$Version, "\n",
      "Revision: ", App$BuildID, "\n",
      "Copyright (C) 2002 Akio Morita\n",
      "Start: ", DateString[], " JST"];
    mkbf[HardCopyScale]=DefaultHardCopyScale;
    mkbf[StatusLine] = {mkbf[$Label$Print],
      "Hard Copy of LogTrend("//TrendName//")"};
    mkbf[ExitCommand]:=Module[{},This=.];
    mkbf[State]="withdrawn";

    (* Set X11 options *)
    Scan[(mkbf[#[[1]]]=#[[2]])&, x11opt];

    logRetriever = KEKBLog$Retrieve[];

    progInfo=ProgressInfo[WidgetVariable:>mkbf];

    canvas=Canvas[mf,Width->TrendScreenWidth,Height->TrendScreenHeight,
      Side->"left",Background->TrendBackGround,Expand->True,Fill->"both"];

    bMenuLength=KBFAddMenuButton[mkbf,Text->"Length"];
    menuLength=Menu[bMenuLength,
      Add->Module[{tmp={
	CheckButton[Text->"Stop Update", Variable:>noTrendUpdate],
	Separator[]}, f=False}, Scan[With[{tag=#[[1]], val=#[[2]]},
	If[Not[f] && Abs[TrendPeriod - val] < 0.5, f=True; TrendPeriod=val];
	If[Not[f] && TrendPeriod < val, f=True; AppendTo[tmp,
	  RadioButton[Text->"Default", Value->TrendPeriod,
	    Variable:>TrendPeriod, Command:>UpdateTrend[]]]];
	AppendTo[tmp,
	  RadioButton[Text->tag, Value->val,
	    Variable:>TrendPeriod, Command:>UpdateTrend[]]];
	]&, DefaultHistoryPeriods]; tmp]];

    bMenuHistory=KBFAddMenuButton[mkbf,Text->"History"];
    menuHistory=Menu[bMenuHistory, Add->{
      Button[Text->"Last 1 shift(8 hour)",
	Command:>OpenHistory[FromDate[Date[]],  8 * 3600]],
      Button[Text->"Last 1 day",
	Command:>OpenHistory[FromDate[Date[]], 24 * 3600]],
      Button[Text->"Free Style",
	Command:>OpenHistory[FromDate[Date[]], 24 * 3600, False]]
      }];
    mkbf[State]="normal";
    Update[IdleTasks];

    Canvas$Widget=canvas;
    Scan[(The$CanvasObject@LegendOffset["legend"//#]
      ={-TrendScreenWidth * 0.60, 0})&,
      Range[Config[Length]] + 1];

    trendTo = FromDate[];
    PeriodicUpdateTrend[]];

  CloseHistory[id_Real] := Module[{},
    If[hDrawing[id],
      hCloseRequest[id]=True;
      After[1, CloseHistory[id]];
      Return[]];

    hMkbf[id][State]="withdrawn";
    hDC[id]=.;
    hProgInfo[id]=.;
    DeleteWidget[hbPeriod[id]];
    DeleteWidget[hbClose[id]];
    DeleteWidget[hbDraw[id]];
    DeleteWidget[hFrameT[id]];
    DeleteWidget[hFrameD[id]];
    DeleteWidget[hFrame[id]];
    DeleteWidget[hCanvas[id]];
    hMkbf[id][Close];
    Clear[hbClose[id], hbDraw[id], hCanvas[id]];
    Clear[hrbBegin[id], hrbEnd[id]];
    Clear[hFrameD[id], hFrameT[id], hFrame[id]];
    Clear[hmPeriod[id], hbPeriod[id], hstrPeriod[id]];
    Clear[hDrawing[id], hCloseRequest[id]];
    Clear[hType[id], hTime[id], hPeriod[id]];
    ];

  OpenHistory[end$_Real, period$_Real, draw$_Real:True] := With[{id=hId},
    hId+=1;

    hDrawing[id]=False;
    hCloseRequest[id]=False;

    hType[id]=True;
    hTime[id]=end$;
    hPeriod[id]=period$;
    hstrPeriod[id]="";
    Scan[If[hPeriod[id] >= #[[2]], hstrPeriod[id]=#[[1]]]&,
      DefaultHistoryPeriods];

    hMkbf[id]=KBSubFrame["LogTrend("//TrendName//") History#"//id, hMf[id],
      Title->"LogHistory("//TrendName//") History#"//id];
    hMkbf[id][State]="withdrawn";
    hMkbf[id][HardCopyScale]=DefaultHardCopyScale;
    hMkbf[id][StatusLine] = {hMkbf[id][$Label$Print],
      "Hard Copy of LogTrend("//TrendName//") History Mode"};

    hProgInfo[id]=ProgressInfo[WidgetVariable:>hMkbf[id]];

    hCanvas[id]=Canvas[hMf[id],Width->hScreenWidth,Height->hScreenHeight,
      Side->"top",Background->hBackGround,Expand->True,Fill->"both"];
    hFrame[id]=Frame[hMf[id],Side->"bottom"];

    hbClose[id]=Button[hFrame[id], Text->"CLOSE",Side->"left",
      Command:>CloseHistory[id]];

    hbDraw[id]=Button[hFrame[id], Text->"DRAW",Side->"right",
      Command:>With[{id},
	hbDraw[id][State]="disable"; hDrawing[id]=True;
	DrawStripChart[hCanvas[id], hProgInfo[id], If[hType[id],
	  {hTime[id] - hPeriod[id], hTime[id]},
	  {hTime[id], hTime[id] + hPeriod[id]}],
	  Stop:>hCloseRequest[id],
	  Command:>(hDrawing[id]=False; hbDraw[id][State]="normal")]]];

    hbPeriod[id]=OptionMenu[hFrame[id], Side->"right",
      TextVariable:>hstrPeriod[id]];
    hmPeriod[id]=Menu[hbPeriod[id],
      Add->Module[{tmp={}, f=False}, Scan[With[{tag=#[[1]], val=#[[2]]},
	If[Not[f] && Abs[hPeriod[id] - val] < 0.5, f=True; hPeriod[id]=val];
	If[Not[f] && hPeriod[id] < val, f=True; AppendTo[tmp,
	  RadioButton[Text->"Default", Value->hPeriod[id],
	    Variable:>hPeriod[id], Command:>(hstrPeriod[id]="Default")]]];
	AppendTo[tmp,
	  RadioButton[Text->tag, Value->val,
	    Variable:>hPeriod[id], Command:>(hstrPeriod[id]=tag)]];
	]&, DefaultHistoryPeriods]; tmp]];

    hFrameD[id]=Frame[hFrame[id],Side->"right"];
    hDC[id]=DateChooser[hFrameD[id], Text->"", Variable:>hTime[id]];

    hFrameT[id]=Frame[hFrame[id],Side->"right"];
    hrbBegin[id]=RadioButton[hFrameT[id], Side->"top", Anchor->"w",
      Variable:>hType[id], Value->False, Text->"Begin"];
    hrbEnd[id]=RadioButton[hFrameT[id], Side->"bottom", Anchor->"w",
      Variable:>hType[id], Value->True,  Text->"End"];


    hbDraw[id][State]="disable"; hDrawing[id]=True;

    hMkbf[id][State]="normal";
    Update[IdleTasks];

    If[draw$, With[{id},
      DrawStripChart[hCanvas[id], hProgInfo[id], If[hType[id],
	{hTime[id] - hPeriod[id], hTime[id]},
	{hTime[id], hTime[id] + hPeriod[id]}],
	Stop:>hCloseRequest[id],
	Command:>(hDrawing[id]=False; hbDraw[id][State]="normal")]],
      hDrawing[id]=False; hbDraw[id][State]="normal"];

    Update[IdleTasks];
    ];

  PeriodicUpdateTrend[] := Module[{pf},
    pf = Prog$FlowDebug["PeriodicUpdateTrend"];
    If[Not[noTrendUpdate], UpdateTrend[]];
    After[If[noTrendUpdate, TrendWait / 5, TrendWait], PeriodicUpdateTrend[]]];

  UpdateTrend[] := Module[{from, to, pf},
    pf = Prog$FlowDebug["UpdateTrend"];
    (* Check & Lock `trend update mutex' *)
    If[trendDrawing,
      trendDrawEvents += 1; Return[],
      trendDrawing = True];

    If[Not[noTrendUpdate], trendTo = FromDate[]];

    to = trendTo; from = to - TrendPeriod;
    If[TrendAutoRefill && from < StartDate,
      StartDate -= TrendPeriod * TrendRefillRatio];

    DrawStripChart[canvas, progInfo, {from, to, StartDate},
      Priority->10,
      (* Unlock `trend update mutex' *)
      Command:>With[{events = trendDrawEvents},
	If[events > 2, After[TrendWait / 2, UpdateTrend[]]];
	trendDrawEvents = 0;
	trendDrawing = False]];
    ];

  DrawStripChart[c$_, prog_, List[from_Real, to_Real], opt___]
  := DrawStripChart[c$, prog, List[from, to, from], opt];

  DrawStripChart[canvas$_, prog_, List[from_Real, to_Real, start_Real],
    opt:((_Rule|_RuleDelayed)...)] := Module[{id, pf, msec = TimeUsed[]},
      msec = TimeUsed[];
      pf = Prog$FlowDebug["DrawStripChart"];
      prog@message["Now Updating... "]; prog@progress[0]; Update[IdleTasks];
      id = Map[With[{i = #}, Map[With[{j = #},
	logRetriever@Request[{Config[i, j, Path]},
	  Null@@First[SwitchCases[{opt}, {Rule[Priority, _]}]],
	  Range->{Max[from, start], to},
	  Resolution->Log$Resolution[from, to, Config[i, j, Resolution]]
	  ]]&, Range[Config[i, Length]]]]&, Range[Config[Length]]];
      Debug[PROF, "DrawStripChart", "Request KEKBLog: ",
	(TimeUsed[] - msec) * 1e3, "msec"]; msec = TimeUsed[];
      logRetriever@Strategy[];
      Debug[PROF, "DrawStripChart", "Strategy KEKBLog: ",
	(TimeUsed[] - msec) * 1e3, "msec"]; msec = TimeUsed[];
      PollStripChart[canvas$, prog, id, {from, to}, 0, opt]];

  PollStripChart[canvas$_, prog_, id_List, region_List, status$_Real:0,
    opt:((_Rule|_RuleDelayed)...)] := Module[{status, status0 = status$,
      com, stop, pf},
      pf = Prog$FlowDebug["PollStripChart"];
      {com, stop} = SwitchCases[Override[opt, {Stop:>False}],
	{RuleDelayed[Command, _], RuleDelayed[Stop, _]}];

      status = logRetriever@Poll@@Flatten[id]; prog@progress[status];
      If[Not[status < 1 && Abs[status - status0] < 0.02],
	status0 = status;
	RenderStripChart[canvas$, id, region]];

      If[status < 1 && (Stop/.opt) <=> True,
	With[{status0}, After[0.25,
	  PollStripChart[canvas$, prog, id, region, status0, opt]]],
	prog@message["Last Update "//
	  If[status < 1, "Canceled: ", "Completed: "]//DateString[]//" JST"];
	logRetriever@Release@@Flatten[id];
	If[com <=> {}, With[{com}, After[0.001, com[[1,2]]]]];
	prog@progress[]; prog@message[]];
      ];

  RenderStripChart[canvas$_, id_List, List[from_Real, to_Real]] := Module[{
    graph, chunk, style, legend, lValue, pf, msec = TimeUsed[]},
    pf = Prog$FlowDebug["RenderStripChart"];

    graph = Map[With[{i = #, DrawRectangle = Config[#, DrawRectangle]},
      With[{gl1=Select[#, (#[[1]]<=>2)&][[,2]],
	gl2=Select[#, (#[[1]]===2)&][[,2]]}, Join[
	  If[Config[i, DrawFirst] === 2, {If[Length[gl2]>0,
	    Graphics[Rectangle[Null@@DrawRectangle, gl2]]]}, Null[]],
	  {If[Length[gl1]>0, Graphics[Rectangle[Null@@DrawRectangle, gl1]]]},
	  If[Config[i, DrawFirst] <=> 2, {If[Length[gl2]>0,
	    Graphics[Rectangle[Null@@DrawRectangle, gl2]]]}, Null[]],
	  Null[]]]&
	    [Map[With[{j = #},

       chunk = Check[Select[First[logRetriever@Retrieve[id[[i, j]],
	 Blocking->False, Release->False]], RuleQ[#]&], {}];
       If[Length[chunk] > 0, chunk = Part[Join@@chunk[[,2]],,
	 {1, 1 + Config[i, j, Index]}]];
       With[{filter = Config[i, j, Filter], func = Config[i, j, Function]},
	 chunk = If[func === Identity,
	   Select[chunk, RealQ[#[[2]]] && filter[#[[2]]]&],
	   Map[Check[With[{t = #[[1]], val = func[#[[2]]], f = filter[#[[2]]]},
	     If[f && RealQ[val], {t, val}, Null[]]], Null[]]&, chunk]]];
       If[Config[i, Scale][[Config[i, j, YAxis]]] === Log,
	 chunk = Select[chunk, #[[2]] > 0&]];

       lValue = Null;
       If[Length[chunk] > 0,
	 If[Config[i, j, ScaleFactor] <=> 1,  chunk = With[{d = Thread[chunk]},
	   Thread[{d[[1]], Config[i, j, ScaleFactor] * d[[2]]}]]];
	 lValue = chunk[[-1, 2]]; trendValue[[i]] = lValue];

       style = Switch[{Config[i, j, Style], Length[chunk] > 5000},
	 {Dots, _},	      {Plot->True,  PlotJoined->False, PointSize->0},
	 {Points,_},          {Plot->True,  PlotJoined->False},
	 {Lines, _},          {Plot->False, PlotJoined->True},
	 {Steps, _},          {Plot->False, PlotJoined->Step},
	 {LinesPoints, _},    {Plot->True,  PlotJoined->True},
	 {StepsPoints, _},    {Plot->True,  PlotJoined->Step},
	 {StepsDots,   True}, {Plot->True,  PlotJoined->False, PointSize->0},
	 {StepsDots,   _},    {Plot->False, PlotJoined->Step},
	 _,                   {Plot->True,  PlotJoined->True}];

       legend = FormatLegend[Config[i, j, Legend], lValue];
       If[legend === $Failed, Debug[PANIC, "RenderStripChart",
	 "error in % hack sequence[", Config[i, j, Legend], "]"]];

       Config[i, j, YAxis]->ListPlot[If[Length[chunk] > 0, chunk,
	 {{-INF, trendValue[[i]]}}],
	 Scale->{Date, Config[i, Scale][[Config[i, j, YAxis]]]},
	 PlotRange->{{from, to}, Config[i, j, Range]},
	 style, PointSize->0.5, Thickness->0,
	 If[legend <=> "", Legend->legend],
	 Null@@Config[i, j, StyleOption],
	 Background->Config[i, Background],
	 DisplayFunction->Identity]
       ]&, Range[Config[i, Length]]]]]&, Range[Config[Length]]];

      Debug[PROF2, "RenderStripChart", "Generate Graphic Objects: ",
	(TimeUsed[] - msec) * 1e3, "msec"]; msec = TimeUsed[];

      Canvas$Widget = canvas$; Show[Flatten[graph, 1]];
      Debug[PROF2, "RenderStripChart", "Draw Graphic Objects: ",
	(TimeUsed[] - msec) * 1e3, "msec"]; msec = TimeUsed[];
    ];

  (* Internal API *)
  Log$Resolution[from_Real, to_Real, res_Real] := If[res < 0,
    Floor[(to - from) / -res], res];

  FormatLegend[format_String, value_] := Module[{i, j, state,
    out, len = StringLength[format]},

    i = 1; out = "";
    While[StringQ[out] && i =< len,
      j = i; While[j =< len && format[j] <=> "%", j += 1]; (* Skip to % *)
      If[i < j, out = out//format[i, j - 1]; i = j; Continue[]];

      state = 0;
      While[0 =< state, j += 1; Switch[{state, j - i, format[j]},
	{0, 1, "%"}, state = -1;
	out = out//"%",

	{0, 1, "v"}, state = -1;
	out = out//StandardForm[$FORM = "";
	  If[RealQ[value], ToString[value], "---"]],

	{0, _, "1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"},     state = 1,
	{1, _, "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"}, state = 1,
	{1, _, "."},                                     state = 2,
	{2, _, "1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"},     state = 3,
	{3, _, "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"}, state = 3,
	{3, _, "v"}, state = -1;
	out = out//StandardForm[$FORM = format[i+1, j-1];
	  If[RealQ[value], ToString[value], "---"]],
	_, state = -2;
	out = $Failed]];
      i = j + 1];
    out];

  ];
! >>> LogTrend class <<<

! End of File
