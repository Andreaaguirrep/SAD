! === Begin KEKBOrbitUtil.n Definition ===
!
! Orbit Manipulation Utility for KEKB
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: KEKBOrbitUtil.n,v 1.50 2007/10/03 13:15:46 amorita Exp $
! Style:      Mix-in Class Library
! Require:    LEROptics/HEROptics@KEKBOptics.n
!

! <<< KEKBOrbitUtil class >>>
KEKBOrbitUtil=Class[{}, (* Orbit Handling Utility Mix-in Class for KEKB *)
  {
    KEKBOrbitUtil$def = {Division->1, HackSteeringSign->True},
    KEKBOrbitUtil$LERChicane = {
      "BP1NP"->1, "BP2NP"->-1,
      "BP1OP"->1, "BP2OP"->-1}
    },
  {(*
    -- Required instance variable --
      Ring: RingOptics class instance
      [Require Backleg/GetElementValue/SetElementValue class method]
    *)
    },

  (* Weight table for Gauss-Legendre integration *)
  GaussLegendreTable[div_Real] := Sort[Which[
    div > 4,
    { {.953089922969332, .118463442528095},
      {.769234655052841, .239314335249683},
      {.5,               .284444444444444},
      {.230765344947158, .239314335249683},
      {.046910077030668, .118463442528095}},

    div > 3,
    { {.930568155797026, .173927422568727},
      {.669990521792428, .326072577431273},
      {.330009478207572, .326072577431273},
      {.069431844202974, .173927422568727}},

    div > 2,
    { {.887298334620742, .277777777777778},
      {.5,               .444444444444444},
      {.112701665379258, .277777777777778}},

    div > 1,
    { {.788675134594813, .5},
      {.211324865405187, .5}},

    True, (* Lowest order approximation *)
    { {.5,              1.0}}], #1[[1]]<#2[[1]]&];

  RingSteerings[opt___Rule] := Module[{backleg, elm},
    (* Get backleg steering elements *)
    backleg = Ring@BacklegSteeringKeyList[[,1]];

    (* Check backleg element *)
    backleg = Select[backleg, With[{elm = Flatten[{Ring@Backleg[#]}]},
      And@@(RealQ/@LINE["POSITION", elm])]&];

    (* Get normal steering elements *)
    elm = If[StringQ[Ring@ElementPattern$Steering],
      Element["NAME", Ring@ElementPattern$Steering],
      Element["NAME", "Z*"]];

    (* Get dummy steering elements if needed *)
    If[And[Dummy/.Override[opt, Dummy->False],
      StringQ[Ring@ElementPattern$DummySteering],
      StringLength[Ring@ElementPattern$DummySteering] > 0],
      elm = Union[elm, Element["NAME", Ring@ElementPattern$DummySteering]]];

    With[{dummy = DummyElements/.Override[opt, DummyElements->""]},
      If[StringQ[dummy] && StringLength[dummy] > 0,
	elm = Union[elm, Element["NAME", dummy]]]];

    Union[elm, backleg]];

  (* Get ring steering list *)
  Steerings[pattern_String:"*", opt___Rule] := Union[
    CCCSteerings[pattern, opt],
    Select[RingSteerings[opt], StringMatchQ[#, pattern]&]];

  (* Get CCC steering list *)
  CCCSteerings[pattern_String:"*", opt___Rule] := Module[{elm,
    relm = RingSteerings[opt]},

    elm = Check[ (* Read CCC steering file *)
      If[FileQ[Ring@RingDirectory//"Magnet/Steering/CCCSteeringNames"],
	Flatten[Get[Ring@RingDirectory//"Magnet/Steering/CCCSteeringNames"]],
	relm],
      relm];

    elm = Select[elm, Position[relm, #] <=> {} || LINE["NAME", #] <=> {}&];

    Select[elm, StringMatchQ[#, pattern]&]];

  With[{iPi = 1 / Pi, ihPi = 2 / Pi},
    (* Steering sign functions *)
    SteeringSign[name_String] := With[{elm = PowerSupply2Element[name]},
      If[OddQ[Round[iPi * LINE["ROTATE", First[elm]] + 0.25]], -1, 1]];

    SteeringSign[name_List] := Map[With[{elm = PowerSupply2Element[#]},
      If[OddQ[Round[iPi * LINE["ROTATE", First[elm]] + 0.25]], -1, 1]]&, name];

    (* Steering type Q function *)
    HSteeringQ[name_String] := With[{elm = PowerSupply2Element[name]},
      Length[elm] > 0 && EvenQ[Round[ihPi * LINE["ROTATE", First[elm]]]]];

    VSteeringQ[name_String] := With[{elm = PowerSupply2Element[name]},
      Length[elm] > 0 && OddQ[Round[ihPi * LINE["ROTATE", First[elm]]]]];

    (* Steering type selection functions *)
    SelectSteeringH[name_List] := Select[name,
      With[{elm = PowerSupply2Element[#]},
	Length[elm] > 0 && EvenQ[Round[ihPi * LINE["ROTATE", First[elm]]]]]&];

    SelectSteeringV[name_List] := Select[name,
      With[{elm = PowerSupply2Element[#]},
	Length[elm] > 0 &&  OddQ[Round[ihPi * LINE["ROTATE", First[elm]]]]]&];
    ];

  (* Convert magnet power supply name to BeamLine element number list *)
  PowerSupply2Element[ps_] := With[{bleg=Ring@Backleg[ps]},
    Flatten[{LINE["POSITION", If[bleg===Undefined, ps, bleg]]}]];

  (* Convert corrector winding to BeamLine element name *)
  Corrector2Element[cn_] := Which[
    cn[1,2] === "AQ", Module[{p}, (* Quadrupole correction winding *)
      p = -1; While[StringPosition["0123456789", cn[p]] <=> {}, p -= 1];
      StringReplace[If[p < -1,
	cn[2,p]//"_"//cn[p+1,-1], cn[2,-1]], "_"->"."]],

    True, cn];

  (* Add steering to model lattice
    Argument:
      steers:  List of {steering name, dK0}
      damping: damping factor(default 1)
    Result:   None
   *)
  AddSteering[steers_List, damping_Real:1] := Scan[With[{elm=#[[1]],
    val=#[[2]], current=Ring@GetElementValue[#[[1]], "K0"]},
    Ring@SetElementValue[elm, {"K0"->(current + damping * val)}]]&, steers];

  (* LER momentum correction of model optics by Chicane
    Argument:
      dpTerget: tareget DP0
      Options:  Tolerance, MaximumIteration, Restore[restore chicane flag]
    Result:
      {List of {Chicane Magnet, dK0}, opt}
      opt: Convergence
   *)
  CorrectMomentumLER[dpTarget_Real:0, op:((_Rule|_RuleDelayed)...)] := Module[{
    opt=Override[op, {Restore->False, Tolerance->1e-8, MaximumIteration->10}],
    eps, iteration,
    alpha = MomentumCompaction/.Emittance[ExpandElementValues->False],
    Circ  = LINE["S", "$$$"],
    pos, dCirc, gain, dK0, dK, dpCurr0,
    dpCurr = (OrbitAtExit/.Emittance[ExpandElementValues->False])[[6]],
    elChicane
    },

    {eps, iteration} = {Tolerance, MaximumIteration}/.opt;

    (* Backup chicane K0 *)
    elChicane = Map[{#, Ring@GetElementValue[#, "K0"]}&,
      KEKBOrbitUtil$LERChicane[[,1]]];

    (* Calculate initial gain coefficient *)
    pos = Map[Flatten[{LINE["POSITION",
      If[StringPosition[#, "."]<=>{}, #, #//"*"]]}]&,
      KEKBOrbitUtil$LERChicane[[,1]]];
    dCirc = Plus@@MapThread[Plus@@(#2 * Twiss["EX", # + 0.5])&,
      {pos, KEKBOrbitUtil$LERChicane[[,2]]}];

    gain = dCirc / Circ / alpha;

    dK0 = 0;
    While[iteration > 0 && Abs[dpCurr - dpTarget] > eps,
      dK = -(dpCurr - dpTarget) / gain;
      Scan[With[{bn=#[[1]], sign=#[[2]],
	val=Ring@GetElementValue[#[[1]], "K0"]},
	Ring@SetElementValue[bn, "K0"->val + sign * dK]]&,
	KEKBOrbitUtil$LERChicane]; dK0 += dK;

      dpCurr0 = dpCurr;
      dpCurr=(OrbitAtExit/.Emittance[ExpandElementValues->False])[[6]];

      (* Update gain coefficient *)
      gain = (dpCurr - dpCurr0) / dK;
      iteration -= 1];

    (* Restore chicane K0 *)
    If[Restore/.opt,
      Scan[Ring@SetElementValue[#[[1]], "K0"->#[[2]]]&, elChicane]];

    Return[{Map[{#[[1]], dK0 * #[[2]]}&, KEKBOrbitUtil$LERChicane],
      Convergence->(Abs[dpCurr - dpTarget] < eps)}];
    ];

  (* Tiny close bump calculator
    Argument:
      steers:  List of steering name
      mon:     List of monitor name
      w:       List of bump height at monitor
               Non-Real value(ex. Null) means no binding point
      axis:    Symbol of bump axis: "X" or "Y"(default "X")
      Options: Division
                 Steering division for matrix generation(default 1)
               HackSteeringSign
                 Hack dTheta to keep dK-dTheta relation(True)
    Result:
      {steering kick angle, bump shape, residual[Cos/monsb, Sin/monsb]}
    *)
  ClosedBump[steers_List, mon_List, w_List, axis_String:"X",
    op:((_Rule|_RuleDelayed)...)] := Module[{
    opt = Override[{op}, KEKBOrbitUtil$def],
    m, b, mu,
    monsb, monph, stsb, stph, stsig,
    monpos = LINE["POSITION", mon],
    stpos = Map[PowerSupply2Element[#]&, steers],
    {bsym, nsym} = If[axis === "X", {"BX", "NX"}, {"BY", "NY"}],
    wInt
    },

    (* Define steering sign correction vector *)
    stsig = If[HackSteeringSign/.opt,
      SteeringSign[steers], Table[1, {Length[steers]}]];

    (* Define integration weight function[Gauss-Legendre] *)
    wInt = GaussLegendreTable[Division/.opt];

    (* Calculate total phase advance *)
    mu = Twiss[nsym, "$$$"];

    (* Steering kick *)
    stsb = Map[With[{p = #},
      Flatten[Map[Sqrt[Twiss[bsym, p+#[[1]]]]*#[[2]]&, wInt]]]&, stpos];
    stph = Map[With[{p = #},
      Flatten[Map[Twiss[nsym, p+#[[1]]]&, wInt]]]&, stpos];

    monsb = Map[Sqrt[Twiss[bsym, #+0.5]]&, monpos];
    monph = Map[Twiss[nsym, #+0.5]&, monpos];

    (* Normalize phase *)
    With[{ph0 = First[Flatten[stph]]},
      monph = If[#<0, # + mu, #]&/@(monph - ph0);
      stph  = If[#<0, # + mu, #]&/@#&/@(stph - ph0)];

    (* Sanity Check *)
    If[Sort[Flatten[stph]] <=> Flatten[stph],
      Print["Steerings[", steers, "] order looks like wrong!"]];
    Scan[If[Not[stph[[1,1]] =< #[[2]] =< stph[[-1,-1]]],
      Print["Monitor[", #[[1]], "] is out of ClosedBump!!"]]&,
      Thread[{mon, monph}]];

    (* Generate single kick matrix[without revolution] *)
    m = Plus@@[MapThread[With[{sb = #1, ph = #2},
      sb * stsb * Sin[Max[0, #]&/@[ph - stph, {-1}]]]&,
      {monsb, monph}], {2}];

    (* Generate bump condition matrix *)
    (* Condition: Closed bump *)
    b = Thread[{{0, 0}, Plus@@[{stsb * Sin[stph], stsb * Cos[stph]}, {2}]}];

    (* Condition: Bump pattern *)
    b = Join[b, Select[Thread[{w, m}], RealQ[#[[1]]]&]];

    With[{s = LinearSolve[b[[, 2]], b[[, 1]]]},
      {stsig * s, m.s, Take[b[[,2]], 2].s}]];

  (* Tiny COD response matrix generator
    Argument:
      steers:  List of steering name
      monitor: List of monitor element name
      axis:    Symbol of calculate axis: "X" or "Y" or "XY"(default "XY")
      Options: Division
                 Steering division for matrix generation(default 1)
               HackSteeringSign
                 Hack dTheta to keep dK-dTheta relation(True)
               ByModel
                 Calculate matrix by SAD model lattice(default False)
               Epsilon
                 Typical kick angle for matrix calculation(default 10e-6 rad)
    Result:
      H/V-response matrix
      Join[{H-response matrix, V-response matrix}]
    *)
  CODResponseMatrix[steers_List, monitor_List, axis_String:"XY",
    op:((_Rule|_RuleDelayed)...)] := Module[{
    opt = Override[op, KEKBOrbitUtil$def, {
      ByModel->False, Epsilon->10e-6, CalcCommand->"CELL; CALC NOEXPAND"}],
    elIP, elSteerings, calcCmd, eps, dk, cod0,
    m, mu,
    monsb, monph, stsb, stph, stsig,
    flg = If[axis === "X", HSteeringQ, VSteeringQ]/@steers,
    monpos = LINE["POSITION", monitor],
    stpos = Map[PowerSupply2Element[#]&, steers],
    {bsym, nsym, dsym, esym} = If[axis === "X",
      {"BX", "NX", "DX", "EX"}, {"BY", "NY", "DY", "EY"}],
    wInt},

    (* Define steering sign correction vector *)
    stsig = If[HackSteeringSign/.opt,
      SteeringSign[steers], Table[1, {Length[steers]}]];

    If[ByModel/.opt, (* By Lattice Model *)
      {calcCmd, eps} = {CalcCommand, Epsilon}/.opt;
      dsym = Switch[axis, "X", {"DX"},  "Y", {"DY"},
	"XY", {"DX", "DY"},  _, {"DX", "DY"}];

      (* Backup optics *)
      elSteerings = Map[{#, Ring@GetElementValue[#, "K0"]}&, steerings];
      elIP = SetElement[LINE["ELEMENT", 1]];
      elIP[[-1]] = Select[elIP[[-1]], #[[1]] <=> "SIGZ"&];
      FFS[calcCmd];

      (* Generate response matrix from optics model *)
      m = MapThread[With[{str = #, hStrFlag = #2, sign = #3},
	(* Reference beta = 25m *)
	dk = sign * eps * 5 / Average[
	  Sqrt[1 + Twiss[If[hStrFlag, "BX", "BY"], PowerSupply2Element[str]]]];

	AddSteering[{str->1},     -dk]; FFS[calcCmd];
	cod0 = Join@@Twiss[dsym, monpos + 0.5];
	AddSteering[{str->1}, dk + dk]; FFS[calcCmd];
	cod0 = Join@@Twiss[dsym, monpos + 0.5] - cod0;
	AddSteering[{str->1},     -dk];
	cod0 * (0.5 / dk)]&, {steers, flg, stsig}];

      (* Recover optics *)
      Scan[Ring@SetElementValue[#[[1]], "K0"->#[[2]]]&, elSteerings];
      SetElement@@elIP; FFS[calcCmd];

      Return[Transpose[m]]];

    (* Define integration weight function[Gauss-Legendre] *)
    wInt = GaussLegendreTable[Division/.opt];

    (* Calculate total phase advance *)
    mu = Twiss[nsym, "$$$"];

    (* Steering kick *)
    stsb = stsig * flg * Map[With[{p = #},
      Flatten[Map[Sqrt[Twiss[bsym, p+#[[1]]]]*#[[2]]&, wInt]]]&, stpos];
    stph = Map[With[{p = #},
      Flatten[Map[Twiss[nsym, p+#[[1]]]&, wInt]]]&, stpos];

    monsb = Map[Sqrt[Twiss[bsym, #+0.5]]&, monpos];
    monph = Map[Twiss[nsym, #+0.5]&, monpos];

    (* Generate single kick matrix[with revolution] *)
    m = Plus@@[MapThread[With[{sb = #1, ph = #2},
      sb * stsb * Cos[Abs[ph - stph] - mu/2]]&,
      {monsb, monph}], {2}] / (2*Sin[mu/2]);

    If[axis === "XY", (* Calculate additional horizontal response *)
      {bsym, nsym, dsym, esym} = {"BX", "NX", "DX", "EX"}; flg = Not/@flg;

      (* Calculate total phase advance *)
      mu = Twiss[nsym, "$$$"];

      (* Steering kick *)
      stsb = stsig * flg * Map[With[{p = #},
	Flatten[Map[Sqrt[Twiss[bsym, p+#[[1]]]]*#[[2]]&, wInt]]]&, stpos];
      stph = Map[With[{p = #},
	Flatten[Map[Twiss[nsym, p+#[[1]]]&, wInt]]]&, stpos];

      monsb = Map[Sqrt[Twiss[bsym, #+0.5]]&, monpos];
      monph = Map[Twiss[nsym, #+0.5]&, monpos];

      (* Generate single kick matrix[with revolution] *)
      m = Join[Plus@@[MapThread[With[{sb = #1, ph = #2},
	sb * stsb * Cos[Abs[ph - stph] - mu/2]]&,
	{monsb, monph}], {2}] / (2*Sin[mu/2]), m];
      ];

    m];

  (* Tiny COD corrector solver for model optics
    Argument:
      steers:  List of steering name
      orbit:   List of target orbit({monitor, offset})
               or List of target orbit({monitor, offset, weight})
      axis:    Symbol of correction axis: "X" or "Y"(default "X")
      Options: Division
                 Steering division for matrix generation(default 1)
               HackSteeringSign
                 Hack dTheta to keep dK-dTheta relation(True)
               KeepCircumference
                 Keep dCirc=0 by steering(dafault False)
               KeepTotalKick
                 Keep total steering kick to zero(dafault False)
               Tolerance
                 SVD solver tolerance(dafault 3e-8)
    Result:
      {steering kick angle, bump shape}
    *)
  ModelCODCorrectorSolve[steers_List, orbit_List, axis_String:"X",
    op:((_Rule|_RuleDelayed)...)] := Module[{
    opt = Override[op, KEKBOrbitUtil$def, {
      KeepCircumference->False, KeepTotalKick->False,
      Tolerance->3e-8, SVDMatrix->False, PlotSingularValues->False}],
    cfKeepCirc, cfKeepKicks, fSVDMatrix,
    mu, m, b, s, wCond, u, w, v, ub,
    monsb, monph, stsb, stph, stsig,
    monpos = LINE["POSITION", orbit[[,1]]],
    stpos = Map[PowerSupply2Element[#]&, steers],
    {bsym, nsym, dsym, esym} = If[axis === "X",
      {"BX", "NX", "DX", "EX"}, {"BY", "NY", "DY", "EY"}],
    wInt},

    {cfKeepCirc, cfKeepKicks} = {KeepCircumference, KeepTotalKick}/.opt;
    fSVDMatrix = SVDMatrix/.opt;

    (* Define steering sign correction vector *)
    stsig = If[HackSteeringSign/.opt,
      SteeringSign[steers], Table[1, {Length[steers]}]];

    (* Define integration weight function[Gauss-Legendre] *)
    wInt = GaussLegendreTable[Division/.opt];

    (* Calculate total phase advance *)
    mu = Twiss[nsym, "$$$"];

    (* Steering kick *)
    stsb = stsig * Map[With[{p = #},
      Flatten[Map[Sqrt[Twiss[bsym, p+#[[1]]]]*#[[2]]&, wInt]]]&, stpos];
    stph = Map[With[{p = #},
      Flatten[Map[Twiss[nsym, p+#[[1]]]&, wInt]]]&, stpos];

    monsb = Map[Sqrt[Twiss[bsym, #+0.5]]&, monpos];
    monph = Map[Twiss[nsym, #+0.5]&, monpos];

    (* Generate single kick matrix[with revolution] *)
    m = Plus@@[MapThread[With[{sb = #1, ph = #2},
      sb * stsb * Cos[Abs[ph - stph] - mu/2]]&,
      {monsb, monph}], {2}] / (2*Sin[mu/2]);

    (* Generate condition matrix *)
    (* Condition: Orbit correction *)
    b = Thread[{orbit[[,2]] - Twiss[dsym, monpos+0.5], m}];

    (* Generate orbit weight *)
    wCond = Map[If[Length[#] > 2, #[[3]], 1]&, orbit];

    (* Conndtion: Keep total kick *)
    If[cfKeepKicks,
      AppendTo[wCond, 1];
      AppendTo[b, {0, stsig * Map[Length[#]&, stpos]}]];

    (* Condition: Keep circumference *)
    If[cfKeepCirc,
      AppendTo[wCond, Length[monpos]];
      AppendTo[b, {0, stsig * Map[Plus@@Twiss[esym, #+0.5]&, stpos]}]];

    s = If[fSVDMatrix,
      {u, w, v} = Thread[Sort[Thread[SingularValues[wCond * b[[,2]],
	Tolerance->1e-21, Inverse->False]], (#1[[2]] > #2[[2]])&]];
      ub = u . (wCond * b[[,1]]);

      If[PlotSingularValues/.opt,
	ListPlot[w / w[[1]], PlotJoined->True, Scale->{Linear, Log}]];

      With[{wTol = w[[1]] * (Tolerance/.opt)},
	Transpose[v]
	. DiagonalMatrix[Map[If[Abs[#] > wTol, 1 / #, 0]&, w]] . ub],
      LinearSolve[wCond * b[[,2]], wCond * b[[,1]],
	Tolerance->(Tolerance/.opt)]];

    {s, m.s, If[fSVDMatrix, SolutionMatrix->{Transpose[v], w, ub}, Null[]]}];

  (* Tiny COD corrector for model optics by heuristic algorism
    Argument:
      orbit:   List of target orbit({monitor, H-offset, V-offset})
      Options:
	Steerings: List of steering name(default CCCSteerings[])
	Restore:   Restore chicane flag(default False)
	Tolerance: Trelance for COD[Horizontal & Vertial](default 1e-6)
	MaximumIteration:    Maximum number of iterations(default 10)
	HorizontalTolerance: Trelance for Horizontal COD
	VerticalTolerance:   Trelance for Vertial COD
    Result:
      {List of {Steering name, dK0}, opt}
      opt: Convergence
    *)
  CorrectModelCOD[orbit_List, op:((_Rule|_RuleDelayed)...)] := Module[{
    opt = Override[op, {Restore->False, MaximumIteration->10, Tolerance->1e-6,
      Literal[Steerings]:>CCCSteerings[],
      CalcCommand->"CELL; CALC NOEXPAND", Output->0,
      HorizontalTolerance->Tolerance, VerticalTolerance->Tolerance}],
    iteration, steerings, eps, epsH, epsV, calcCmd, stdout,
    tv, w, ub,
    thUpH, thUpV, thLowH, thLowV,
    tolH, tolV, tolHn, tolVn, tolHnL, tolVnL,
    CODsteerings, bpmn, bpm, dx0, dy0, dx1, dy1, dx2, dy2,
    Hsteer, Hkick, Vsteer, Vkick,
    hSteerings, vSteerings, elIP, elSteerings},

    If[Length[orbit] < 1, Return[{{}, Convergence->False}]];

    {iteration, steerings} = {MaximumIteration, Literal[Steerings]}/.opt;
    {eps, calcCmd, stdout} = {Tolerance, CalcCommand, Output}/.opt;
    {epsH, epsV} = {HorizontalTolerance, VerticalTolerance}/.opt/.opt;

    {thUpH,  thUpV}  = 1e-2 * {30, 3};
    {thLowH, thLowV} = 1e-8 * {10, 1};

    (* Set first SVD tolerance enough low to get available correction *)
    {tolH,  tolV}  = {1e-9, 1e-9};

    (* Backup steering K0 & IP marker *)
    elSteerings = Map[{#, Ring@GetElementValue[#, "K0"]}&, steerings];
    elIP = SetElement[LINE["ELEMENT", 1]];
    elIP[[-1]] = Select[elIP[[-1]], #[[1]] <=> "SIGZ"&];

    CODsteerings = {};
    {bpmn, dx0, dy0} = Thread[orbit];
    bpm = LINE["POSITION", bpmn] + 0.5;
    hSteerings = SelectSteeringH[steerings];
    vSteerings = SelectSteeringV[steerings];

    dx1 = Twiss["DX", bpm]; dy1 = Twiss["DY", bpm];
    {dx2, dy2} = {dx1, dy1};
    While[iteration > 0
      && (Max[Abs[dx2 - dx0]] > epsH || Max[Abs[dy2 - dy0]] > epsV),

      Hsteer = {};
      If[Max[Abs[dx2 - dx0]] > epsH && Length[hSteerings] > 0,
	Hsteer = {#, 0}&/@hSteerings;
	Hkick = ModelCODCorrectorSolve[hSteerings,
	  Thread[{bpm, dx0, Map[(If[#[5,6]==="QL" || #[5,7]==="QCS", 10, 1] * Sqrt[Twiss["BX", #//"+0.5"]])&, bpmn] * Map[If[# > epsH, 10, 1]&, Abs[dx2 - dx0]]}],
	  "X", Tolerance->tolH, SVDMatrix->True, KeepCircumference->True];
	{tv, w, ub} = SolutionMatrix/.Drop[Hkick, 2];
	tolHn = Length[Select[w, (# > tolH * w[[1]])&]];
	While[Max[Abs[Hkick[[1]]]] > thUpH && tolHn > 1,
	  tolHn -= 1;
	  Hkick[[1]] = tv . MapThread[If[#, #3 / #2, 0]&,
	    {Table[i < tolHn + 1, {i, Length[w]}], w, ub}];
	  ];

	tolHnL = tolHn - 20;
	While[True,
	  (* Break if correction is neglectable *)
	  If[tolHn < 1 || tolHn < tolHnL || Max[Abs[Hkick[[1]]]] < thLowH,
	    If[Max[Abs[Hsteer[[,2]]]] > 0, SetElement@@elIP; FFS[calcCmd]];
	    Hsteer = {}; Break[]];

	  Hsteer = Thread[{Hsteer[[,1]], -Hkick[[1]]}];
	  AddSteering[Hsteer, 1]; SetElement@@elIP; FFS[calcCmd];

	  (* Break if RMS of cod is reduced *)
	  If[RMS[Twiss["DX", bpm] - dx0] < RMS[dx2 - dx0], Break[]];

	  (* Generate new corrector steering *)
	  AddSteering[Hsteer, -1];
	  Hkick[[1]] = tv . MapThread[If[#, #3 / #2, 0]&,
	    {Table[i < tolHn, {i, Length[w]}], w, ub}];
	  tolHn -= 1];
	];

      dy2 = Twiss["DY", bpm];
      Vsteer = {};
      If[Max[Abs[dy2 - dy0]] > epsV && Length[vSteerings] > 0,
	Vsteer = {#, 0}&/@vSteerings;
	Vkick = ModelCODCorrectorSolve[vSteerings,
	  Thread[{bpm, dy0}],
	  "Y", Tolerance->tolV, SVDMatrix->True];
	{tv, w, ub} = SolutionMatrix/.Drop[Vkick, 2];
	tolVn = Length[Select[w, (# > tolV * w[[1]])&]];
	While[Max[Abs[Vkick[[1]]]] > thUpV && tolVn > 1,
	  tolVn -= 1;
	  Vkick[[1]] = tv . MapThread[If[#, #3 / #2, 0]&,
	    {Table[i < tolVn + 1, {i, Length[w]}], w, ub}];
	  ];

	tolVnL = tolVn - 20;
	While[True,
	  (* Break if correction is neglectable *)
	  If[tolVn < 1 || tolVn < tolVnL || Max[Abs[Vkick[[1]]]] < thLowV,
	    If[Max[Abs[Vsteer[[,2]]]] > 0, SetElement@@elIP; FFS[calcCmd]];
	    Vsteer = {}; Break[]];

	  Vsteer = Thread[{Vsteer[[,1]], -Vkick[[1]]}];
	  AddSteering[Vsteer, 1]; SetElement@@elIP; FFS[calcCmd];

	  (* Break if RMS of cod is reduced *)
	  If[RMS[Twiss["DY", bpm] - dy0] < RMS[dy2 - dy0], Break[]];

	  (* Generate new corrector steering *)
	  AddSteering[Vsteer, -1];
	  Vkick[[1]] = tv . MapThread[If[#, #3 / #2, 0]&,
	    {Table[i < tolVn, {i, Length[w]}], w, ub}];
	  tolVn -= 1];
	];

      (* Break if can't find new corrector *)
      If[Length[Hsteer] < 1 && Length[Vsteer] < 1, Break[]];

      CODsteerings = MergeBF[CODsteerings, Hsteer];
      CODsteerings = MergeBF[CODsteerings, Vsteer];

      dx2 = Twiss["DX", bpm]; dy2 = Twiss["DY", bpm];
      iteration -= 1];

    (* Restore steering K0 *)
    If[Restore/.opt,
      SetElement@@elIP;
      Scan[Ring@SetElementValue[#[[1]], "K0"->#[[2]]]&, elSteerings]];

    If[stdout > 0 && Length[CODsteerings] > 0, StandardForm[$FORM="10.4";
      With[{hkick = Select[hSteerings/.Rule@@[CODsteerings, 1], RealQ],
	vkick = Select[vSteerings/.Rule@@[CODsteerings, 1], RealQ]},
	If[Length[hkick] > 0, Write[stdout, "Hkick: ", MinMax[hkick]]];
	If[Length[vkick] > 0, Write[stdout, "Vkick: ", MinMax[vkick]]];
	Write[stdout, "DX: ",
	  Max[Abs[dx1-dx0]], "->", Max[Abs[Twiss["DX", bpm]-dx0]], "(Linf) ",
	  RMS[dx1-dx0], "->", RMS[Twiss["DX", bpm]-dx0], "(L2)"];
	Write[stdout, "DY: ",
	  Max[Abs[dy1-dy0]], "->", Max[Abs[Twiss["DY", bpm]-dy0]], "(Linf) ",
	  RMS[dy1-dy0], "->", RMS[Twiss["DY", bpm]-dy0], "(L2)"];
      ]]];

    Return[{CODsteerings,
      Convergence->(Max[Abs[Twiss["DX", bpm] - dx0]] < epsH
	&& Max[Abs[Twiss["DY", bpm] - dy0]] < epsV)}];
    ];

  (* AF fudge merger
    Argument:
      f1, f2: AF fudge list
    Result:
      AF fudge list
    *)
  MergeAF[f1$_List, f2$_List, head_Symbol:List] := Module[{elm, f1, f2},
    elm = Union[f1$[[,1]], f2$[[,1]]]; If[Length[elm] < 1, Return[{}]];
    f1 = elm/.Override[Rule@@[f1$, 1], (#->1)&/@elm];
    f2 = elm/.Override[Rule@@[f2$, 1], (#->1)&/@elm];
    Return[MapThread[head[#1, #2]&, {elm, f1 * f2}]];
    ];

  (* dAF fudge merger
    Argument:
      f1, f2: dAF fudge list
    Result:
      dAF fudge list
    *)
  MergeDAF[f1$_List, f2$_List, head_Symbol:List] := Module[{elm, f1, f2},
    elm = Union[f1$[[,1]], f2$[[,1]]]; If[Length[elm] < 1, Return[{}]];
    f1 = elm/.Override[Rule@@[f1$, 1], (#->0)&/@elm];
    f2 = elm/.Override[Rule@@[f2$, 1], (#->0)&/@elm];
    Return[MapThread[head[#1, #2]&, {elm, f1 + f2 + f1 * f2}]];
    ];

  (* BF fudge merger
    Argument:
      f1, f2: BF fudge list
    Result:
      BF fudge list
    *)
  MergeBF[f1$_List, f2$_List, head_Symbol:List] := Module[{elm, f1, f2},
    elm = Union[f1$[[,1]], f2$[[,1]]]; If[Length[elm] < 1, Return[{}]];
    f1 = elm/.Override[Rule@@[f1$, 1], (#->0)&/@elm];
    f2 = elm/.Override[Rule@@[f2$, 1], (#->0)&/@elm];
    Return[MapThread[head[#1, #2]&, {elm, f1 + f2}]];
    ];

  (* AF fudge inverter
    Argument:
      f: AF fudge list
    Result:
      AF fudge list
    *)
  InverseAF[f$_List] := If[Length[f$] < 1, {},
    Map[#[[0]][#[[1]], 1/#[[2]]]&, f$]];

  (* dAF fudge inverter
    Argument:
      f: dAF fudge list
    Result:
      dAF fudge list
    *)
  InverseDAF[f$_List] := If[Length[f$] < 1, {},
    Map[#[[0]][#[[1]], -#[[2]]/(1 + #[[2]])]&, f$]];

  (* BF fudge inverter
    Argument:
      f: BF fudge list
    Result:
      BF fudge list
    *)
  InverseBF[f$_List] := If[Length[f$] < 1, {},;
    Map[#[[0]][#[[1]], -#[[2]]]&, f$]];

  (* Statistics functions *)
  Average[l_List] := If[Length[l] < 1, 0, Plus@@l / Length[l]];
  Sigma$[l_List] := With[{avg=Average[l]},
    If[Length[l] < 1, 0, Sqrt[Plus@@((l - avg)^2) / Length[l]]]];
  Sigma[l_List] := With[{avg=Average[l]},
    If[Length[l] < 2, 0, Sqrt[Plus@@((l - avg)^2) / (Length[l] - 1)]]];
  RMS[l_List] := If[Length[l] < 1, 0, Sqrt[Plus@@(l^2) / Length[l]]];
  ];
! >>> KEKBOrbitUtil class <<<
! === End KEKBOrbitutil.n Definition ===
