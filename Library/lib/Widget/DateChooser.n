!
! Date Chooser Widget
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: DateChooser.n,v 1.13 2005/11/15 02:29:37 amorita Exp $
! Style:      Widget Class Library
! Require:    Prog/QFunctions.n
!

! CAUTION: This widget assumes implicit type conversion 
!          between String and Real.
!          Variables (YY,mm,dd,HH,MM,SS) are referred as Real by RadioButton,
!          and are referred as String by OptionButton Widget. 

Library@Require["Prog/QFunctions"];

! <<< DateChooser widget class >>>
DateChooser=Class[{}, (* Date Chooser Widget *)
  { def = {Text->"", Range->{1998, First[Date[]] + 1}}
    },
  { callback, variable, range,
    f0, f1, f2, text,
    tYY, tmm, tdd, tHH, tMM, tSS,
    bYY, bmm, bdd, bHH, bMM, bSS,
    mYY, mmm, mdd, mHH, mMM, mSS,
    YY, mm, dd, HH, MM, SS
    },

  Destructor[] := (
    If[variable <=> {}, With[{vsym = Extract[variable, {1, 2}, Unevaluated$]},
      Clear[vsym];
      vsym = This@GetDate[]]];
    DeleteWidget[f0]);

  Constructor[f_] := Module[{t, ini, v, fopt, opt, rem},
    {t, ini, range, callback, variable, fopt, opt, rem} = SwitchCases[
      Override[Options, def,
	Background->f[Background], HighlightBackground->f[Background]],
      {Rule[Text, _], Rule[InitialValue, _], Rule[Range, _],
	RuleDelayed[Command, _], RuleDelayed[Variable, _],
	Rule[Background, _], Rule[HighlightBackground, _], _}];

    t = If[t <=> {} && StringQ[t[[1, 2]]], t[[1, 2]], ""];
    ini = If[ini <=> {}, ini[[1, 2]], -1];
    If[Not[RealQ[ini]], ini = If[RealListQ[ini] && Length[ini] == 6,
      FromDate[ini], -1]];
    If[range <=> {}, range = range[[1, 2]]];
    range = If[RealListQ[range] && Length[range] > 1,
      MinMax[Round[range]], Range/.def];

    {YY, mm, dd, HH, MM, SS} = StandardForm[
      ToString/@Append[Take[Date[], 5], 0]];

    If[variable <=> {}, With[{vsym = Extract[variable, {1, 2}, Unevaluated$]},
      If[v = vsym; Not[RealQ[v]], v = FromDate[]];
      Clear[vsym];
      (vsym = val_) ^:= This@SetDate[val];
      vsym := This@GetDate[];
      vsym = v]];

    f0 = Frame[f, Null@@fopt, Null@@rem];
    f1 = Frame[f0, Anchor->"e", Null@@fopt];
    f2 = Frame[f0, Anchor->"e", Null@@fopt];
    text = TextLabel[f1, Text->t, Side->"left", Expand->True,
      Fill->"x", TextAnchor->"w", Null@@fopt];

    tYY = TextLabel[f1, Text->"Y", Side->"left", Width->1, Null@@fopt];
    bYY = OptionMenu[f1, TextVariable:>YY, Side->"left", Width->4, Null@@opt];
    mYY = Menu[bYY, Add->Table[With[{s = ToString[i]}, RadioButton[Text->s,
      Value->s, Variable:>YY, Command:>Update[]]],
      {i, range[[1]], range[[2]]}]];

    tmm = TextLabel[f1, Text->"M", Side->"left", Width->1, Null@@fopt];
    bmm = OptionMenu[f1, TextVariable:>mm, Side->"left", Width->2, Null@@opt];
    mmm = Menu[bmm, Add->Table[With[{s = ToString[i]}, RadioButton[Text->s,
      Value->s, Variable:>mm, Command:>Update[]]], {i, 12}]];

    tdd = TextLabel[f1, Text->"D", Side->"left", Width->1, Null@@fopt];
    bdd = OptionMenu[f1, TextVariable:>dd, Side->"left", Width->2, Null@@opt];
    mdd = Menu[bdd, Add->Table[With[{s = ToString[i]}, RadioButton[Text->s,
      Value->s, Variable:>dd, Command:>Update[],
      ColumnBreak->(Mod[i - 1, 10] == 0)]], {i, 31}]];

    tHH = TextLabel[f2, Text->"h", Side->"left", Width->1, Null@@fopt];
    bHH = OptionMenu[f2, TextVariable:>HH, Side->"left", Width->2, Null@@opt];
    mHH = Menu[bHH, Add->Table[With[{s = ToString[i]}, RadioButton[Text->s,
      Value->s, Variable:>HH, Command:>Update[],
      ColumnBreak->(Mod[i, 8] == 0)]],{i, 0, 23}]];

    tMM = TextLabel[f2, Text->"m", Side->"left", Width->1, Null@@fopt];
    bMM = OptionMenu[f2, TextVariable:>MM, Side->"left", Width->2, Null@@opt];
    mMM = Menu[bMM, Add->Table[With[{s = ToString[i]}, RadioButton[Text->s,
      Value->s, Variable:>MM, Command:>Update[],
      ColumnBreak->(Mod[i, 10] == 0)]], {i, 0, 59}]];

    tSS = TextLabel[f2, Text->"s", Side->"left", Width->1, Null@@fopt];
    bSS = OptionMenu[f2, TextVariable:>SS, Side->"left", Width->2, Null@@opt];
    mSS = Menu[bSS, Add->Table[With[{s = ToString[i]}, RadioButton[Text->s,
      Value->s, Variable:>SS, Command:>Update[],
      ColumnBreak->(Mod[i, 10] == 0)]], {i, 0, 59}]];

    If[ini > 0, SetDate[ini]]];

  GetDate[] := FromDate[ToExpression/@{YY, mm, dd, HH, MM, SS}];

  SetDate[time_Real] := With[{date = ToDate[time, Tick->1]},
    If[date[[1]] < range[[1]] || range[[2]] < date[[1]], $Failed,
      {YY, mm, dd, HH, MM, SS} = StandardForm[ToString/@date]; GetDate[]]];

  Update[] := With[{date = GetDate[]},
    If[callback <=> {}, Command[date]/.callback]; SetDate[date]];

  ];
! >>> DateChooser widget class <<<

! End of File
