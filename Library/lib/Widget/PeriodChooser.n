!
! Period Chooser Widget
!
! Maintainor: A.Morita(4794)
! Revision:   $Id: PeriodChooser.n,v 1.14 2005/11/15 02:40:30 amorita Exp $
! Style:      Widget Class Library
! Require:    Prog/QFunctions.n
!

! CAUTION: This widget assumes implicit type conversion 
!          between String and Real.
!          Variables (dd,HH,MM,SS) are referred as Real by RadioButton,
!          and are referred as String by OptionButton Widget. 

Library@Require["Prog/QFunctions"];

! <<< PeriodChooser widget class >>>
PeriodChooser=Class[{}, (* Period Chooser Widget *)
  { def = {Text->"", Range->{0, 7}}
    },
  { callback, variable, range,
    f0, f1, f2, text,
    tdd, tHH, tMM, tSS,
    bdd, bHH, bMM, bSS,
    mdd, mHH, mMM, mSS,
    dd, HH, MM, SS
    },

  Destructor[] := (
    If[variable <=> {}, With[{vsym = Extract[variable, {1, 2}, Unevaluated$]},
      Clear[vsym];
      vsym = This@GetDate[]]];
    DeleteWidget[f0]);

  Constructor[f_] := Module[{t, ini, v, fopt, opt, rem},
    {t, ini, range, callback, variable, fopt, opt, rem} = SwitchCases[
      Override[Options, def,
	Background->f[Background], HighlightBackground->f[Background]],
      {Rule[Text, _], Rule[InitialValue, _], Rule[Range, _],
	RuleDelayed[Command, _], RuleDelayed[Variable, _],
	Rule[Background, _], Rule[HighlightBackground, _], _}];

    t = If[t <=> {} && StringQ[t[[1, 2]]], t[[1, 2]], ""];
    If[range <=> {}, range = range[[1, 2]]];
    range = If[RealListQ[range] && Length[range] > 1,
      MinMax[Round[range]], Range/.def];
    ini = If[ini <=> {}, ini[[1, 2]], -1];
    If[Not[RealQ[ini]], ini = If[RealListQ[ini] && Length[ini] == 4,
      Reverse[{
	ini = Floor[ini     ]; Mod[ini, 60],
	ini = Floor[ini / 60]; Mod[ini, 60],
	ini = Floor[ini / 60]; Mod[ini, 24],
	ini = Floor[ini / 24]; Restrict[ini, range[[1]], range[[2]]]}], -1]];

    {dd, HH, MM, SS} = StandardForm[ToString/@{0, 1, 0, 0}];

    If[variable <=> {}, With[{vsym = Extract[variable, {1, 2}, Unevaluated$]},
      If[v = vsym; Not[RealQ[v]], v = 60 * 60];
      Clear[vsym];
      (vsym = val_) ^:= This@SetDate[val];
      vsym := This@GetDate[];
      vsym = v]];

    f0 = Frame[f, Null@@fopt, Null@@rem];
    f1 = Frame[f0, Anchor->"e", Null@@fopt];
!    f2 = Frame[f0, Anchor->"e", Null@@fopt];
    f2 = f1;
    text = TextLabel[f1, Text->t, Side->"left", Expand->True,
      Fill->"x", TextAnchor->"w", Null@@fopt];

    tdd = TextLabel[f1, Text->"D", Side->"left", Width->1, Null@@fopt];
    bdd = OptionMenu[f1, TextVariable:>dd, Side->"left", Width->2, Null@@opt];
    mdd = Menu[bdd, Add->Table[With[{s = ToString[i]}, RadioButton[Text->s,
      Value->s, Variable:>dd, Command:>Update[],
      ColumnBreak->(Mod[i, 10] == 0)]], {i, range[[1]], range[[2]]}]];

    tHH = TextLabel[f2, Text->"h", Side->"left", Width->1, Null@@fopt];
    bHH = OptionMenu[f2, TextVariable:>HH, Side->"left", Width->2, Null@@opt];
    mHH = Menu[bHH, Add->Table[With[{s = ToString[i]}, RadioButton[Text->s,
      Value->s, Variable:>HH, Command:>Update[],
      ColumnBreak->(Mod[i, 8] == 0)]],{i, 0, 23}]];

    tMM = TextLabel[f2, Text->"m", Side->"left", Width->1, Null@@fopt];
    bMM = OptionMenu[f2, TextVariable:>MM, Side->"left", Width->2, Null@@opt];
    mMM = Menu[bMM, Add->Table[With[{s = ToString[i]}, RadioButton[Text->s,
      Value->s, Variable:>MM, Command:>Update[],
      ColumnBreak->(Mod[i, 10] == 0)]], {i, 0, 59}]];

    tSS = TextLabel[f2, Text->"s", Side->"left", Width->1, Null@@fopt];
    bSS = OptionMenu[f2, TextVariable:>SS, Side->"left", Width->2, Null@@opt];
    mSS = Menu[bSS, Add->Table[With[{s = ToString[i]}, RadioButton[Text->s,
      Value->s, Variable:>SS, Command:>Update[],
      ColumnBreak->(Mod[i, 10] == 0)]], {i, 0, 59}]];

    If[ini > 0, SetDate[ini]]];

  GetDate[] := (#4 + 60 * (#3 + 60 * (#2 + 24 * #1)))&@@(
    ToExpression/@{dd, HH, MM, SS});

  SetDate[time_Real] := Module[{t = time},
    {dd, HH, MM, SS} = StandardForm[ToString/@Reverse[{
      t = Floor[t     ]; Mod[t, 60],
      t = Floor[t / 60]; Mod[t, 60],
      t = Floor[t / 60]; Mod[t, 24],
      t = Floor[t / 24]; Restrict[t, range[[1]], range[[2]]]}]]; GetDate[]];

  Update[] := With[{date = GetDate[]},
    If[callback <=> {}, Command[date]/.callback]; SetDate[date]];

  ];
! >>> PeriodChooser widget class <<<

! End of File
