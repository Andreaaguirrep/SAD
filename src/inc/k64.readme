k64-1-6 object allocation.

- Any obeject specifier is embedded in the NaN space of IEEE real*8 format:

(integer8) kobj = (integer8) ktype + (integer8) kaddr;

where ktype is the type of object, with bit patterns defined in TFCODE.inc:

      integer*8 ktfoper,ktflist,ktfstring,ktfsymbol,ktfpat,ktfobj,
     $     ktfmask,ktamask,ktrmask,ktfnull,ktfnr,ktfref,ktfother,
     $     ktomask,ktftrue,ktfnan
      parameter (
     $     ktfnull  =int8(z'fff0000000000000'),
     $     ktfother =int8(z'fff2000000000000'),
     $     ktfnr    =int8(z'7ff2000000000000'),
     $     ktfoper  =int8(z'fff6000000000000'),
     $     ktfref   =int8(z'fffa000000000000'),
     $     ktfobj   =int8(z'7ff2000000000000'),
     $     ktflist  =int8(z'7ff2000000000000'),
     $     ktfpat   =int8(z'7ff6000000000000'),
     $     ktfstring=int8(z'7ffa000000000000'),
     $     ktfsymbol=int8(z'7ffe000000000000'),
     $     ktomask  =int8(z'fff2000000000000'),
     $     ktrmask  =int8(z'7ff2000000000000'),
     $     ktfmask  =int8(z'fffe000000000000'),
     $     ktamask  =int8(z'0001ffffffffffff'),
     $     ktftrue  =int8(z'3ff0000000000000'),
     $     ktfnan   =int8(z'fff8000000000000'))

- kaddr is the address ,ie. the object is stored at klist(kaddr). If ktype is an 
operator (ktfoper), kaddr means the code of operator.

- A real*8 number x has a pattern iand(ktrmask, x) .ne. ktfnr .

- A list a is stored at klist(ka = ktfaddr(k)) as:

ilist(2,ka-1): Length[a], 32 bit.
klist(ka)    : head, a[[0]]
klist(ka+1)  : a[[1]]
klist(ka+2)  : a[[2]]
....

- Sad's stack is allocated in a space ktastk, within 32 bit index.

- Lengths of list and string is less than 2**31.

- There are a few functions defined in TFSF.inc to handle the patterns:

        logical*4 function ktfrealq(k)  ! .true. if k is a real.
        integer*8 k
        ktfrealq=iand(ktrmask,k) .ne. ktfnr
        return
        end function ktfrealq

        logical*4 function ktfnonrealq(k) ! .true. if k is not a real.
        integer*8 k
        ktfnonrealq=iand(ktrmask,k) .eq. ktfnr
        return
        end function ktfnonrealq

        logical*4 function ktflistq(k) ! .true. if k is a list
        integer*8 k
        ktflistq=iand(ktfmask,k) .eq. ktflist
        return
        end function ktflistq

        logical*4 function ktfstringq(k) ! .true. if k is a string
        integer*8 k
        ktfstringq=iand(ktfmask,k) .eq. ktfstring
        return
        end function ktfstringq

        logical*4 function ktfnonstringq(k) ! .true. if k is not a string
        integer*8 k
        ktfnonstringq=iand(ktfmask,k) .ne. ktfstring
        return
        end function ktfnonstringq

        logical*4 function ktfoperq(k) ! .true. if k is an operator
        integer*8 k
        ktfoperq=iand(ktfmask,k) .eq. ktfoper
        return
        end function ktfoperq

        logical*4 function ktfnonoperq(k) ! .true. if k is not an operator.
        integer*8 k
        ktfnonoperq=iand(ktfmask,k) .ne. ktfoper
        return
        end function ktfnonoperq

        logical*4 function ktfnonlistq(k) ! .true. if k is not a list.
        integer*8 k
        ktfnonlistq=iand(ktfmask,k) .ne. ktflist
        return
        end function ktfnonlistq

        logical*4 function ktfsymbolq(k) ! .true. if k is a symbol.
        integer*8 k
        ktfsymbolq=iand(ktfmask,k) .eq. ktfsymbol
        return
        end function ktfsymbolq

        logical*4 function ktfnonsymbolq(k) ! .true. if k is not a symbol
        integer*8 k
        ktfnonsymbolq=iand(ktfmask,k) .ne. ktfsymbol
        return
        end function ktfnonsymbolq

        logical*4 function ktfrefq(k) ! .true. if k is a reference.
        integer*8 k
        ktfrefq=iand(ktfmask,k) .eq. ktfref
        return
        end function ktfrefq

        logical*4 function ktfnonrefq(k) ! .true. if k is not a reference.
        integer*8 k
        ktfnonrefq=iand(ktfmask,k) .ne. ktfref
        return
        end function ktfnonrefq

        logical*4 function ktfreallistq(ka) ! .true. if klist(k) stores a real list.
        integer*8 ka
        ktfreallistq=iand(ilist(2,ka-3),lnonreallist) .eq. 0 
        return
        end function ktfreallistq

        logical*4 function ktfnonreallistq(ka) ! .true. if klist(k) stores a non-real list.
        integer*8 ka
        ktfnonreallistq=iand(ilist(2,ka-3),lnonreallist) .ne. 0
        return
        end function ktfnonreallistq

        logical*4 function ktftrueq(ka) ! .true. if k is a non-zero real.
        integer*8 ka
        ktftrueq=ka .ne. 0 .and. iand(ktrmask,ka) .ne. ktfnr
        return
        end function ktftrueq

        logical*4 function ktfobjq(ka)  ! .true. if k is either one of list, symbol, string, pattern.
        integer*8 ka
        ktfobjq=iand(ktomask,ka) .eq. ktfobj
        return
        end function ktfobjq

        logical*4 function ktfnonobjq(ka)  ! .true. if k is neither one of list, symbol, string, pattern.
        integer*8 ka
        ktfnonobjq=iand(ktomask,ka) .ne. ktfobj
        return
        end function ktfnonobjq

        logical*4 function ktfsequenceq(k) ! .true. if k is a sequenc (Null[...]) .
        integer*8 k
        ktfsequenceq=iand(ktfmask,k) .eq. ktflist .and.
     $       klist(ktfaddr(k)) .eq. ktfoper+mtfnull
        return
        end function ktfsequenceq

        integer*8 function ktfaddr(k) ! returns the kaddr of k.
        integer*8 k
        ktfaddr=iand(ktamask,k)
        return
        end function ktfaddr

        complex*16 function cfromr(r) ! returns a dcomplex number  from a real*8 array.
        real*8 r(2)
        cfromr=dcmplx(r(1),r(2))
        return
        end function cfromr
