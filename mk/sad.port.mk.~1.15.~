# New Makefile -- Porting Rule
#
ifeq ($(BEFOREPORTMK),YES)

## SAD Environment
ifndef SOURCE_ARCHIVE_DIR
SOURCE_ARCHIVE_DIR=$(SADDIR)/distfiles
endif

ifdef SAD_ROOT
SAD_SHARE_ROOT=$(SAD_ROOT)/share
else
SAD_ROOT=$(SADDIR)
SAD_SHARE_ROOT=$(SAD_ROOT)/arch
endif

SAD_ARCH_ROOT=$(SAD_ROOT)/arch
SAD_ARCH_DIR=$(SAD_ARCH_ROOT)/$(MACH_ARCH)

ifndef MODULE_ROOT
MODULE_ROOT=$(SAD_SHARE_ROOT)/Extension
endif

ifndef SADEXE
SADEXE=sad1.exe
endif

ifndef LIBSAD
LIBSAD=libsad.a
endif

## Check Compiler Setup
ifeq ($(SETUP_OSTYPE_DEP_COMPILER),NO)
$(error OS Type depend compiler setup is failed!)
endif
ifeq ($(SETUP_OSNAME_DEP_COMPILER),NO)
$(error OS Name depend compiler setup is failed!)
endif

## Check OBJDYNL
SYS_USE_DYNL_MODULE=NO
ifdef OBJDYNL
ifneq ($(OBJDYNL),sim/dynl-dummy.o)
SYS_USE_DYNL_MODULE=YES
endif
endif

## Compiler Environment
ifdef USER_CC
override CC=$(USER_CC)
else
ifdef SYS_CC
override CC=$(SYS_CC)
endif
endif

ifdef USER_CXX
override CXX=$(USER_CXX)
else
ifdef SYS_CXX
override CXX=$(SYS_CXX)
endif
endif

ifdef USER_FC
override FC=$(USER_FC)
else
ifdef SYS_FC
override FC=$(SYS_FC)
endif
endif

## System Environment
ifndef PATCH
PATCH=patch
endif

ifndef AR
AR=ar
endif

ifndef FETCH
ifeq ($(OS_TYPE),4.4BSD-Lite)
FETCH=ftp
else
FETCH=wget --passive-ftp
endif
endif

## Leapseconds support
ifndef HAVE_LEAPSECONDS
HAVE_LEAPSECONDS=NO
endif

include $(SADMK)/sad.epics.mk
include $(SADMK)/sad.tcltk.mk
include $(SADMK)/sad.python.mk
include $(SADMK)/sad.x11.mk
include $(SADMK)/sad.libtai.mk
include $(SADMK)/sad.framework.mk

include $(SADMK)/sad.osdep.mk
include $(SADMK)/sad.glue.mk
include $(SADMK)/sad.obj.mk

endif # BEFOREPORTMK

ifeq ($(AFTERPORTMK),YES)

include $(SADMK)/sad.epics.mk
include $(SADMK)/sad.tcltk.mk
include $(SADMK)/sad.python.mk
include $(SADMK)/sad.x11.mk
include $(SADMK)/sad.libtai.mk
include $(SADMK)/sad.framework.mk

include $(SADMK)/sad.osdep.mk

## Compiler Flags
FC_FLAGS=$(DOPT) $(FOPT) $(FOPT_ADD) $(SYS_FOPT) \
	-I$(SRCDIR) $(OPT_INCDIR)
CC_FLAGS=$(DOPT) $(COPT) $(COPT_ADD) $(SYS_COPT) \
	$(SYS_PTHREAD_COPT) $(TCLTK_OPT) $(PYTHON_OPT) \
	-I$(SRCDIR) $(OPT_INCDIR) -I$(OBJDIR) -I$(SRCDIR)/gdtoa
CXX_FLAGS=$(DOPT) $(CXXOPT) $(CXXOPT_ADD) $(SYS_CXXOPT) $(SYS_PTHREAD_CXXOPT) \
	$(TCLTK_OPT) $(PYTHON_OPT) -I$(SRCDIR) $(OPT_INCDIR)
SYS_LDOPT_RUNTIME_PATH_=
ifdef OPT_RLIBDIR
ifdef SYS_LDOPT_RUNTIME_PATH
ifneq ($(SYS_LDOPT_RUNTIME_PATH),NO)
	SYS_LDOPT_RUNTIME_PATH_=$(SYS_LDOPT_RUNTIME_PATH)$(OPT_RLIBDIR)
endif
endif
endif

SYS_LDOPT_EXPORT_SYMBOL_=
ifneq ($(OBJDYNL),sim/dynl-dummy.o)
ifneq ($(SYS_LDOPT_EXPORT_SYMBOL),NO)
	SYS_LDOPT_EXPORT_SYMBOL_=$(SYS_LDOPT_EXPORT_SYMBOL)
endif
endif

LD_FLAGS=$(OPT_LIBDIR) $(SYS_LDOPT_RUNTIME_PATH_) $(OPT_LIBS) \
	$(SYS_PTHREAD_LIBS) $(SYS_LDOPT_EXPORT_SYMBOL_) $(SYS_LDOPT)\
	$(LDOPT)

ifeq ($(HAVE_MKSTEMPS),YES)
SYS_COPT_tfFileIO_+=-DHAVE_MKSTEMPS
endif

## Define sadDefFunc_* collection
_SAD_DEF_FUNCS=$(SAD_STATIC_DEF_FUNCS) $(SAD_GLUE_DEF_FUNCS) $(SAD_DEF_FUNCS)

## Common Object Rule
.f.o: $(@:.o=.f)
	$(FC) -o $@ -c $(FC_FLAGS) $(SYS_COMMON_FOPT) $(SYS_FOPT_$(@:.o=)) \
		$(SRCDIR)/$(@:.o=.f)

.c.o: $(@:.o=.c)
	$(CC) -o $@ -c $(CC_FLAGS) $(SYS_COMMON_COPT) $(SYS_COPT_$(@:.o=)) \
		$(SRCDIR)/$(@:.o=.c)

.cc.o: $(@:.o=.cc)
	$(CXX) -o $@ -c $(CXX_FLAGS) $(SYS_COMMON_COPT) $(SYS_CXXOPT_$(@:.o=)) \
		$(SRCDIR)/$(@:.o=.cc)

## Special Object
$(OBJ_BACKSLASH_ESCAPE):
	$(FC) $(SYS_FOPT_F77) -o $@ -c $(FC_FLAGS) $(SYS_FOPT_ENABLE_BACKSLASH_ESCAPE) $(SYS_COMMON_FOPT) $(SYS_FOPT_$(@:.o=)) $(SRCDIR)/$(@:.o=.f)

$(OBJ_BACKSLASH_LITERAL):
	$(FC) $(SYS_FOPT_F77) -o $@ -c $(FC_FLAGS) $(SYS_FOPT_DISABLE_BACKSLASH_ESCAPE) $(SYS_COMMON_FOPT) $(SYS_FOPT_$(@:.o=)) $(SRCDIR)/$(@:.o=.f)

## Dynamic Generated Objects
arith.h:	gdtoa/arithchk.c
	$(CC) $(CC_FLAGS) $< || $(CC) -DNO_LONG_LONG $(CC_FLAGS) $<
	./a.out >$@
	rm -f a.out arithchk.o

gd_qnan.h:	gdtoa/qnan.c arith.h 
	$(CC) $(CC_FLAGS) $<
	./a.out >$@
	rm -f a.out qnan.o

tfDefFuncs_.o:	genDefFuncs
	$(CC) -o $@ -c $(CC_FLAGS) $(SYS_COMMON_COPT) $(SYS_COPT_$(@:.o=)) \
		$(@:.o=.c)

tfBuildInfo_.o:	genBuildInfo
	$(CC) -o $@ -c $(CC_FLAGS) $(SYS_COMMON_COPT) $(SYS_COPT_$(@:.o=)) \
		$(@:.o=.c)

MAIN.o:		genBuildInfo
	$(FC) -o $@ -c $(FC_FLAGS) $(SYS_COMMON_COPT) $(SYS_COPT_MAIN) \
		MAIN_VERSION.f

genDefFuncs:
	@rm -f tfDefFuncs_.c
	@date "+/* tfDefFunc_.c generated at %Y-%m-%d %H:%M:%S %z */" >>tfDefFuncs_.c
	@for func in $(FRAMEWORK_INIT_HOOKS); do \
	    echo "extern int init_framework_$${func}(void);" >>tfDefFuncs_.c; \
	done
	@for func in $(_SAD_DEF_FUNCS); do \
	    echo "extern int sadDefFunc_$${func}(void);"     >>tfDefFuncs_.c; \
	done
	@echo ""					>>tfDefFuncs_.c
	@echo "int tfdeffuncs_(void) {"			>>tfDefFuncs_.c
	@echo "/* Call init_frameworks */"		>>tfDefFuncs_.c
	@for func in $(FRAMEWORK_INIT_HOOKS); do \
	    echo "  init_framework_$${func}();"		>>tfDefFuncs_.c; \
	done
	@echo ""					>>tfDefFuncs_.c
	@echo "/* Call sadDefFuncs */"			>>tfDefFuncs_.c
	@for func in $(_SAD_DEF_FUNCS); do \
	    echo "  sadDefFunc_$${func}();"		>>tfDefFuncs_.c; \
	done
	@echo ""					>>tfDefFuncs_.c
	@echo "  return 0;"				>>tfDefFuncs_.c
	@echo "}"					>>tfDefFuncs_.c
	@echo ""					>>tfDefFuncs_.c
	@echo "/* End of File */"			>>tfDefFuncs_.c

genBuildInfo:
	@echo "Updating Build Information"; \
	release=`uname -r 2>/dev/null`; \
	user=`whoami`; hostname=`hostname`; objdir=`pwd`; \
	today=`date "+%Y-%m-%d %H:%M:%S %z"`; \
	sed \
	-e "s@%%RepositoryOwner%%@\"$(REPOSITORY_OWNER)\"@" \
	-e "s@%%RepositoryType%%@\"$(REPOSITORY_TYPE)\"@" \
	-e "s@%%RepositoryLocation%%@\"$(REPOSITORY_LOCATION)\"@" \
	-e "s@%%SourceTreePetName%%@\"$(SOURCE_TREE_PET_NAME)\"@" \
	-e "s@%%FC%%@\"$(shell  $(BINDIR)/escape $(FC))\"@" \
	-e "s@%%CC%%@\"$(shell  $(BINDIR)/escape $(CC))\"@" \
	-e "s@%%CXX%%@\"$(shell $(BINDIR)/escape $(CXX))\"@" \
	-e "s@%%SYS_FOPT%%@\"$(shell   $(BINDIR)/escape $(SYS_FOPT))\"@" \
	-e "s@%%SYS_COPT%%@\"$(shell   $(BINDIR)/escape $(SYS_COPT))\"@" \
	-e "s@%%SYS_CXXOPT%%@\"$(shell $(BINDIR)/escape $(SYS_CXXOPT))\"@" \
	-e "s@%%FOPT%%@\"$(shell   $(BINDIR)/escape $(FOPT))\"@" \
	-e "s@%%COPT%%@\"$(shell   $(BINDIR)/escape $(COPT))\"@" \
	-e "s@%%CXXOPT%%@\"$(shell $(BINDIR)/escape $(CXXOPT))\"@" \
	-e "s@%%OS_TYPE%%@\"$(OS_TYPE)\"@" \
	-e "s@%%OS_NAME%%@\"$(OS_NAME)\"@" \
	-e "s@%%OS_MAJOR%%@$(OS_MAJOR_VERSION)@" \
	-e "s@%%OS_MINOR%%@$(OS_MINOR_VERSION)@" \
	-e "s@%%OS_RELEASE%%@\"$$release\"@" \
	-e "s@%%CPU_ARCH%%@\"$(CPU_ARCH)\"@" \
	-e "s@%%MACH_ARCH%%@\"$(MACH_ARCH)\"@" \
	-e "s@%%SAD_ROOT%%@\"$(SAD_ROOT)\"@" \
	-e "s@%%SAD_ARCH_ROOT%%@\"$(SAD_ARCH_ROOT)\"@" \
	-e "s@%%SAD_SHARE_ROOT%%@\"$(SAD_SHARE_ROOT)\"@" \
	-e "s@%%SAD_PKG_ROOT%%@\"$(SAD_SHARE_ROOT)/Packages\"@" \
	-e "s@%%SAD_MOD_ROOT%%@\"$(MODULE_ROOT)\"@" \
	-e "s@%%BuiltDate%%@\"$$today\"@" \
	-e "s,%%BuiltLocation%%,\"$$user@$$hostname:$$objdir\"," \
	$(SRCDIR)/tfBuildInfo_.c.in >tfBuildInfo_.c; \
	sed \
	-e 's/@BUILT_DATE@/'"$$today/" \
	$(SRCDIR)/MAIN.f >MAIN_VERSION.f

endif # AFTERPORTMK

ifndef BEFOREPORTMK
include $(SADMK)/sad.port.pre.mk
include $(SADMK)/sad.port.post.mk
endif
# End of File
